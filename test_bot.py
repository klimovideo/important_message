#!/usr/bin/env python3
"""
Test script for Important Message Bot
This script tests the basic functionality without running the actual bot.
"""
import asyncio
import json
from datetime import datetime
from models import Message, UserPreferences, Storage
from ai_service import evaluate_message_importance
from utils import setup_logging

async def test_message_analysis():
    """Test message importance analysis"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    
    # Create test message
    test_message = Message(
        message_id=1,
        chat_id=123456,
        chat_title="–¢–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç",
        text="–°—Ä–æ—á–Ω–æ! –í–∞–∂–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 10:00. –í—Å–µ –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å.",
        date=datetime.now(),
        is_channel=False
    )
    
    # Create test user preferences
    test_user = UserPreferences(
        user_id=789,
        importance_threshold=0.6,
        keywords=["—Å—Ä–æ—á–Ω–æ", "–≤–∞–∂–Ω–æ", "–≤—Å—Ç—Ä–µ—á–∞"],
        monitored_chats={123456}
    )
    
    try:
        # Test importance evaluation
        importance_score = await evaluate_message_importance(test_message, test_user)
        print(f"‚úÖ –û—Ü–µ–Ω–∫–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {importance_score:.2f}")
        
        if importance_score >= test_user.importance_threshold:
            print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è –≤–∞–∂–Ω—ã–º")
        else:
            print("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è –Ω–µ–≤–∞–∂–Ω—ã–º")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

def test_storage():
    """Test storage functionality"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞...")
    
    try:
        # Test user creation
        user = Storage.get_user(12345)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: {user.user_id}")
        
        # Test user update
        user.importance_threshold = 0.8
        user.keywords = ["—Ç–µ—Å—Ç", "–≤–∞–∂–Ω–æ"]
        Storage.update_user(user)
        print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        
        # Test user retrieval
        retrieved_user = Storage.get_user(12345)
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ø–æ—Ä–æ–≥–æ–º: {retrieved_user.importance_threshold}")
        
        # Test monitoring functions
        users_monitoring = Storage.get_users_monitoring_chat(123456)
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –º–æ–Ω–∏—Ç–æ—Ä—è—â–∏–µ —á–∞—Ç 123456: {len(users_monitoring)}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: {e}")

def test_utils():
    """Test utility functions"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ç–∏–ª–∏—Ç...")
    
    try:
        from utils import safe_json_parse, validate_chat_id, format_timestamp
        
        # Test JSON parsing
        test_json = '{"score": 0.8, "reason": "—Ç–µ—Å—Ç"}'
        result = safe_json_parse(test_json)
        print(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ JSON: {result}")
        
        # Test chat ID validation
        valid_id = validate_chat_id("123456")
        invalid_id = validate_chat_id("–Ω–µ–≤–µ—Ä–Ω—ã–π")
        print(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è ID —á–∞—Ç–∞: {valid_id}, {invalid_id}")
        
        # Test timestamp formatting
        timestamp = format_timestamp(datetime.now())
        print(f"‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏: {timestamp}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ç–∏–ª–∏—Ç: {e}")

async def main():
    """Run all tests"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –±–æ—Ç–∞ –≤–∞–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...\n")
    
    # Setup logging
    setup_logging("INFO")
    
    # Test storage
    test_storage()
    
    # Test utilities
    test_utils()
    
    # Test message analysis (requires GigaChat API)
    try:
        await test_message_analysis()
    except Exception as e:
        print(f"‚ö†Ô∏è  –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–æ–ø—É—â–µ–Ω (—Ç—Ä–µ–±—É–µ—Ç—Å—è GigaChat API): {e}")
    
    print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")

if __name__ == "__main__":
    asyncio.run(main()) 