#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
"""
import os
import sys
import asyncio
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from models import Storage, UserPreferences, BotConfig, PendingPost, PostStatus
from ai_service import evaluate_message_importance

def test_storage():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    test_user_id = 123456789
    user = Storage.get_user(test_user_id)
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.user_id}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    Storage.add_admin(test_user_id)
    print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
    is_admin = Storage.is_admin(test_user_id)
    print(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {is_admin}")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç
    post = PendingPost(
        post_id="test123",
        user_id=test_user_id,
        message_text="–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏",
        source_info="–¢–µ—Å—Ç–æ–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫",
        importance_score=0.8
    )
    Storage.add_pending_post(post)
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç: {post.post_id}")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    pending_posts = Storage.get_pending_posts(PostStatus.PENDING)
    print(f"‚úÖ –ü–æ—Å—Ç–æ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {len(pending_posts)}")
    
    # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    Storage.delete_post("test123")
    Storage.remove_admin(test_user_id)
    Storage.delete_user(test_user_id)
    print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
    
    return True

def test_menu_structure():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –º–µ–Ω—é"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–µ–Ω—é...")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –º–µ–Ω—é
    from bot import get_main_reply_keyboard
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin_id = 999999999
    Storage.add_admin(admin_id)
    admin_keyboard = get_main_reply_keyboard(admin_id)
    
    print("üì± –ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
    for row in admin_keyboard.keyboard:
        print(f"  {' | '.join(row)}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ–Ω—é –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_keyboard = get_main_reply_keyboard(123456)
    
    print("\nüì± –ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    for row in user_keyboard.keyboard:
        print(f"  {' | '.join(row)}")
    
    # –û—á–∏—â–∞–µ–º
    Storage.remove_admin(admin_id)
    
    return True

def test_ai_evaluation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ü–µ–Ω–∫—É –≤–∞–∂–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ò–ò –æ—Ü–µ–Ω–∫–∏...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    from models import Message
    
    test_message = Message(
        message_id=1,
        chat_id=-1001234567890,
        chat_title="–¢–µ—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª",
        text="–°–†–û–ß–ù–û! –í–∞–∂–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 10:00. –í—Å–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å!",
        date=datetime.now(),
        is_channel=True
    )
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
    user = UserPreferences(
        user_id=111111,
        keywords=["—Å—Ä–æ—á–Ω–æ", "–≤–∞–∂–Ω–∞—è", "–≤—Å—Ç—Ä–µ—á–∞"],
        exclude_keywords=["—Ä–µ–∫–ª–∞–º–∞", "—Å–ø–∞–º"]
    )
    
    # –û—Ü–µ–Ω–∏–≤–∞–µ–º –≤–∞–∂–Ω–æ—Å—Ç—å
    try:
        score = evaluate_message_importance(test_message, user)
        print(f"‚úÖ –û—Ü–µ–Ω–∫–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {score:.2f}")
        print(f"   –ü–æ—Ä–æ–≥: {Storage.bot_config.importance_threshold}")
        print(f"   –í–∞–∂–Ω–æ–µ: {'–î–∞' if score >= Storage.bot_config.importance_threshold else '–ù–µ—Ç'}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏: {e}")
        return False
    
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –≤–∞–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n")
    
    tests = [
        ("–•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö", test_storage),
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–µ–Ω—é", test_menu_structure),
        ("–ò–ò –æ—Ü–µ–Ω–∫–∞", test_ai_evaluation)
    ]
    
    passed = 0
    failed = 0
    
    for test_name, test_func in tests:
        try:
            if test_func():
                passed += 1
                print(f"\n‚úÖ {test_name}: PASSED")
            else:
                failed += 1
                print(f"\n‚ùå {test_name}: FAILED")
        except Exception as e:
            failed += 1
            print(f"\n‚ùå {test_name}: ERROR - {e}")
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ: {passed}")
    print(f"   ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}")
    print(f"   üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(passed/(passed+failed)*100):.1f}%")
    
    return failed == 0

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)