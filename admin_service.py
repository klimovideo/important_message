import logging
import uuid
import html
from datetime import datetime
from typing import List, Optional
from telegram import Bot, Update
from telegram.constants import ParseMode
from telegram.error import TelegramError

from models import Storage, PendingPost, PostStatus, BotConfig
from ai_service import evaluate_message_importance

logger = logging.getLogger(__name__)

class AdminService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º–∏"""
    
    @staticmethod
    async def publish_to_channel(bot: Bot, text: str, parse_mode: str = ParseMode.HTML) -> bool:
        """
        –ü—É–±–ª–∏–∫—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ –±–æ—Ç–∞
        
        Args:
            bot: Telegram Bot instance
            text: –¢–µ–∫—Å—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            parse_mode: –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–∫—Å—Ç–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, False –∏–Ω–∞—á–µ
        """
        config = Storage.bot_config
        
        if not config.publish_channel_id:
            logger.error("ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return False
        
        try:
            await bot.send_message(
                chat_id=config.publish_channel_id,
                text=text,
                parse_mode=parse_mode
            )
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ {config.publish_channel_id}")
            return True
            
        except TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª: {e}")
            return False
    
    @staticmethod
    async def submit_post_for_review(user_id: int, message_text: str, source_info: str = None) -> str:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å—Ç
            message_text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            source_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            
        Returns:
            str: ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ—Å—Ç—ã
        user = Storage.get_user(user_id)
        if not user.can_submit_posts:
            raise PermissionError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ—Å—Ç—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é")
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–æ—Å—Ç–∞
        post_id = str(uuid.uuid4())[:8]
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ—Å—Ç–∞
        post = PendingPost(
            post_id=post_id,
            user_id=user_id,
            message_text=message_text,
            source_info=source_info,
            status=PostStatus.PENDING
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç –≤ –æ—á–µ—Ä–µ–¥–∏
        Storage.add_pending_post(post)
        
        logger.info(f"–ü–æ—Å—Ç {post_id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é")
        return post_id
    
    @staticmethod
    async def evaluate_and_maybe_auto_publish(bot: Bot, post: PendingPost) -> bool:
        """
        –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –ø–æ—Å—Ç —Å –ø–æ–º–æ—â—å—é –ò–ò –∏ –≤–æ–∑–º–æ–∂–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—É–±–ª–∏–∫—É–µ—Ç –µ–≥–æ
        
        Args:
            bot: Telegram Bot instance
            post: –ü–æ—Å—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ –ø–æ—Å—Ç –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω
        """
        config = Storage.bot_config
        
        if not config.auto_publish_enabled or config.require_admin_approval:
            return False
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –ò–ò
            from models import Message
            fake_message = Message(
                message_id=0,
                chat_id=0,
                chat_title="–ü–æ—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                text=post.message_text,
                date=post.submitted_at,
                is_channel=False
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_prefs = Storage.get_user(post.user_id)
            
            # –û—Ü–µ–Ω–∏–≤–∞–µ–º –≤–∞–∂–Ω–æ—Å—Ç—å
            importance_score = evaluate_message_importance(fake_message, user_prefs)
            post.importance_score = importance_score
            
            # –ï—Å–ª–∏ –æ—Ü–µ–Ω–∫–∞ –≤—ã—à–µ –ø–æ—Ä–æ–≥–∞, –ø—É–±–ª–∏–∫—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            if importance_score >= config.importance_threshold:
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                publish_text = AdminService.format_post_for_publication(post)
                
                # –ü—É–±–ª–∏–∫—É–µ–º
                if await AdminService.publish_to_channel(bot, publish_text):
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å—Ç–∞
                    Storage.update_post_status(post.post_id, PostStatus.PUBLISHED)
                    logger.info(f"–ü–æ—Å—Ç {post.post_id} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω (–æ—Ü–µ–Ω–∫–∞: {importance_score:.2f})")
                    return True
            
            logger.info(f"–ü–æ—Å—Ç {post.post_id} –Ω–µ –ø—Ä–æ—à–µ–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é (–æ—Ü–µ–Ω–∫–∞: {importance_score:.2f})")
            return False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ü–µ–Ω–∫–µ –ø–æ—Å—Ç–∞ {post.post_id}: {e}")
            return False
    
    @staticmethod
    def format_post_for_publication(post: PendingPost) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–æ—Å—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª–µ
        
        Args:
            post: –ü–æ—Å—Ç –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        # –ë–∞–∑–æ–≤—ã–π —Ç–µ–∫—Å—Ç
        text = post.message_text
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
        if post.source_info:
            text += f"\n\nüìã <i>–ò—Å—Ç–æ—á–Ω–∏–∫: {post.source_info}</i>"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ü–µ–Ω–∫—É –≤–∞–∂–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
        if post.importance_score:
            text += f"\n‚≠ê <i>–û—Ü–µ–Ω–∫–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏: {post.importance_score:.2f}</i>"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
        text += f"\nüìÖ <i>{post.submitted_at.strftime('%d.%m.%Y %H:%M')}</i>"
        
        return text
    
    @staticmethod
    async def approve_post(bot: Bot, post_id: str, admin_id: int, comment: str = None) -> bool:
        """
        –û–¥–æ–±—Ä—è–µ—Ç –ø–æ—Å—Ç –∏ –ø—É–±–ª–∏–∫—É–µ—Ç –µ–≥–æ
        
        Args:
            bot: Telegram Bot instance
            post_id: ID –ø–æ—Å—Ç–∞
            admin_id: ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            comment: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ –ø–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–¥–æ–±—Ä–µ–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω
        """
        post = Storage.get_pending_post(post_id)
        if not post:
            return False
        
        if post.status != PostStatus.PENDING:
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –æ–¥–æ–±—Ä–∏—Ç—å –ø–æ—Å—Ç {post_id} —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º {post.status}")
            return False
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        publish_text = AdminService.format_post_for_publication(post)
        
        # –ü—É–±–ª–∏–∫—É–µ–º –≤ –∫–∞–Ω–∞–ª–µ
        if await AdminService.publish_to_channel(bot, publish_text):
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å—Ç–∞
            Storage.update_post_status(post_id, PostStatus.APPROVED, admin_id, comment)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏
            try:
                notification_text = (
                    f"‚úÖ <b>–í–∞—à –ø–æ—Å—Ç –æ–¥–æ–±—Ä–µ–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!</b>\n\n"
                    f"üìã <b>ID –ø–æ—Å—Ç–∞:</b> {post_id}\n"
                    f"üë§ <b>–û–¥–æ–±—Ä–∏–ª:</b> –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n"
                )
                
                if comment:
                    import html
                    notification_text += f"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {html.escape(comment)}\n"
                
                notification_text += f"\nüìÖ <b>–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}"
                
                await bot.send_message(
                    chat_id=post.user_id,
                    text=notification_text,
                    parse_mode=ParseMode.HTML
                )
            except TelegramError as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {post.user_id} –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞: {e}")
            
            logger.info(f"–ü–æ—Å—Ç {post_id} –æ–¥–æ–±—Ä–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin_id} –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω")
            return True
        
        return False
    
    @staticmethod
    async def reject_post(bot: Bot, post_id: str, admin_id: int, comment: str = None) -> bool:
        """
        –û—Ç–∫–ª–æ–Ω—è–µ—Ç –ø–æ—Å—Ç
        
        Args:
            bot: Telegram Bot instance
            post_id: ID –ø–æ—Å—Ç–∞
            admin_id: ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            comment: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ –ø–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω
        """
        post = Storage.get_pending_post(post_id)
        if not post:
            return False
        
        if post.status != PostStatus.PENDING:
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –ø–æ—Å—Ç {post_id} —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º {post.status}")
            return False
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å—Ç–∞
        Storage.update_post_status(post_id, PostStatus.REJECTED, admin_id, comment)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
        try:
            notification_text = (
                f"‚ùå <b>–í–∞—à –ø–æ—Å—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω</b>\n\n"
                f"üìã <b>ID –ø–æ—Å—Ç–∞:</b> {post_id}\n"
                f"üë§ <b>–û—Ç–∫–ª–æ–Ω–∏–ª:</b> –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n"
            )
            
            if comment:
                import html
                notification_text += f"üí¨ <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {html.escape(comment)}\n"
            
            notification_text += f"\nüìÖ <b>–†–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–æ:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}"
            
            await bot.send_message(
                chat_id=post.user_id,
                text=notification_text,
                parse_mode=ParseMode.HTML
            )
        except TelegramError as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {post.user_id} –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞: {e}")
        
        logger.info(f"–ü–æ—Å—Ç {post_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin_id}")
        return True
    
    @staticmethod
    def get_posts_for_review() -> List[PendingPost]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤, –æ–∂–∏–¥–∞—é—â–∏—Ö –º–æ–¥–µ—Ä–∞—Ü–∏—é
        
        Returns:
            List[PendingPost]: –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        """
        return Storage.get_pending_posts(PostStatus.PENDING)
    
    @staticmethod
    async def notify_admins_about_new_post(bot: Bot, post: PendingPost) -> None:
        """
        –£–≤–µ–¥–æ–º–ª—è–µ—Ç –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–º –ø–æ—Å—Ç–µ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        
        Args:
            bot: Telegram Bot instance
            post: –ù–æ–≤—ã–π –ø–æ—Å—Ç
        """
        config = Storage.bot_config
        
        if not config.admin_ids:
            logger.warning("–ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        notification_text = (
            f"üìù <b>–ù–æ–≤—ã–π –ø–æ—Å—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏</b>\n\n"
            f"üìã <b>ID –ø–æ—Å—Ç–∞:</b> {post.post_id}\n"
            f"üë§ <b>–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {post.user_id}\n"
            f"üìÖ <b>–í—Ä–µ–º—è:</b> {post.submitted_at.strftime('%d.%m.%Y %H:%M')}\n"
        )
        
        if post.source_info:
            import html
            notification_text += f"üìã <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> {html.escape(post.source_info)}\n"
        
        if post.importance_score:
            notification_text += f"‚≠ê <b>–û—Ü–µ–Ω–∫–∞ –ò–ò:</b> {post.importance_score:.2f}\n"
        
        notification_text += f"\nüìÑ <b>–¢–µ–∫—Å—Ç:</b>\n{html.escape(post.message_text[:500])}"
        
        if len(post.message_text) > 500:
            notification_text += "..."
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        for admin_id in config.admin_ids:
            try:
                await bot.send_message(
                    chat_id=admin_id,
                    text=notification_text,
                    parse_mode=ParseMode.HTML
                )
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ—Å—Ç–µ {post.post_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}")
            except TelegramError as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {admin_id}: {e}")
    
    @staticmethod
    async def process_important_message(bot: Bot, message, importance_score: float) -> bool:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∞–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ - –º–æ–∂–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å
        
        Args:
            bot: Telegram Bot instance
            message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            importance_score: –û—Ü–µ–Ω–∫–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ
        """
        config = Storage.bot_config
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤–∞–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if not config.auto_publish_enabled:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ –≤–∞–∂–Ω–æ—Å—Ç—å –ø–æ—Ä–æ–≥
        if importance_score < config.importance_threshold:
            return False
        
        # –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, —Å–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
        if config.require_admin_approval:
            try:
                post = PendingPost(
                    post_id=str(uuid.uuid4())[:8],
                    user_id=0,  # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø–æ—Å—Ç
                    message_text=message.text,
                    source_info=f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {message.chat_title}",
                    importance_score=importance_score,
                    status=PostStatus.PENDING
                )
                
                Storage.add_pending_post(post)
                await AdminService.notify_admins_about_new_post(bot, post)
                
                logger.info(f"–í–∞–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏ (–æ—Ü–µ–Ω–∫–∞: {importance_score:.2f})")
                return False  # –ù–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é: {e}")
                return False
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –±–µ–∑ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        try:
            publish_text = (
                f"üîî <b>–í–ê–ñ–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï</b>\n\n"
                f"{message.text}\n\n"
                f"üìã <i>–ò—Å—Ç–æ—á–Ω–∏–∫: {message.chat_title}</i>\n"
                f"‚≠ê <i>–û—Ü–µ–Ω–∫–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏: {importance_score:.2f}</i>\n"
                f"üìÖ <i>{message.date.strftime('%d.%m.%Y %H:%M')}</i>"
            )
            
            if await AdminService.publish_to_channel(bot, publish_text):
                logger.info(f"–í–∞–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ (–æ—Ü–µ–Ω–∫–∞: {importance_score:.2f})")
                return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
        
        return False