import logging
import asyncio
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackContext, MessageHandler, CallbackQueryHandler, filters
from telegram.constants import ParseMode

from config import TELEGRAM_TOKEN, DEFAULT_IMPORTANCE_THRESHOLD, USERBOT_ENABLED
from models import Message, Storage, UserPreferences
from ai_service import evaluate_message_importance
from utils import setup_logging

# Import userbot functionality
if USERBOT_ENABLED:
    from userbot import get_userbot, start_userbot, stop_userbot

# Setup logging
setup_logging()

# Enable logging
logger = logging.getLogger(__name__)

# Command handlers
async def start_command(update: Update, context: CallbackContext) -> None:
    """Send a welcome message when the command /start is issued."""
    user_id = update.effective_user.id
    user = Storage.get_user(user_id)
    
    welcome_text = (
        f"ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –≤–∞–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π!\n\n"
        f"–Ø –±—É–¥—É –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≤–∞—à–∏—Ö —á–∞—Ç–æ–≤ –∏ –∫–∞–Ω–∞–ª–æ–≤ —Å –ø–æ–º–æ—â—å—é –ò–ò "
        f"–∏ —É–≤–µ–¥–æ–º–ª—è—Ç—å –≤–∞—Å —Ç–æ–ª—å–∫–æ –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.\n\n"
        f"üìä –í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
        f"‚Ä¢ –ü–æ—Ä–æ–≥ –≤–∞–∂–Ω–æ—Å—Ç–∏: {user.importance_threshold}\n"
        f"‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—Å—è —á–∞—Ç–æ–≤: {len(user.monitored_chats)}\n"
        f"‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—Å—è –∫–∞–Ω–∞–ª–æ–≤: {len(user.monitored_channels)}\n\n"
        f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"
    )
    
    # Create main menu keyboard
    keyboard = [
        [
            InlineKeyboardButton("üìã –°–ø—Ä–∞–≤–∫–∞", callback_data="menu_help"),
            InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="menu_settings")
        ],
        [
            InlineKeyboardButton("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", callback_data="menu_monitoring"),
            InlineKeyboardButton("üîë –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞", callback_data="menu_keywords")
        ],
        [
            InlineKeyboardButton("üöÄ –ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞", callback_data="menu_setup"),
            InlineKeyboardButton("üí° –°–æ–≤–µ—Ç—ã", callback_data="menu_tips")
        ],
        [
            InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="menu_stats"),
            InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="menu_clear_data")
        ]
    ]
    
    # Add userbot button if enabled
    if USERBOT_ENABLED:
        keyboard.insert(-1, [InlineKeyboardButton("ü§ñ Userbot", callback_data="menu_userbot")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(welcome_text, reply_markup=reply_markup)

async def help_command(update: Update, context: CallbackContext) -> None:
    """Send a help message when the command /help is issued."""
    help_text = (
        "ü§ñ <b>–ë–æ—Ç –≤–∞–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - –°–ø—Ä–∞–≤–∫–∞</b>\n\n"
        "üìã <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "‚Ä¢ /start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "‚Ä¢ /menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)\n"
        "‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "‚Ä¢ /settings - –ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫\n"
        "‚Ä¢ /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n"
        "‚Ä¢ /setup - –ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞\n"
        "‚Ä¢ /tips - –ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã\n\n"
        "üìä <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:</b>\n"
        "‚Ä¢ /monitor - –î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç/–∫–∞–Ω–∞–ª –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n"
        "‚Ä¢ /unmonitor - –£–¥–∞–ª–∏—Ç—å —á–∞—Ç/–∫–∞–Ω–∞–ª –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n"
        "‚Ä¢ /list - –°–ø–∏—Å–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–º—ã—Ö —á–∞—Ç–æ–≤ –∏ –∫–∞–Ω–∞–ª–æ–≤\n\n"
        "üîë <b>–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:</b>\n"
        "‚Ä¢ /add_keyword - –î–æ–±–∞–≤–∏—Ç—å –≤–∞–∂–Ω–æ–µ —Å–ª–æ–≤–æ\n"
        "‚Ä¢ /remove_keyword - –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ\n"
        "‚Ä¢ /keywords - –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Å–ª–æ–≤\n\n"
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
        "‚Ä¢ /threshold - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ä–æ–≥ –≤–∞–∂–Ω–æ—Å—Ç–∏ (0.0-1.0)\n"
        "‚Ä¢ /clear_data - –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ\n\n"
        "ü§ñ <b>Userbot (–°–∫—Ä—ã—Ç—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥):</b>\n"
        "‚Ä¢ /userbot - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ userbot\n"
        "‚Ä¢ /userbot_start - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä—ã—Ç—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n"
        "‚Ä¢ /userbot_join <—Å—Å—ã–ª–∫–∞> - –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–∞–Ω–∞–ª—É/—á–∞—Ç—É\n\n"
        "üí° <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n"
        "üìä <b>–û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º:</b>\n"
        "1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ —á–∞—Ç—ã/–∫–∞–Ω–∞–ª—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n"
        "2. –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞/–∫–∞–Ω–∞–ª–∞ –±–æ—Ç—É\n"
        "3. –û—Ç–≤–µ—Ç—å—Ç–µ /monitor –Ω–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "ü§ñ <b>Userbot —Ä–µ–∂–∏–º (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è):</b>\n"
        "1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ API –≤ .env —Ñ–∞–π–ª–µ\n"
        "2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ userbot: /userbot_start\n"
        "3. –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ –∫–∞–Ω–∞–ª–∞–º: /userbot_join <—Å—Å—ã–ª–∫–∞>\n"
        "4. –ü–æ–ª–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π!\n\n"
        "üéõÔ∏è <b>–°–æ–≤–µ—Ç:</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è —É–¥–æ–±–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º!"
    )
    await update.message.reply_text(help_text, parse_mode=ParseMode.HTML)

async def settings_command(update: Update, context: CallbackContext) -> None:
    """Display current settings."""
    user_id = update.effective_user.id
    user = Storage.get_user(user_id)
    
    keywords = ", ".join(user.keywords) if user.keywords else "–ù–µ —É–∫–∞–∑–∞–Ω—ã"
    exclude_keywords = ", ".join(user.exclude_keywords) if user.exclude_keywords else "–ù–µ —É–∫–∞–∑–∞–Ω—ã"
    
    settings_text = (
        f"‚öôÔ∏è <b>–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n\n"
        f"üìä <b>–û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>\n"
        f"‚Ä¢ –ü–æ—Ä–æ–≥ –≤–∞–∂–Ω–æ—Å—Ç–∏: {user.importance_threshold}\n"
        f"‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—Å—è —á–∞—Ç–æ–≤: {len(user.monitored_chats)}\n"
        f"‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—Å—è –∫–∞–Ω–∞–ª–æ–≤: {len(user.monitored_channels)}\n\n"
        f"üîë <b>–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:</b>\n"
        f"‚Ä¢ –í–∞–∂–Ω—ã–µ —Å–ª–æ–≤–∞: {keywords}\n"
        f"‚Ä¢ –ò—Å–∫–ª—é—á–∞–µ–º—ã–µ —Å–ª–æ–≤–∞: {exclude_keywords}\n\n"
        f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"
    )
    await update.message.reply_text(settings_text, parse_mode=ParseMode.HTML)

async def monitor_command(update: Update, context: CallbackContext) -> None:
    """Add a chat or channel to monitor."""
    user_id = update.effective_user.id
    user = Storage.get_user(user_id)
    
    logger.info(f"–í—ã–∑–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /monitor –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–æ–º: {update.message.reply_to_message is not None}")
    
    # Check if this is a reply to a forwarded message
    if (update.message.reply_to_message and 
        hasattr(update.message.reply_to_message, 'forward_origin') and 
        update.message.reply_to_message.forward_origin):
        
        forward_origin = update.message.reply_to_message.forward_origin
        logger.info(f"Forward origin: {forward_origin}")
        
        # Check if it's from a chat
        if hasattr(forward_origin, 'chat'):
            chat = forward_origin.chat
            chat_id = chat.id
            chat_title = chat.title or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Ç"
            is_channel = chat.type == "channel"
            
            logger.info(f"–î–æ–±–∞–≤–ª—è—é {'–∫–∞–Ω–∞–ª' if is_channel else '—á–∞—Ç'} –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {chat_title} (ID: {chat_id})")
            
            # Add the chat/channel to the monitored list
            if is_channel:
                user.monitored_channels.add(chat_id)
                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –∫–∞–Ω–∞–ª {chat_id} –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            else:
                user.monitored_chats.add(chat_id)
                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω —á–∞—Ç {chat_id} –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            Storage.update_user(user)
            await update.message.reply_text(
                f"‚úÖ –¢–µ–ø–µ—Ä—å –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—Å—è {chat_title} ({chat_id}).\n"
                f"–Ø –±—É–¥—É —É–≤–µ–¥–æ–º–ª—è—Ç—å –≤–∞—Å –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∏–∑ —ç—Ç–æ–≥–æ {'–∫–∞–Ω–∞–ª–∞' if is_channel else '—á–∞—Ç–∞'}."
            )
            return
        else:
            logger.info("Forward origin –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç chat")
    else:
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        if update.message.reply_to_message:
            logger.info(f"Reply to message –∏–º–µ–µ—Ç forward_origin: {hasattr(update.message.reply_to_message, 'forward_origin')}")
            if hasattr(update.message.reply_to_message, 'forward_origin'):
                logger.info(f"Forward origin –∑–Ω–∞—á–µ–Ω–∏–µ: {update.message.reply_to_message.forward_origin}")
    
    # If no forwarded message in reply, show instructions
    await update.message.reply_text(
        "üìã <b>–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å —á–∞—Ç/–∫–∞–Ω–∞–ª –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:</b>\n\n"
        "1Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ —á–∞—Ç –∏–ª–∏ –∫–∞–Ω–∞–ª\n"
        "2Ô∏è‚É£ –ü–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —ç—Ç–æ–≥–æ —á–∞—Ç–∞/–∫–∞–Ω–∞–ª–∞ –±–æ—Ç—É\n"
        "3Ô∏è‚É£ –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /monitor\n\n"
        "‚úÖ –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –±–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è "
        "–∏–∑ —ç—Ç–æ–≥–æ —á–∞—Ç–∞/–∫–∞–Ω–∞–ª–∞ –∏ —É–≤–µ–¥–æ–º–ª—è—Ç—å –≤–∞—Å –æ –≤–∞–∂–Ω—ã—Ö.",
        parse_mode=ParseMode.HTML
    )

async def unmonitor_command(update: Update, context: CallbackContext) -> None:
    """Remove a chat or channel from monitoring."""
    user_id = update.effective_user.id
    user = Storage.get_user(user_id)
    
    # Create keyboard with monitored chats/channels
    keyboard = []
    
    # Add chat buttons
    for chat_id in user.monitored_chats:
        keyboard.append([InlineKeyboardButton(f"üí¨ –ß–∞—Ç: {chat_id}", callback_data=f"unmonitor_chat_{chat_id}")])
    
    # Add channel buttons
    for channel_id in user.monitored_channels:
        keyboard.append([InlineKeyboardButton(f"üì¢ –ö–∞–Ω–∞–ª: {channel_id}", callback_data=f"unmonitor_channel_{channel_id}")])
    
    if not keyboard:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç–µ –Ω–∏ –æ–¥–∏–Ω —á–∞—Ç –∏–ª–∏ –∫–∞–Ω–∞–ª.")
        return
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –∏–ª–∏ –∫–∞–Ω–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:",
        reply_markup=reply_markup
    )

async def list_command(update: Update, context: CallbackContext) -> None:
    """List all monitored chats and channels."""
    user_id = update.effective_user.id
    user = Storage.get_user(user_id)
    
    if not user.monitored_chats and not user.monitored_channels:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç–µ –Ω–∏ –æ–¥–∏–Ω —á–∞—Ç –∏–ª–∏ –∫–∞–Ω–∞–ª.")
        return
    
    response = "üìã <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–º—ã–µ —á–∞—Ç—ã –∏ –∫–∞–Ω–∞–ª—ã:</b>\n\n"
    
    if user.monitored_chats:
        response += "üí¨ <b>–ß–∞—Ç—ã:</b>\n"
        for chat_id in user.monitored_chats:
            response += f"‚Ä¢ {chat_id}\n"
        response += "\n"
    
    if user.monitored_channels:
        response += "üì¢ <b>–ö–∞–Ω–∞–ª—ã:</b>\n"
        for channel_id in user.monitored_channels:
            response += f"‚Ä¢ {channel_id}\n"
    
    await update.message.reply_text(response, parse_mode=ParseMode.HTML)

async def add_keyword_command(update: Update, context: CallbackContext) -> None:
    """Add a keyword to prioritize."""
    if not context.args:
        await update.message.reply_text(
            "üîë <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞:</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_keyword <—Å–ª–æ–≤–æ>\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ /add_keyword —Å—Ä–æ—á–Ω–æ\n"
            "‚Ä¢ /add_keyword –≤–∞–∂–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞\n"
            "‚Ä¢ /add_keyword –¥–µ–¥–ª–∞–π–Ω",
            parse_mode=ParseMode.HTML
        )
        return
    
    keyword = " ".join(context.args).lower()
    user_id = update.effective_user.id
    user = Storage.get_user(user_id)
    
    if keyword not in user.keywords:
        user.keywords.append(keyword)
        Storage.update_user(user)
        await update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: <b>{keyword}</b>", parse_mode=ParseMode.HTML)
    else:
        await update.message.reply_text(f"‚ö†Ô∏è –°–ª–æ–≤–æ '<b>{keyword}</b>' —É–∂–µ –µ—Å—Ç—å –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ.", parse_mode=ParseMode.HTML)

async def remove_keyword_command(update: Update, context: CallbackContext) -> None:
    """Remove a keyword."""
    if not context.args:
        await update.message.reply_text(
            "üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞:</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remove_keyword <—Å–ª–æ–≤–æ>\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ /remove_keyword —Å—Ä–æ—á–Ω–æ\n"
            "‚Ä¢ /remove_keyword –≤–∞–∂–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞",
            parse_mode=ParseMode.HTML
        )
        return
    
    keyword = " ".join(context.args).lower()
    user_id = update.effective_user.id
    user = Storage.get_user(user_id)
    
    if keyword in user.keywords:
        user.keywords.remove(keyword)
        Storage.update_user(user)
        await update.message.reply_text(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: <b>{keyword}</b>", parse_mode=ParseMode.HTML)
    else:
        await update.message.reply_text(f"‚ùå –°–ª–æ–≤–æ '<b>{keyword}</b>' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ.", parse_mode=ParseMode.HTML)

async def keywords_command(update: Update, context: CallbackContext) -> None:
    """List all keywords."""
    user_id = update.effective_user.id
    user = Storage.get_user(user_id)
    
    if not user.keywords:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤.")
        return
    
    keywords_text = "üîë <b>–í–∞—à–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:</b>\n\n" + "\n".join(f"‚Ä¢ {keyword}" for keyword in user.keywords)
    await update.message.reply_text(keywords_text, parse_mode=ParseMode.HTML)

async def threshold_command(update: Update, context: CallbackContext) -> None:
    """Set importance threshold."""
    if not context.args:
        current_threshold = Storage.get_user(update.effective_user.id).importance_threshold
        await update.message.reply_text(
            f"üìä <b>–ü–æ—Ä–æ–≥ –≤–∞–∂–Ω–æ—Å—Ç–∏:</b>\n\n"
            f"–¢–µ–∫—É—â–∏–π –ø–æ—Ä–æ–≥: <b>{current_threshold}</b>\n\n"
            f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /threshold <0.0-1.0>\n\n"
            f"üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
            f"‚Ä¢ 0.3-0.5 - –¢–æ–ª—å–∫–æ –æ—á–µ–Ω—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
            f"‚Ä¢ 0.5-0.7 - –í–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)\n"
            f"‚Ä¢ 0.7-0.9 - –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
            f"–ü—Ä–∏–º–µ—Ä—ã:\n"
            f"‚Ä¢ /threshold 0.5\n"
            f"‚Ä¢ /threshold 0.8",
            parse_mode=ParseMode.HTML
        )
        return
    
    try:
        threshold = float(context.args[0])
        if not 0.0 <= threshold <= 1.0:
            await update.message.reply_text("‚ùå –ü–æ—Ä–æ–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0.0 –¥–æ 1.0")
            return
        
        user_id = update.effective_user.id
        user = Storage.get_user(user_id)
        user.importance_threshold = threshold
        Storage.update_user(user)
        
        await update.message.reply_text(f"‚úÖ –ü–æ—Ä–æ–≥ –≤–∞–∂–Ω–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: <b>{threshold}</b>", parse_mode=ParseMode.HTML)
    except ValueError:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0.0 –¥–æ 1.0")

async def stats_command(update: Update, context: CallbackContext) -> None:
    """Show bot statistics."""
    user_id = update.effective_user.id
    user = Storage.get_user(user_id)
    
    all_users = Storage.get_all_users()
    total_users = len(all_users)
    total_monitored_chats = sum(len(u.monitored_chats) for u in all_users.values())
    total_monitored_channels = sum(len(u.monitored_channels) for u in all_users.values())
    
    stats_text = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b>\n\n"
        f"üë§ <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—Å—è —á–∞—Ç–æ–≤: {len(user.monitored_chats)}\n"
        f"‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—Å—è –∫–∞–Ω–∞–ª–æ–≤: {len(user.monitored_channels)}\n"
        f"‚Ä¢ –ö–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {len(user.keywords)}\n"
        f"‚Ä¢ –ü–æ—Ä–æ–≥ –≤–∞–∂–Ω–æ—Å—Ç–∏: {user.importance_threshold}\n\n"
        f"üåê <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—Å—è —á–∞—Ç–æ–≤: {total_monitored_chats}\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—Å—è –∫–∞–Ω–∞–ª–æ–≤: {total_monitored_channels}"
    )
    
    await update.message.reply_text(stats_text, parse_mode=ParseMode.HTML)

async def clear_data_command(update: Update, context: CallbackContext) -> None:
    """Clear all user data."""
    user_id = update.effective_user.id
    
    # Create confirmation keyboard
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ", callback_data="clear_data_confirm"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="clear_data_cancel")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "‚ö†Ô∏è <b>–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ?\n"
        "–≠—Ç–æ —É–¥–∞–ª–∏—Ç –≤—Å–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–º—ã–µ —á–∞—Ç—ã, –∫–∞–Ω–∞–ª—ã –∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞.\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )

async def setup_command(update: Update, context: CallbackContext) -> None:
    """Quick setup wizard for new users."""
    user_id = update.effective_user.id
    user = Storage.get_user(user_id)
    
    # Check if user already has some setup
    if user.monitored_chats or user.monitored_channels or user.keywords:
        await update.message.reply_text(
            "‚ö†Ô∏è <b>–ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞</b>\n\n"
            "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —á–∞—Ç—ã, –∫–∞–Ω–∞–ª—ã –∏–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /clear_data –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π.",
            parse_mode=ParseMode.HTML
        )
        return
    
    setup_text = (
        "üöÄ <b>–ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞</b>\n\n"
        "–î–∞–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–º –±–æ—Ç–∞ –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤:\n\n"
        "üìã <b>–®–∞–≥ 1: –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ —á–∞—Ç—ã/–∫–∞–Ω–∞–ª—ã</b>\n"
        "–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ —á–∞—Ç—ã –∏ –∫–∞–Ω–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å.\n\n"
        "üìã <b>–®–∞–≥ 2: –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n"
        "–ü–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞/–∫–∞–Ω–∞–ª–∞ –±–æ—Ç—É.\n\n"
        "üìã <b>–®–∞–≥ 3: –û—Ç–≤–µ—Ç—å—Ç–µ /monitor</b>\n"
        "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /monitor.\n\n"
        "üìã <b>–®–∞–≥ 4: –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞</b>\n"
        "–î–æ–±–∞–≤—å—Ç–µ –≤–∞–∂–Ω—ã–µ —Å–ª–æ–≤–∞: /add_keyword <—Å–ª–æ–≤–æ>\n\n"
        "üìã <b>–®–∞–≥ 5: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–æ—Ä–æ–≥ –≤–∞–∂–Ω–æ—Å—Ç–∏</b>\n"
        "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: /threshold 0.7\n\n"
        "üí° <b>–ì–æ—Ç–æ–≤–æ!</b> –ë–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–≤–µ–¥–æ–º–ª—è—Ç—å –≤–∞—Å –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö."
    )
    
    await update.message.reply_text(setup_text)

async def tips_command(update: Update, context: CallbackContext) -> None:
    """Show useful tips for using the bot."""
    tips_text = (
        "üí° <b>–ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>\n\n"
        "üîë <b>–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:</b>\n"
        "‚Ä¢ –î–æ–±–∞–≤–ª—è–π—Ç–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–∂–Ω—ã –¥–ª—è –≤–∞—Å\n"
        "‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã: —Å—Ä–æ—á–Ω–æ, –¥–µ–¥–ª–∞–π–Ω, –≤—Å—Ç—Ä–µ—á–∞, –æ—Ç—á–µ—Ç\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_keyword –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è\n\n"
        "üìä <b>–ü–æ—Ä–æ–≥ –≤–∞–∂–Ω–æ—Å—Ç–∏:</b>\n"
        "‚Ä¢ 0.3-0.5: –¢–æ–ª—å–∫–æ –æ—á–µ–Ω—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
        "‚Ä¢ 0.5-0.7: –í–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)\n"
        "‚Ä¢ 0.7-0.9: –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
        "üì± <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:</b>\n"
        "‚Ä¢ –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç/–∫–∞–Ω–∞–ª\n"
        "‚Ä¢ –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—Ç—å—Ç–µ /monitor\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /list –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞\n\n"
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
        "‚Ä¢ /settings - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫\n"
        "‚Ä¢ /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n"
        "‚Ä¢ /clear_data - –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö\n\n"
        "üÜò <b>–ü–æ–º–æ—â—å:</b>\n"
        "‚Ä¢ /help - –ø–æ–ª–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞\n"
        "‚Ä¢ /setup - –±—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞"
    )
    
    await update.message.reply_text(tips_text)

async def debug_command(update: Update, context: CallbackContext) -> None:
    """Debug command to check user settings and bot status."""
    user_id = update.effective_user.id
    user = Storage.get_user(user_id)
    
    debug_text = (
        f"üêõ <b>–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n\n"
        f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b>\n"
        f"‚Ä¢ ID: {user_id}\n"
        f"‚Ä¢ –ü–æ—Ä–æ–≥ –≤–∞–∂–Ω–æ—Å—Ç–∏: {user.importance_threshold}\n"
        f"‚Ä¢ –ö–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {len(user.keywords)}\n\n"
        f"üìä <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:</b>\n"
        f"‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—Å—è —á–∞—Ç–æ–≤: {len(user.monitored_chats)}\n"
        f"‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—Å—è –∫–∞–Ω–∞–ª–æ–≤: {len(user.monitored_channels)}\n"
        f"‚Ä¢ –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤: {list(user.monitored_chats)}\n"
        f"‚Ä¢ –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤: {list(user.monitored_channels)}\n\n"
        f"üîë <b>–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:</b>\n"
        f"‚Ä¢ {', '.join(user.keywords) if user.keywords else '–ù–µ—Ç'}\n\n"
        f"üìÖ <b>–í—Ä–µ–º—è:</b>\n"
        f"‚Ä¢ –°–æ–∑–¥–∞–Ω: {user.created_at.strftime('%Y-%m-%d %H:%M:%S')}\n"
        f"‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω: {user.updated_at.strftime('%Y-%m-%d %H:%M:%S')}"
    )
    
    await update.message.reply_text(debug_text, parse_mode=ParseMode.HTML)

async def userbot_command(update: Update, context: CallbackContext) -> None:
    """Manage userbot functionality."""
    if not USERBOT_ENABLED:
        await update.message.reply_text(
            "‚ùå <b>Userbot —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∞</b>\n\n"
            "–î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è userbot —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:\n"
            "‚Ä¢ TELEGRAM_API_ID\n"
            "‚Ä¢ TELEGRAM_API_HASH\n"
            "‚Ä¢ TELEGRAM_PHONE\n"
            "‚Ä¢ USERBOT_ENABLED=true",
            parse_mode=ParseMode.HTML
        )
        return
    
    userbot = get_userbot()
    
    status_text = "ü§ñ <b>Userbot - –°–∫—Ä—ã—Ç—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥</b>\n\n"
    
    if userbot.is_running:
        status_text += "‚úÖ <b>–°—Ç–∞—Ç—É—Å:</b> –ê–∫—Ç–∏–≤–µ–Ω\n"
        monitored = userbot.get_monitored_sources()
        status_text += f"üìä <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—Å—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:</b> {len(monitored)}\n"
        if monitored:
            status_text += f"üîç <b>ID –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:</b> {', '.join(map(str, monitored))}\n"
    else:
        status_text += "‚ùå <b>–°—Ç–∞—Ç—É—Å:</b> –ù–µ–∞–∫—Ç–∏–≤–µ–Ω\n"
    
    status_text += (
        f"\nüí° <b>–ß—Ç–æ —Ç–∞–∫–æ–µ Userbot:</b>\n"
        f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ñ–µ–π–∫–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç Telegram\n"
        f"‚Ä¢ –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã –∏ —á–∞—Ç—ã\n"
        f"‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n"
        f"‚Ä¢ –ü–æ–ª–Ω–∞—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å –∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å\n"
        f"‚Ä¢ –ù–µ —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
        f"üìã <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        f"‚Ä¢ /userbot_start - –ó–∞–ø—É—Å—Ç–∏—Ç—å userbot\n"
        f"‚Ä¢ /userbot_stop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å userbot\n"
        f"‚Ä¢ /userbot_join <—Å—Å—ã–ª–∫–∞> - –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–∞–Ω–∞–ª—É/—á–∞—Ç—É\n"
        f"‚Ä¢ /userbot_leave <ID> - –ü–æ–∫–∏–Ω—É—Ç—å –∫–∞–Ω–∞–ª/—á–∞—Ç\n"
        f"‚Ä¢ /userbot_status - –°—Ç–∞—Ç—É—Å –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
    )
    
    await update.message.reply_text(status_text, parse_mode=ParseMode.HTML)

async def userbot_start_command(update: Update, context: CallbackContext) -> None:
    """Start the userbot."""
    if not USERBOT_ENABLED:
        await update.message.reply_text("‚ùå Userbot —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
        return
    
    userbot = get_userbot()
    
    if userbot.is_running:
        await update.message.reply_text("‚úÖ Userbot —É–∂–µ –∑–∞–ø—É—â–µ–Ω!")
        return
    
    await update.message.reply_text("üöÄ –ó–∞–ø—É—Å–∫–∞—é userbot...")
    
    success = await start_userbot()
    
    if success:
        await update.message.reply_text(
            "‚úÖ <b>Userbot —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!</b>\n\n"
            "ü§ñ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∫—Ä—ã—Ç—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:\n"
            "‚Ä¢ /userbot_join <—Å—Å—ã–ª–∫–∞> - –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–∞–Ω–∞–ª—É\n"
            "‚Ä¢ /userbot - –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç—É—Å–∞ –∏ –∫–æ–º–∞–Ω–¥",
            parse_mode=ParseMode.HTML
        )
    else:
        await update.message.reply_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ userbot</b>\n\n"
            "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            "‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n"
            "‚Ä¢ –ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω\n"
            "‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.",
            parse_mode=ParseMode.HTML
        )

async def userbot_stop_command(update: Update, context: CallbackContext) -> None:
    """Stop the userbot."""
    if not USERBOT_ENABLED:
        await update.message.reply_text("‚ùå Userbot —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
        return
    
    userbot = get_userbot()
    
    if not userbot.is_running:
        await update.message.reply_text("‚ùå Userbot –Ω–µ –∑–∞–ø—É—â–µ–Ω.")
        return
    
    await update.message.reply_text("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é userbot...")
    await stop_userbot()
    await update.message.reply_text("‚úÖ Userbot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

async def userbot_join_command(update: Update, context: CallbackContext) -> None:
    """Join a chat or channel with userbot."""
    if not USERBOT_ENABLED:
        await update.message.reply_text("‚ùå Userbot —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
        return
    
    userbot = get_userbot()
    
    if not userbot.is_running:
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ userbot: /userbot_start")
        return
    
    if not context.args:
        await update.message.reply_text(
            "üìã <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>\n\n"
            "/userbot_join <—Å—Å—ã–ª–∫–∞_–∏–ª–∏_username>\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ /userbot_join https://t.me/channel_name\n"
            "‚Ä¢ /userbot_join @channel_name\n"
            "‚Ä¢ /userbot_join channel_name",
            parse_mode=ParseMode.HTML
        )
        return
    
    chat_link = context.args[0]
    await update.message.reply_text(f"üîç –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è—é—Å—å –∫ {chat_link}...")
    
    success = await userbot.join_chat(chat_link)
    
    if success:
        # Get chat info
        chat_info = await userbot.get_chat_info(chat_link)
        if chat_info:
            user_id = update.effective_user.id
            user = Storage.get_user(user_id)
            
            # Add to user's monitoring list
            if chat_info['type'] == 'CHANNEL':
                user.monitored_channels.add(chat_info['id'])
            else:
                user.monitored_chats.add(chat_info['id'])
            Storage.update_user(user)
            
            await update.message.reply_text(
                f"‚úÖ <b>–£—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è!</b>\n\n"
                f"üìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n"
                f"‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {chat_info['title']}\n"
                f"‚Ä¢ ID: {chat_info['id']}\n"
                f"‚Ä¢ –¢–∏–ø: {chat_info['type']}\n"
                f"‚Ä¢ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {chat_info.get('members_count', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
                f"üîî Userbot —Ç–µ–ø–µ—Ä—å –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç —ç—Ç–æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫ –∏ –±—É–¥–µ—Ç —É–≤–µ–¥–æ–º–ª—è—Ç—å –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö!",
                parse_mode=ParseMode.HTML
            )
        else:
            await update.message.reply_text("‚úÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ.")
    else:
        await update.message.reply_text(
            f"‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ {chat_link}</b>\n\n"
            f"–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            f"‚Ä¢ –ö–∞–Ω–∞–ª/—á–∞—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π\n"
            f"‚Ä¢ –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞\n"
            f"‚Ä¢ –§–ª—É–¥-–ª–∏–º–∏—Ç—ã\n"
            f"‚Ä¢ –ê–∫–∫–∞—É–Ω—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω",
            parse_mode=ParseMode.HTML
        )

async def userbot_leave_command(update: Update, context: CallbackContext) -> None:
    """Leave a chat or channel with userbot."""
    if not USERBOT_ENABLED:
        await update.message.reply_text("‚ùå Userbot —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
        return
    
    userbot = get_userbot()
    
    if not userbot.is_running:
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ userbot: /userbot_start")
        return
    
    if not context.args:
        monitored = userbot.get_monitored_sources()
        if monitored:
            sources_text = "üìã <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–º—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:</b>\n\n"
            for source_id in monitored:
                sources_text += f"‚Ä¢ ID: {source_id}\n"
            sources_text += "\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /userbot_leave <ID>"
        else:
            sources_text = "‚ùå –ù–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–º—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤."
        
        await update.message.reply_text(sources_text, parse_mode=ParseMode.HTML)
        return
    
    try:
        chat_id = int(context.args[0])
    except ValueError:
        await update.message.reply_text("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    
    await update.message.reply_text(f"üö™ –ü–æ–∫–∏–¥–∞—é —á–∞—Ç {chat_id}...")
    
    success = await userbot.leave_chat(chat_id)
    
    if success:
        # Remove from user's monitoring list
        user_id = update.effective_user.id
        user = Storage.get_user(user_id)
        user.monitored_chats.discard(chat_id)
        user.monitored_channels.discard(chat_id)
        Storage.update_user(user)
        
        await update.message.reply_text(
            f"‚úÖ <b>–ü–æ–∫–∏–Ω—É–ª —á–∞—Ç/–∫–∞–Ω–∞–ª {chat_id}</b>\n\n"
            f"–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —ç—Ç–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.",
            parse_mode=ParseMode.HTML
        )
    else:
        await update.message.reply_text(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∏–Ω—É—Ç—å —á–∞—Ç/–∫–∞–Ω–∞–ª {chat_id}",
            parse_mode=ParseMode.HTML
        )

async def userbot_status_command(update: Update, context: CallbackContext) -> None:
    """Show detailed userbot status."""
    if not USERBOT_ENABLED:
        await update.message.reply_text("‚ùå Userbot —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
        return
    
    userbot = get_userbot()
    user_id = update.effective_user.id
    user = Storage.get_user(user_id)
    
    status_text = "üìä <b>–ü–æ–¥—Ä–æ–±–Ω—ã–π —Å—Ç–∞—Ç—É—Å Userbot</b>\n\n"
    
    # Userbot status
    if userbot.is_running:
        status_text += "‚úÖ <b>Userbot:</b> –ê–∫—Ç–∏–≤–µ–Ω\n"
        try:
            me = await userbot.app.get_me()
            status_text += f"üë§ <b>–ê–∫–∫–∞—É–Ω—Ç:</b> {me.first_name} (@{me.username or '–±–µ–∑_username'})\n"
        except:
            status_text += "üë§ <b>–ê–∫–∫–∞—É–Ω—Ç:</b> –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n"
    else:
        status_text += "‚ùå <b>Userbot:</b> –ù–µ–∞–∫—Ç–∏–≤–µ–Ω\n"
    
    # Monitoring sources
    monitored_userbot = userbot.get_monitored_sources()
    status_text += f"\nüìä <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–µ—Ä–µ–∑ userbot:</b>\n"
    status_text += f"‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(monitored_userbot)}\n"
    if monitored_userbot:
        status_text += f"‚Ä¢ ID: {', '.join(map(str, monitored_userbot))}\n"
    
    # User monitoring (passive + active)
    status_text += f"\nüìã <b>–í–∞—à –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:</b>\n"
    status_text += f"‚Ä¢ –ß–∞—Ç–æ–≤: {len(user.monitored_chats)}\n"
    status_text += f"‚Ä¢ –ö–∞–Ω–∞–ª–æ–≤: {len(user.monitored_channels)}\n"
    status_text += f"‚Ä¢ –ü–æ—Ä–æ–≥ –≤–∞–∂–Ω–æ—Å—Ç–∏: {user.importance_threshold}\n"
    status_text += f"‚Ä¢ –ö–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {len(user.keywords)}\n"
    
    await update.message.reply_text(status_text, parse_mode=ParseMode.HTML)

async def menu_command(update: Update, context: CallbackContext) -> None:
    """Show main menu."""
    keyboard = [
        [
            InlineKeyboardButton("üìã –°–ø—Ä–∞–≤–∫–∞", callback_data="menu_help"),
            InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="menu_settings")
        ],
        [
            InlineKeyboardButton("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", callback_data="menu_monitoring"),
            InlineKeyboardButton("üîë –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞", callback_data="menu_keywords")
        ],
        [
            InlineKeyboardButton("üöÄ –ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞", callback_data="menu_setup"),
            InlineKeyboardButton("üí° –°–æ–≤–µ—Ç—ã", callback_data="menu_tips")
        ],
        [
            InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="menu_stats"),
            InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="menu_clear_data")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üéõÔ∏è <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )

async def callback_handler(update: Update, context: CallbackContext) -> None:
    """Handle button callbacks."""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    user_id = update.effective_user.id
    user = Storage.get_user(user_id)
    
    # Main menu handlers
    if data == "menu_help":
        help_text = (
            "ü§ñ <b>–ë–æ—Ç –≤–∞–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - –°–ø—Ä–∞–≤–∫–∞</b>\n\n"
            "üìã <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "‚Ä¢ /start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
            "‚Ä¢ /menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
            "‚Ä¢ /settings - –ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫\n"
            "‚Ä¢ /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n"
            "‚Ä¢ /setup - –ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞\n"
            "‚Ä¢ /tips - –ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã\n\n"
            "üìä <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:</b>\n"
            "‚Ä¢ /monitor - –î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç/–∫–∞–Ω–∞–ª –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n"
            "‚Ä¢ /unmonitor - –£–¥–∞–ª–∏—Ç—å —á–∞—Ç/–∫–∞–Ω–∞–ª –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n"
            "‚Ä¢ /list - –°–ø–∏—Å–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–º—ã—Ö —á–∞—Ç–æ–≤ –∏ –∫–∞–Ω–∞–ª–æ–≤\n\n"
            "üîë <b>–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:</b>\n"
            "‚Ä¢ /add_keyword - –î–æ–±–∞–≤–∏—Ç—å –≤–∞–∂–Ω–æ–µ —Å–ª–æ–≤–æ\n"
            "‚Ä¢ /remove_keyword - –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ\n"
            "‚Ä¢ /keywords - –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Å–ª–æ–≤\n\n"
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
            "‚Ä¢ /threshold - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ä–æ–≥ –≤–∞–∂–Ω–æ—Å—Ç–∏ (0.0-1.0)\n"
            "‚Ä¢ /clear_data - –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ\n\n"
            "üí° <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n"
            "1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ —á–∞—Ç—ã/–∫–∞–Ω–∞–ª—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n"
            "2. –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞/–∫–∞–Ω–∞–ª–∞ –±–æ—Ç—É\n"
            "3. –û—Ç–≤–µ—Ç—å—Ç–µ /monitor –Ω–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "4. –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"
        )
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(help_text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)
    
    elif data == "menu_settings":
        keywords = ", ".join(user.keywords) if user.keywords else "–ù–µ —É–∫–∞–∑–∞–Ω—ã"
        exclude_keywords = ", ".join(user.exclude_keywords) if user.exclude_keywords else "–ù–µ —É–∫–∞–∑–∞–Ω—ã"
        
        settings_text = (
            f"‚öôÔ∏è <b>–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n\n"
            f"üìä <b>–û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>\n"
            f"‚Ä¢ –ü–æ—Ä–æ–≥ –≤–∞–∂–Ω–æ—Å—Ç–∏: {user.importance_threshold}\n"
            f"‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—Å—è —á–∞—Ç–æ–≤: {len(user.monitored_chats)}\n"
            f"‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—Å—è –∫–∞–Ω–∞–ª–æ–≤: {len(user.monitored_channels)}\n\n"
            f"üîë <b>–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:</b>\n"
            f"‚Ä¢ –í–∞–∂–Ω—ã–µ —Å–ª–æ–≤–∞: {keywords}\n"
            f"‚Ä¢ –ò—Å–∫–ª—é—á–∞–µ–º—ã–µ —Å–ª–æ–≤–∞: {exclude_keywords}\n\n"
            f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"
        )
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu_main")],
            [InlineKeyboardButton("üìä –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä–æ–≥ –≤–∞–∂–Ω–æ—Å—Ç–∏", callback_data="menu_threshold")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(settings_text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)
    
    elif data == "menu_monitoring":
        if not user.monitored_chats and not user.monitored_channels:
            monitoring_text = "‚ùå –í—ã –Ω–µ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç–µ –Ω–∏ –æ–¥–∏–Ω —á–∞—Ç –∏–ª–∏ –∫–∞–Ω–∞–ª."
        else:
            monitoring_text = "üìã <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–º—ã–µ —á–∞—Ç—ã –∏ –∫–∞–Ω–∞–ª—ã:</b>\n\n"
            if user.monitored_chats:
                monitoring_text += "üí¨ <b>–ß–∞—Ç—ã:</b>\n"
                for chat_id in user.monitored_chats:
                    monitoring_text += f"‚Ä¢ {chat_id}\n"
                monitoring_text += "\n"
            if user.monitored_channels:
                monitoring_text += "üì¢ <b>–ö–∞–Ω–∞–ª—ã:</b>\n"
                for channel_id in user.monitored_channels:
                    monitoring_text += f"‚Ä¢ {channel_id}\n"
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu_main")],
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç/–∫–∞–Ω–∞–ª", callback_data="menu_add_monitoring")],
            [InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å —á–∞—Ç/–∫–∞–Ω–∞–ª", callback_data="menu_remove_monitoring")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(monitoring_text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)
    
    elif data == "menu_keywords":
        if not user.keywords:
            keywords_text = "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤."
        else:
            keywords_text = "üîë <b>–í–∞—à–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:</b>\n\n" + "\n".join(f"‚Ä¢ {keyword}" for keyword in user.keywords)
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu_main")],
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ", callback_data="menu_add_keyword")],
            [InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ", callback_data="menu_remove_keyword")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(keywords_text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)
    
    elif data == "menu_setup":
        if user.monitored_chats or user.monitored_channels or user.keywords:
            setup_text = (
                "‚ö†Ô∏è <b>–ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞</b>\n\n"
                "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —á–∞—Ç—ã, –∫–∞–Ω–∞–ª—ã –∏–ª–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—á–∏—Å—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π."
            )
        else:
            setup_text = (
                "üöÄ <b>–ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞</b>\n\n"
                "–î–∞–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–º –±–æ—Ç–∞ –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤:\n\n"
                "üìã <b>–®–∞–≥ 1: –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ —á–∞—Ç—ã/–∫–∞–Ω–∞–ª—ã</b>\n"
                "–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ —á–∞—Ç—ã –∏ –∫–∞–Ω–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å.\n\n"
                "üìã <b>–®–∞–≥ 2: –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n"
                "–ü–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞/–∫–∞–Ω–∞–ª–∞ –±–æ—Ç—É.\n\n"
                "üìã <b>–®–∞–≥ 3: –û—Ç–≤–µ—Ç—å—Ç–µ /monitor</b>\n"
                "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /monitor.\n\n"
                "üìã <b>–®–∞–≥ 4: –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞</b>\n"
                "–î–æ–±–∞–≤—å—Ç–µ –≤–∞–∂–Ω—ã–µ —Å–ª–æ–≤–∞: /add_keyword <—Å–ª–æ–≤–æ>\n\n"
                "üìã <b>–®–∞–≥ 5: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–æ—Ä–æ–≥ –≤–∞–∂–Ω–æ—Å—Ç–∏</b>\n"
                "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: /threshold 0.7\n\n"
                "üí° <b>–ì–æ—Ç–æ–≤–æ!</b> –ë–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–≤–µ–¥–æ–º–ª—è—Ç—å –≤–∞—Å –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö."
            )
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(setup_text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)
    
    elif data == "menu_tips":
        tips_text = (
            "üí° <b>–ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>\n\n"
            "üîë <b>–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:</b>\n"
            "‚Ä¢ –î–æ–±–∞–≤–ª—è–π—Ç–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–∂–Ω—ã –¥–ª—è –≤–∞—Å\n"
            "‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã: —Å—Ä–æ—á–Ω–æ, –¥–µ–¥–ª–∞–π–Ω, –≤—Å—Ç—Ä–µ—á–∞, –æ—Ç—á–µ—Ç\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_keyword –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è\n\n"
            "üìä <b>–ü–æ—Ä–æ–≥ –≤–∞–∂–Ω–æ—Å—Ç–∏:</b>\n"
            "‚Ä¢ 0.3-0.5: –¢–æ–ª—å–∫–æ –æ—á–µ–Ω—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
            "‚Ä¢ 0.5-0.7: –í–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)\n"
            "‚Ä¢ 0.7-0.9: –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
            "üì± <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:</b>\n"
            "‚Ä¢ –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç/–∫–∞–Ω–∞–ª\n"
            "‚Ä¢ –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—Ç—å—Ç–µ /monitor\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /list –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞\n\n"
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
            "‚Ä¢ /settings - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫\n"
            "‚Ä¢ /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n"
            "‚Ä¢ /clear_data - –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö\n\n"
            "üÜò <b>–ü–æ–º–æ—â—å:</b>\n"
            "‚Ä¢ /help - –ø–æ–ª–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞\n"
            "‚Ä¢ /setup - –±—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞"
        )
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(tips_text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)
    
    elif data == "menu_stats":
        all_users = Storage.get_all_users()
        total_users = len(all_users)
        total_monitored_chats = sum(len(u.monitored_chats) for u in all_users.values())
        total_monitored_channels = sum(len(u.monitored_channels) for u in all_users.values())
        
        stats_text = (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b>\n\n"
            f"üë§ <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—Å—è —á–∞—Ç–æ–≤: {len(user.monitored_chats)}\n"
            f"‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—Å—è –∫–∞–Ω–∞–ª–æ–≤: {len(user.monitored_channels)}\n"
            f"‚Ä¢ –ö–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {len(user.keywords)}\n"
            f"‚Ä¢ –ü–æ—Ä–æ–≥ –≤–∞–∂–Ω–æ—Å—Ç–∏: {user.importance_threshold}\n\n"
            f"üåê <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—Å—è —á–∞—Ç–æ–≤: {total_monitored_chats}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—Å—è –∫–∞–Ω–∞–ª–æ–≤: {total_monitored_channels}"
        )
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(stats_text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)
    
    elif data == "menu_clear_data":
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ", callback_data="clear_data_confirm"),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="menu_main")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "‚ö†Ô∏è <b>–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ?\n"
            "–≠—Ç–æ —É–¥–∞–ª–∏—Ç –≤—Å–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–º—ã–µ —á–∞—Ç—ã, –∫–∞–Ω–∞–ª—ã –∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞.\n"
            "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
    
    elif data == "menu_main":
        # Return to main menu
        keyboard = [
            [
                InlineKeyboardButton("üìã –°–ø—Ä–∞–≤–∫–∞", callback_data="menu_help"),
                InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="menu_settings")
            ],
            [
                InlineKeyboardButton("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", callback_data="menu_monitoring"),
                InlineKeyboardButton("üîë –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞", callback_data="menu_keywords")
            ],
            [
                InlineKeyboardButton("üöÄ –ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞", callback_data="menu_setup"),
                InlineKeyboardButton("üí° –°–æ–≤–µ—Ç—ã", callback_data="menu_tips")
            ],
            [
                InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="menu_stats"),
                InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="menu_clear_data")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üéõÔ∏è <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
    
    # Existing handlers
    elif data == "clear_data_confirm":
        # Clear all user data
        user.monitored_chats = set()
        user.monitored_channels = set()
        user.keywords = []
        user.importance_threshold = DEFAULT_IMPORTANCE_THRESHOLD
        Storage.update_user(user)
        await query.edit_message_text("‚úÖ –í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã.")
    
    elif data == "clear_data_cancel":
        await query.edit_message_text("‚ùå –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    
    elif data.startswith("unmonitor_chat_"):
        item_id = int(data.split("_")[2])
        if item_id in user.monitored_chats:
            user.monitored_chats.remove(item_id)
            Storage.update_user(user)
            await query.edit_message_text(f"‚úÖ –£–¥–∞–ª–µ–Ω –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —á–∞—Ç {item_id}")
        else:
            await query.edit_message_text(f"‚ùå –ß–∞—Ç {item_id} –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ.")
    
    elif data.startswith("unmonitor_channel_"):
        item_id = int(data.split("_")[2])
        if item_id in user.monitored_channels:
            user.monitored_channels.remove(item_id)
            Storage.update_user(user)
            await query.edit_message_text(f"‚úÖ –£–¥–∞–ª–µ–Ω –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª {item_id}")
        else:
            await query.edit_message_text(f"‚ùå –ö–∞–Ω–∞–ª {item_id} –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ.")

    elif data == "menu_remove_monitoring":
        # Create keyboard with monitored chats/channels
        keyboard = []
        
        # Add chat buttons
        for chat_id in user.monitored_chats:
            keyboard.append([InlineKeyboardButton(f"üí¨ –ß–∞—Ç: {chat_id}", callback_data=f"unmonitor_chat_{chat_id}")])
        
        # Add channel buttons
        for channel_id in user.monitored_channels:
            keyboard.append([InlineKeyboardButton(f"üì¢ –ö–∞–Ω–∞–ª: {channel_id}", callback_data=f"unmonitor_channel_{channel_id}")])
        
        if not keyboard:
            await query.edit_message_text("‚ùå –í—ã –Ω–µ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç–µ –Ω–∏ –æ–¥–∏–Ω —á–∞—Ç –∏–ª–∏ –∫–∞–Ω–∞–ª.")
            return
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_monitoring")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –∏–ª–∏ –∫–∞–Ω–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:",
            reply_markup=reply_markup
        )
    
    elif data == "menu_add_monitoring":
        await query.edit_message_text(
            "üìã <b>–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å —á–∞—Ç/–∫–∞–Ω–∞–ª –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:</b>\n\n"
            "üîß <b>–°–ø–æ—Å–æ–± 1 (–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π):</b>\n"
            "1Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ —á–∞—Ç –∏–ª–∏ –∫–∞–Ω–∞–ª\n"
            "2Ô∏è‚É£ –ü–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —ç—Ç–æ–≥–æ —á–∞—Ç–∞/–∫–∞–Ω–∞–ª–∞ –±–æ—Ç—É\n"
            "3Ô∏è‚É£ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –¥–æ–±–∞–≤–∏—Ç—å –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n\n"
            "üîß <b>–°–ø–æ—Å–æ–± 2 (–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π):</b>\n"
            "1Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ —á–∞—Ç –∏–ª–∏ –∫–∞–Ω–∞–ª\n"
            "2Ô∏è‚É£ –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É\n"
            "3Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /monitor –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
            "üí° <b>–í–∞–∂–Ω–æ:</b>\n"
            "‚Ä¢ –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç/–∫–∞–Ω–∞–ª\n"
            "‚Ä¢ –î–ª—è –∫–∞–Ω–∞–ª–æ–≤ –±–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n"
            "‚Ä¢ –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç –±—É–¥–µ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n"
            "‚úÖ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω—É–∂–Ω–æ–≥–æ —á–∞—Ç–∞/–∫–∞–Ω–∞–ª–∞ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_monitoring")]]),
            parse_mode=ParseMode.HTML
        )
    
    elif data == "menu_add_keyword":
        await query.edit_message_text(
            "üîë <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞:</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /add_keyword <—Å–ª–æ–≤–æ>\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ /add_keyword —Å—Ä–æ—á–Ω–æ\n"
            "‚Ä¢ /add_keyword –≤–∞–∂–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞\n"
            "‚Ä¢ /add_keyword –¥–µ–¥–ª–∞–π–Ω\n\n"
            "üí° –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –ø–æ–º–æ–≥–∞—é—Ç –±–æ—Ç—É –ª—É—á—à–µ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_keywords")]]),
            parse_mode=ParseMode.HTML
        )
    
    elif data == "menu_remove_keyword":
        if not user.keywords:
            await query.edit_message_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_keywords")]])
            )
            return
        
        # Create keyboard with keywords
        keyboard = []
        for keyword in user.keywords:
            keyboard.append([InlineKeyboardButton(f"üóëÔ∏è {keyword}", callback_data=f"remove_keyword_{keyword}")])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_keywords")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=reply_markup
        )
    
    elif data == "menu_threshold":
        await query.edit_message_text(
            f"üìä <b>–ü–æ—Ä–æ–≥ –≤–∞–∂–Ω–æ—Å—Ç–∏:</b>\n\n"
            f"–¢–µ–∫—É—â–∏–π –ø–æ—Ä–æ–≥: <b>{user.importance_threshold}</b>\n\n"
            f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /threshold <0.0-1.0>\n\n"
            f"üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
            f"‚Ä¢ 0.3-0.5 - –¢–æ–ª—å–∫–æ –æ—á–µ–Ω—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
            f"‚Ä¢ 0.5-0.7 - –í–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)\n"
            f"‚Ä¢ 0.7-0.9 - –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
            f"–ü—Ä–∏–º–µ—Ä—ã:\n"
            f"‚Ä¢ /threshold 0.5\n"
            f"‚Ä¢ /threshold 0.8",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_settings")]]),
            parse_mode=ParseMode.HTML
        )
    
    elif data.startswith("remove_keyword_"):
        keyword = data.replace("remove_keyword_", "")
        if keyword in user.keywords:
            user.keywords.remove(keyword)
            Storage.update_user(user)
            await query.edit_message_text(
                f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: <b>{keyword}</b>",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_keywords")]]),
                parse_mode=ParseMode.HTML
            )
        else:
            await query.edit_message_text(
                f"‚ùå –°–ª–æ–≤–æ '<b>{keyword}</b>' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_keywords")]]),
                parse_mode=ParseMode.HTML
            )
    
    elif data.startswith("add_monitoring_"):
        # Parse the callback data: add_monitoring_{chat_id}_{type}
        parts = data.split("_")
        if len(parts) >= 4:
            chat_id = int(parts[2])
            chat_type = parts[3]
            
            if chat_type == "channel":
                user.monitored_channels.add(chat_id)
                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –∫–∞–Ω–∞–ª {chat_id} –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            else:
                user.monitored_chats.add(chat_id)
                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω —á–∞—Ç {chat_id} –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            Storage.update_user(user)
            await query.edit_message_text(
                f"‚úÖ <b>–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥!</b>\n\n"
                f"–¢–µ–ø–µ—Ä—å –±–æ—Ç –±—É–¥–µ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —ç—Ç–æ–≥–æ {'–∫–∞–Ω–∞–ª–∞' if chat_type == 'channel' else '—á–∞—Ç–∞'} "
                f"–∏ —É–≤–µ–¥–æ–º–ª—è—Ç—å –≤–∞—Å –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.\n\n"
                f"üìä –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu ‚Üí –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–º.",
                parse_mode=ParseMode.HTML
            )
        else:
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_monitoring")]])
            )
    
    elif data == "dont_add_monitoring":
        await query.edit_message_text(
            "‚ùå –ö–∞–Ω–∞–ª/—á–∞—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥.\n\n"
            "üí° –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –ø–æ–∑–∂–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é –∏–ª–∏ –ø–µ—Ä–µ—Å–ª–∞–≤ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_monitoring")]])
        )
    
    elif data == "menu_userbot":
        if not USERBOT_ENABLED:
            await query.edit_message_text(
                "‚ùå <b>Userbot —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∞</b>\n\n"
                "–î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è userbot —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:\n"
                "‚Ä¢ TELEGRAM_API_ID\n"
                "‚Ä¢ TELEGRAM_API_HASH\n"
                "‚Ä¢ TELEGRAM_PHONE\n"
                "‚Ä¢ USERBOT_ENABLED=true",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu_main")]]),
                parse_mode=ParseMode.HTML
            )
            return
        
        userbot = get_userbot()
        
        status_text = "ü§ñ <b>Userbot - –°–∫—Ä—ã—Ç—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥</b>\n\n"
        
        if userbot.is_running:
            status_text += "‚úÖ <b>–°—Ç–∞—Ç—É—Å:</b> –ê–∫—Ç–∏–≤–µ–Ω\n"
            monitored = userbot.get_monitored_sources()
            status_text += f"üìä <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—Å—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:</b> {len(monitored)}\n"
            if monitored:
                status_text += f"üîç <b>ID –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:</b> {', '.join(map(str, monitored))}\n"
        else:
            status_text += "‚ùå <b>–°—Ç–∞—Ç—É—Å:</b> –ù–µ–∞–∫—Ç–∏–≤–µ–Ω\n"
        
        status_text += (
            f"\nüí° <b>–ß—Ç–æ —Ç–∞–∫–æ–µ Userbot:</b>\n"
            f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ñ–µ–π–∫–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç Telegram\n"
            f"‚Ä¢ –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã –∏ —á–∞—Ç—ã\n"
            f"‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n"
            f"‚Ä¢ –ü–æ–ª–Ω–∞—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å –∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å\n"
            f"‚Ä¢ –ù–µ —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
            f"üîß <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            f"‚Ä¢ /userbot_start - –ó–∞–ø—É—Å—Ç–∏—Ç—å userbot\n"
            f"‚Ä¢ /userbot_join <—Å—Å—ã–ª–∫–∞> - –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–∞–Ω–∞–ª—É\n"
            f"‚Ä¢ /userbot_status - –ü–æ–¥—Ä–æ–±–Ω—ã–π —Å—Ç–∞—Ç—É—Å"
        )
        
        keyboard = [
            [InlineKeyboardButton("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å Userbot", callback_data="userbot_start")],
            [InlineKeyboardButton("üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Userbot", callback_data="userbot_stop")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="userbot_status")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(status_text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)
    
    elif data == "userbot_start":
        if not USERBOT_ENABLED:
            await query.edit_message_text("‚ùå Userbot —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
            return
        
        userbot = get_userbot()
        
        if userbot.is_running:
            await query.edit_message_text(
                "‚úÖ Userbot —É–∂–µ –∑–∞–ø—É—â–µ–Ω!",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_userbot")]])
            )
            return
        
        await query.edit_message_text("üöÄ –ó–∞–ø—É—Å–∫–∞—é userbot...")
        
        success = await start_userbot()
        
        if success:
            await query.edit_message_text(
                "‚úÖ <b>Userbot —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!</b>\n\n"
                "ü§ñ –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "‚Ä¢ /userbot_join <—Å—Å—ã–ª–∫–∞> - –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–∞–Ω–∞–ª—É\n"
                "‚Ä¢ /userbot_status - –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç—É—Å–∞",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_userbot")]]),
                parse_mode=ParseMode.HTML
            )
        else:
            await query.edit_message_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ userbot</b>\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ª–æ–≥–∏.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_userbot")]]),
                parse_mode=ParseMode.HTML
            )
    
    elif data == "userbot_stop":
        if not USERBOT_ENABLED:
            await query.edit_message_text("‚ùå Userbot —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
            return
        
        userbot = get_userbot()
        
        if not userbot.is_running:
            await query.edit_message_text(
                "‚ùå Userbot –Ω–µ –∑–∞–ø—É—â–µ–Ω.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_userbot")]])
            )
            return
        
        await query.edit_message_text("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é userbot...")
        await stop_userbot()
        await query.edit_message_text(
            "‚úÖ Userbot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_userbot")]])
        )
    
    elif data == "userbot_status":
        if not USERBOT_ENABLED:
            await query.edit_message_text("‚ùå Userbot —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
            return
        
        userbot = get_userbot()
        user_id = update.effective_user.id
        user = Storage.get_user(user_id)
        
        status_text = "üìä <b>–ü–æ–¥—Ä–æ–±–Ω—ã–π —Å—Ç–∞—Ç—É—Å Userbot</b>\n\n"
        
        # Userbot status
        if userbot.is_running:
            status_text += "‚úÖ <b>Userbot:</b> –ê–∫—Ç–∏–≤–µ–Ω\n"
            try:
                if userbot.app:
                    me = await userbot.app.get_me()
                    status_text += f"üë§ <b>–ê–∫–∫–∞—É–Ω—Ç:</b> {me.first_name} (@{me.username or '–±–µ–∑_username'})\n"
            except:
                status_text += "üë§ <b>–ê–∫–∫–∞—É–Ω—Ç:</b> –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n"
        else:
            status_text += "‚ùå <b>Userbot:</b> –ù–µ–∞–∫—Ç–∏–≤–µ–Ω\n"
        
        # Monitoring sources
        monitored_userbot = userbot.get_monitored_sources()
        status_text += f"\nüìä <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–µ—Ä–µ–∑ userbot:</b>\n"
        status_text += f"‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(monitored_userbot)}\n"
        if monitored_userbot:
            status_text += f"‚Ä¢ ID: {', '.join(map(str, monitored_userbot))}\n"
        
        # User monitoring (passive + active)
        status_text += f"\nüìã <b>–í–∞—à –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:</b>\n"
        status_text += f"‚Ä¢ –ß–∞—Ç–æ–≤: {len(user.monitored_chats)}\n"
        status_text += f"‚Ä¢ –ö–∞–Ω–∞–ª–æ–≤: {len(user.monitored_channels)}\n"
        status_text += f"‚Ä¢ –ü–æ—Ä–æ–≥ –≤–∞–∂–Ω–æ—Å—Ç–∏: {user.importance_threshold}\n"
        status_text += f"‚Ä¢ –ö–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {len(user.keywords)}\n"
        
        await query.edit_message_text(
            status_text,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="menu_userbot")]]),
            parse_mode=ParseMode.HTML
        )

async def handle_message(update: Update, context: CallbackContext) -> None:
    """Handle incoming messages."""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {update.message.text[:50] if update.message.text else '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞'}")
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ: {hasattr(update.message, 'forward_origin')}")
    logger.info(f"–¢–∏–ø —á–∞—Ç–∞: {update.message.chat.type if update.message.chat else '–ù–µ—Ç —á–∞—Ç–∞'}")
    logger.info(f"ID —á–∞—Ç–∞: {update.message.chat.id if update.message.chat else '–ù–µ—Ç ID'}")
    
    # –ü–æ–¥—Ä–æ–±–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if hasattr(update.message, 'forward_origin'):
        logger.info(f"forward_origin: {update.message.forward_origin}")
        if update.message.forward_origin and hasattr(update.message.forward_origin, 'chat'):
            chat = update.message.forward_origin.chat
            logger.info(f"–ü–µ—Ä–µ—Å–ª–∞–Ω–æ –∏–∑ —á–∞—Ç–∞: {chat.title} (ID: {chat.id}, —Ç–∏–ø: {chat.type})")
    else:
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–º–µ–µ—Ç –∞—Ç—Ä–∏–±—É—Ç–∞ forward_origin")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∞—Ç—Ä–∏–±—É—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏—è
    logger.info(f"–ê—Ç—Ä–∏–±—É—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏—è: {[attr for attr in dir(update.message) if not attr.startswith('_')]}")
    
    # Handle forwarded messages (PASSIVE MONITORING - no admin rights needed)
    if update.message and hasattr(update.message, 'forward_origin') and update.message.forward_origin:
        user_id = update.effective_user.id
        user = Storage.get_user(user_id)
        
        # Handle different types of forward origins
        chat_id = None
        chat_title = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫"
        is_channel = False
        
        # Check if forwarded from a chat/channel
        if hasattr(update.message.forward_origin, 'chat') and update.message.forward_origin.chat:
            chat = update.message.forward_origin.chat
            chat_id = chat.id
            chat_title = chat.title or f"–ß–∞—Ç {chat_id}"
            is_channel = chat.type == "channel"
        # Check if forwarded from a user (private chat)
        elif hasattr(update.message.forward_origin, 'sender_user') and update.message.forward_origin.sender_user:
            sender = update.message.forward_origin.sender_user
            chat_id = sender.id
            chat_title = f"–õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {sender.full_name}"
            is_channel = False
        # Check if forwarded from hidden user
        elif hasattr(update.message.forward_origin, 'sender_user_name'):
            chat_title = f"–ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ –æ—Ç {update.message.forward_origin.sender_user_name}"
            chat_id = hash(update.message.forward_origin.sender_user_name)  # Create pseudo-ID
            is_channel = False
        
        if chat_id:
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ {chat_title} (ID: {chat_id}, —Ç–∏–ø: {'–∫–∞–Ω–∞–ª' if is_channel else '—á–∞—Ç'})")
            
            # Check if the message is replying to a command
            if update.message.reply_to_message and update.message.reply_to_message.text:
                command_text = update.message.reply_to_message.text.split()[0]
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –∫–æ–º–∞–Ω–¥—É: {command_text}")
                
                if command_text == "/monitor" or command_text == "/passive_monitor":
                    # Add the chat/channel to the monitored list for PASSIVE monitoring
                    if is_channel:
                        user.monitored_channels.add(chat_id)
                        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –∫–∞–Ω–∞–ª {chat_id} –≤ –ø–∞—Å—Å–∏–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    else:
                        user.monitored_chats.add(chat_id)
                        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω —á–∞—Ç {chat_id} –≤ –ø–∞—Å—Å–∏–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    
                    Storage.update_user(user)
                    await update.message.reply_text(
                        f"‚úÖ <b>–ü–∞—Å—Å–∏–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–∫–ª—é—á–µ–Ω</b>\n\n"
                        f"üìä –ò—Å—Ç–æ—á–Ω–∏–∫: {chat_title} ({chat_id})\n"
                        f"üîç –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —ç—Ç–æ–≥–æ {'–∫–∞–Ω–∞–ª–∞' if is_channel else '—á–∞—Ç–∞'} "
                        f"–¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏.\n\n"
                        f"üí° <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>\n"
                        f"‚Ä¢ –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Å—ã–ª–∞–π—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç—É\n"
                        f"‚Ä¢ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Ö –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç\n"
                        f"‚Ä¢ –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∞–∂–Ω–æ–µ - –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n\n"
                        f"‚ö†Ô∏è <b>–ü–∞—Å—Å–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º:</b> –ë–æ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ –≤–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è, "
                        f"–Ω–µ —Ç—Ä–µ–±—É—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —á–∞—Ç/–∫–∞–Ω–∞–ª.",
                        parse_mode=ParseMode.HTML
                    )
                    return
            
            # Check if this source is already being monitored (passive or active)
            is_already_monitored = False
            monitoring_type = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            if is_channel:
                is_already_monitored = chat_id in user.monitored_channels
                monitoring_type = "–∫–∞–Ω–∞–ª"
            else:
                is_already_monitored = chat_id in user.monitored_chats
                monitoring_type = "—á–∞—Ç"
            
            # Always analyze forwarded messages from monitored sources
            if is_already_monitored:
                # Process the message to analyze its importance
                message = Message(
                    message_id=update.message.message_id,
                    chat_id=chat_id,
                    chat_title=chat_title,
                    text=update.message.text or update.message.caption or "",
                    date=datetime.now(),
                    is_channel=is_channel
                )
                
                # Extract sender info if available
                if hasattr(update.message.forward_origin, 'sender_user') and update.message.forward_origin.sender_user:
                    message.sender_id = update.message.forward_origin.sender_user.id
                    message.sender_name = update.message.forward_origin.sender_user.full_name
                elif hasattr(update.message.forward_origin, 'sender_user_name'):
                    message.sender_name = update.message.forward_origin.sender_user_name
                
                logger.info(f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text[:50]}...")
                
                # Analyze message importance
                importance_score = await evaluate_message_importance(message, user)
                message.importance_score = importance_score
                
                logger.info(f"–û—Ü–µ–Ω–∫–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏: {importance_score:.2f}, –ø–æ—Ä–æ–≥: {user.importance_threshold}")
                
                # Check if the message is important enough to notify the user
                if importance_score >= user.importance_threshold:
                    await update.message.reply_text(
                        f"üîî <b>–í–ê–ñ–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï –û–ë–ù–ê–†–£–ñ–ï–ù–û</b>\n\n"
                        f"{message.to_user_notification()}\n\n"
                        f"üìã <i>–ò—Å—Ç–æ—á–Ω–∏–∫: –ü–∞—Å—Å–∏–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (–ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)</i>",
                        parse_mode=ParseMode.HTML
                    )
                else:
                    await update.message.reply_text(
                        f"üìä <b>–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω</b>\n\n"
                        f"–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ {chat_title} –∏–º–µ–µ—Ç –æ—Ü–µ–Ω–∫—É –≤–∞–∂–Ω–æ—Å—Ç–∏ <b>{importance_score:.2f}</b>, "
                        f"—á—Ç–æ –Ω–∏–∂–µ –≤–∞—à–µ–≥–æ –ø–æ—Ä–æ–≥–∞ <b>{user.importance_threshold}</b>.\n\n"
                        f"üí° –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä–æ–≥ –≤–∞–∂–Ω–æ—Å—Ç–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö (/threshold).",
                        parse_mode=ParseMode.HTML
                    )
                return
            
            # Offer to add to passive monitoring
            keyboard = [
                [InlineKeyboardButton("‚úÖ –í–∫–ª—é—á–∏—Ç—å –ø–∞—Å—Å–∏–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", callback_data=f"add_passive_monitoring_{chat_id}_{'channel' if is_channel else 'chat'}")],
                [InlineKeyboardButton("üîç –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"analyze_once_{chat_id}_{'channel' if is_channel else 'chat'}")],
                [InlineKeyboardButton("‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_monitoring")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"üîç <b>–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫:</b> {chat_title}\n\n"
                f"üìä <b>–í–∞—Ä–∏–∞–Ω—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π:</b>\n\n"
                f"üü¢ <b>–ü–∞—Å—Å–∏–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥</b>\n"
                f"‚Ä¢ –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n"
                f"‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö\n"
                f"‚Ä¢ –ù–µ —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
                f"üîç <b>–†–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑</b>\n"
                f"‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ç–æ–ª—å–∫–æ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
                f"‚Ä¢ –ë–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n\n"
                f"üí° <b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ:</b> –†–∞–±–æ—Ç–∞–µ—Ç —Å –ª—é–±—ã–º–∏ —á–∞—Ç–∞–º–∏ –∏ –∫–∞–Ω–∞–ª–∞–º–∏, "
                f"–¥–∞–∂–µ –∑–∞–∫—Ä—ã—Ç—ã–º–∏, –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞!",
                parse_mode=ParseMode.HTML,
                reply_markup=reply_markup
            )
            return
    
    # Handle direct messages from channels/groups (ACTIVE MONITORING - when bot is added)
    elif update.message and update.message.chat and update.message.chat.type in ["channel", "group", "supergroup"]:
        chat_id = update.message.chat.id
        chat_title = update.message.chat.title or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Ç"
        is_channel = update.message.chat.type == "channel"
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –ø—Ä—è–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ {'–∫–∞–Ω–∞–ª–∞' if is_channel else '—á–∞—Ç–∞'}: {chat_title} (ID: {chat_id})")
        
        # Check if this chat/channel is being monitored by any user
        if is_channel:
            monitored_users = Storage.get_users_monitoring_channel(chat_id)
        else:
            monitored_users = Storage.get_users_monitoring_chat(chat_id)
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –º–æ–Ω–∏—Ç–æ—Ä—è—â–∏–µ {'–∫–∞–Ω–∞–ª' if is_channel else '—á–∞—Ç'} {chat_id}: {len(monitored_users)}")
        
        if not monitored_users:
            logger.info(f"–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –º–æ–Ω–∏—Ç–æ—Ä—è—â–∏—Ö {'–∫–∞–Ω–∞–ª' if is_channel else '—á–∞—Ç'} {chat_id}")
            return
        
        # Create message object
        message = Message(
            message_id=update.message.message_id,
            chat_id=chat_id,
            chat_title=chat_title,
            text=update.message.text or update.message.caption or "",
            date=datetime.now(),
            is_channel=is_channel
        )
        
        if update.message.from_user:
            message.sender_id = update.message.from_user.id
            message.sender_name = update.message.from_user.full_name
        
        logger.info(f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {len(monitored_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {message.text[:50]}...")
        
        # Analyze message for each monitoring user
        for user in monitored_users:
            try:
                importance_score = await evaluate_message_importance(message, user)
                message.importance_score = importance_score
                
                logger.info(f"–û—Ü–µ–Ω–∫–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.user_id}: {importance_score:.2f}, –ø–æ—Ä–æ–≥: {user.importance_threshold}")
                
                # If message is important enough, send notification to user
                if importance_score >= user.importance_threshold:
                    notification_text = (
                        f"üîî <b>–í–ê–ñ–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï</b>\n\n"
                        f"{message.to_user_notification()}\n\n"
                        f"üìã <i>–ò—Å—Ç–æ—á–Ω–∏–∫: –ê–∫—Ç–∏–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (–±–æ—Ç –≤ —á–∞—Ç–µ/–∫–∞–Ω–∞–ª–µ)</i>"
                    )
                    
                    # Send notification to the user
                    await context.bot.send_message(
                        chat_id=user.user_id,
                        text=notification_text,
                        parse_mode=ParseMode.HTML
                    )
                    
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.user_id} "
                              f"–∏–∑ {chat_title} (–æ—Ü–µ–Ω–∫–∞: {importance_score:.2f})")
                else:
                    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–∞–∂–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.user_id} "
                              f"(–æ—Ü–µ–Ω–∫–∞: {importance_score:.2f}, –ø–æ—Ä–æ–≥: {user.importance_threshold})")
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.user_id}: {e}")
    
    # Handle commands in private chat
    elif update.message and update.message.chat and update.message.chat.type == "private":
        # Check if this is a command
        if update.message.text and update.message.text.startswith('/'):
            command = update.message.text.split()[0]
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ: {command}")
            
            # Handle /monitor command specifically
            if command == "/monitor" or command == "/passive_monitor":
                await update.message.reply_text(
                    "üîç <b>–ü–∞—Å—Å–∏–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π</b>\n\n"
                    "üìã <b>–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Å—Å–∏–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:</b>\n\n"
                    "1Ô∏è‚É£ <b>–ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n"
                    "   ‚Ä¢ –ü–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞/–∫–∞–Ω–∞–ª–∞ –±–æ—Ç—É\n\n"
                    "2Ô∏è‚É£ <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ</b>\n"
                    "   ‚Ä¢ –í–∫–ª—é—á–∏—Ç—å –ø–∞—Å—Å–∏–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n"
                    "   ‚Ä¢ –ò–ª–∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–æ–≤–æ\n\n"
                    "3Ô∏è‚É£ <b>–ü–µ—Ä–µ—Å—ã–ª–∞–π—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è</b>\n"
                    "   ‚Ä¢ –ë–æ—Ç –±—É–¥–µ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n"
                    "   ‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö\n\n"
                    "üí° <b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:</b>\n"
                    "‚Ä¢ ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç —Å –ª—é–±—ã–º–∏ —á–∞—Ç–∞–º–∏/–∫–∞–Ω–∞–ª–∞–º–∏\n"
                    "‚Ä¢ ‚úÖ –ù–µ —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
                    "‚Ä¢ ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç —Å –∑–∞–∫—Ä—ã—Ç—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏\n"
                    "‚Ä¢ ‚úÖ –ü–æ–ª–Ω–∞—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å\n\n"
                    "üöÄ <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:</b> –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –ª—é–±–æ–≥–æ —á–∞—Ç–∞ –∏–ª–∏ –∫–∞–Ω–∞–ª–∞!",
                    parse_mode=ParseMode.HTML
                )
                return
    
    else:
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–º –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç forward_origin")



def main() -> None:
    """Start the bot."""
    # Create the Application and pass it your bot's token
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # Add command handlers
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("settings", settings_command))
    application.add_handler(CommandHandler("monitor", monitor_command))
    application.add_handler(CommandHandler("unmonitor", unmonitor_command))
    application.add_handler(CommandHandler("list", list_command))
    application.add_handler(CommandHandler("add_keyword", add_keyword_command))
    application.add_handler(CommandHandler("remove_keyword", remove_keyword_command))
    application.add_handler(CommandHandler("keywords", keywords_command))
    application.add_handler(CommandHandler("threshold", threshold_command))
    application.add_handler(CommandHandler("stats", stats_command))
    application.add_handler(CommandHandler("clear_data", clear_data_command))
    application.add_handler(CommandHandler("setup", setup_command))
    application.add_handler(CommandHandler("tips", tips_command))
    application.add_handler(CommandHandler("debug", debug_command))
    application.add_handler(CommandHandler("menu", menu_command))
    
    # Add userbot command handlers
    if USERBOT_ENABLED:
        application.add_handler(CommandHandler("userbot", userbot_command))
        application.add_handler(CommandHandler("userbot_start", userbot_start_command))
        application.add_handler(CommandHandler("userbot_stop", userbot_stop_command))
        application.add_handler(CommandHandler("userbot_join", userbot_join_command))
        application.add_handler(CommandHandler("userbot_leave", userbot_leave_command))
        application.add_handler(CommandHandler("userbot_status", userbot_status_command))
    
    # Add callback query handler
    application.add_handler(CallbackQueryHandler(callback_handler))
    
    # Add message handlers
    # Handle all messages (forwarded and direct from channels/groups)
    application.add_handler(MessageHandler(filters.ALL, handle_message))
    
    # Make application globally available for userbot
    globals()['application'] = application
    
    # Start the Bot
    application.run_polling()

if __name__ == '__main__':
    main() 