import logging
import asyncio
import html
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, CallbackContext, MessageHandler, CallbackQueryHandler, filters
from telegram.constants import ParseMode

from config import TELEGRAM_TOKEN, DEFAULT_IMPORTANCE_THRESHOLD, USERBOT_ENABLED
from models import Message, Storage, UserPreferences, PostStatus
from ai_service import evaluate_message_importance
from admin_service import AdminService
from utils import setup_logging

# Import userbot functionality
if USERBOT_ENABLED:
    from userbot import get_userbot, start_userbot, stop_userbot

# Setup logging
setup_logging()

# Enable logging
logger = logging.getLogger(__name__)

# ===========================================
# MAIN MENU KEYBOARDS
# ===========================================

def get_main_reply_keyboard(user_id: int) -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å reply –∫–Ω–æ–ø–∫–∞–º–∏"""
    is_admin = Storage.is_admin(user_id)
    
    if is_admin:
        # –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        keyboard = [
            ["üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", "üì¢ –ö–∞–Ω–∞–ª –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"],
            ["üë• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"],
            ["‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞"]
        ]
    else:
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        keyboard = [
            ["üìù –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ—Å—Ç", "üì¢ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫–∞–Ω–∞–ª"],
            ["üì¨ –ö–∞–Ω–∞–ª –≤–∞–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π", "‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞"]
        ]
    
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)





# ===========================================
# ESSENTIAL COMMANDS (–º–∏–Ω–∏–º—É–º)
# ===========================================

async def get_bot_admin_channels(bot):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤, –≥–¥–µ –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    admin_channels = []
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        bot_info = await bot.get_me()
        bot_id = bot_info.id
        
        checked_channels = set()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        all_users = Storage.get_all_users()
        for user in all_users.values():
            for channel_id in user.monitored_channels:
                if channel_id not in checked_channels:
                    checked_channels.add(channel_id)
                    try:
                        chat = await bot.get_chat(channel_id)
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
                        member = await bot.get_chat_member(channel_id, bot_id)
                        if member.status in ['administrator', 'creator']:
                            admin_channels.append({
                                'id': channel_id,
                                'title': chat.title,
                                'username': chat.username
                            })
                    except Exception as e:
                        logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–Ω–∞–ª {channel_id}: {e}")
        
        # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–Ω–∞–ª –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        config = Storage.bot_config
        if config.publish_channel_id and config.publish_channel_id not in checked_channels:
            try:
                chat = await bot.get_chat(config.publish_channel_id)
                member = await bot.get_chat_member(config.publish_channel_id, bot_id)
                if member.status in ['administrator', 'creator']:
                    admin_channels.append({
                        'id': config.publish_channel_id,
                        'title': chat.title,
                        'username': chat.username
                    })
            except Exception as e:
                logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–Ω–∞–ª –∫–æ–Ω—Ñ–∏–≥–∞ {config.publish_channel_id}: {e}")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤: {e}")
    
    return admin_channels

async def start_command(update: Update, context: CallbackContext) -> None:
    """Send a welcome message when the command /start is issued."""
    user_id = update.effective_user.id
    user = Storage.get_user(user_id)
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user.current_state = None
    Storage.update_user(user)
    
    welcome_text = (
        f"ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
        f"–Ø –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≤–∞—à–∏—Ö —á–∞—Ç–æ–≤ –∏ –∫–∞–Ω–∞–ª–æ–≤ —Å –ø–æ–º–æ—â—å—é –ò–ò "
        f"–∏ —É–≤–µ–¥–æ–º–ª—è—é —Ç–æ–ª—å–∫–æ –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.\n\n"
        f"üìä <b>–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
        f"‚Ä¢ –ü–æ—Ä–æ–≥ –≤–∞–∂–Ω–æ—Å—Ç–∏: {Storage.bot_config.importance_threshold} (–≥–ª–æ–±–∞–ª—å–Ω—ã–π)\n"
        f"‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—Å—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(user.monitored_chats) + len(user.monitored_channels)}\n"
        f"‚Ä¢ –ö–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {len(user.keywords)}\n\n"
        f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"
    )
    
    reply_markup = get_main_reply_keyboard(user_id)
    
    await update.message.reply_text(
        welcome_text, 
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )

async def menu_command(update: Update, context: CallbackContext) -> None:
    """Show main menu."""
    user_id = update.effective_user.id
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = Storage.get_user(user_id)
    user.current_state = None
    Storage.update_user(user)
    
    reply_markup = get_main_reply_keyboard(user_id)
    
    await update.message.reply_text(
        "üéõÔ∏è <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )

async def admin_command(update: Update, context: CallbackContext) -> None:
    """Quick admin access."""
    user_id = update.effective_user.id
    
    if not Storage.is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    reply_markup = get_main_reply_keyboard(user_id)
    
    config = Storage.bot_config
    pending_posts = len(Storage.get_pending_posts(PostStatus.PENDING))
    
    admin_text = (
        f"üîß <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {len(config.admin_ids)}\n"
        f"‚Ä¢ –ü–æ—Å—Ç–æ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {pending_posts}\n"
        f"‚Ä¢ –ö–∞–Ω–∞–ª –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {config.publish_channel_username or '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}\n"
        f"‚Ä¢ –ê–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏—è: {'–í–∫–ª—é—á–µ–Ω–∞' if config.auto_publish_enabled else '–û—Ç–∫–ª—é—á–µ–Ω–∞'}\n"
        f"‚Ä¢ –¢—Ä–µ–±—É–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è: {'–î–∞' if config.require_admin_approval else '–ù–µ—Ç'}\n\n"
        f"üéõÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
    )
    
    await update.message.reply_text(
        admin_text, 
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )

async def submit_post_command(update: Update, context: CallbackContext) -> None:
    """Submit a post for review - keep for compatibility."""
    user_id = update.effective_user.id
    message_text = ""
    source_info = None
    
    # Check if this is a reply to a forwarded message
    if update.message.reply_to_message:
        if update.message.reply_to_message.text:
            message_text = update.message.reply_to_message.text
            source_info = "–ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
            
            # Try to get source info from forward_origin
            if hasattr(update.message.reply_to_message, 'forward_origin') and update.message.reply_to_message.forward_origin:
                if hasattr(update.message.reply_to_message.forward_origin, 'chat'):
                    source_chat = update.message.reply_to_message.forward_origin.chat
                    source_info = f"–ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ –∏–∑: {html.escape(source_chat.title or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Ç')}"
        else:
            await update.message.reply_text("‚ùå –ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞.")
            return
    elif context.args:
        message_text = " ".join(context.args)
    else:
        # Show submit interface
        await show_submit_post_interface(update, context)
        return
    
    if not message_text.strip():
        await update.message.reply_text("‚ùå –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return
    
    try:
        post_id = await AdminService.submit_post_for_review(user_id, message_text, source_info)
        
        # Notify admins
        post = Storage.get_pending_post(post_id)
        if post:
            await AdminService.notify_admins_about_new_post(context.bot, post)
        
        await update.message.reply_text(
            f"‚úÖ <b>–ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!</b>\n\n"
            f"üìã <b>ID –ø–æ—Å—Ç–∞:</b> {post_id}\n"
            f"‚è≥ <b>–°—Ç–∞—Ç—É—Å:</b> –û–∂–∏–¥–∞–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è\n\n"
            f"üí° –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –º–æ–¥–µ—Ä–∞—Ü–∏–∏.",
            parse_mode=ParseMode.HTML
        )
        
    except PermissionError as e:
        await update.message.reply_text(f"‚ùå {html.escape(str(e))}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–∞: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–∞.")

# ===========================================
# REPLY BUTTON HANDLERS
# ===========================================

async def handle_reply_buttons(update: Update, context: CallbackContext) -> bool:
    """Handle reply button presses. Returns True if button was handled."""
    user_id = update.effective_user.id
    user = Storage.get_user(user_id)
    text = update.message.text
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –ª—é–±–æ–π –∫–Ω–æ–ø–∫–∏
    if user.current_state:
        user.current_state = None
        Storage.update_user(user)
    
    # Main menu buttons
    if text == "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥":
        if Storage.is_admin(user_id):
            await show_monitoring_interface(update, context, user)
        else:
            await update.message.reply_text("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return True
    
    elif text == "üìù –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ—Å—Ç":
        await show_submit_post_interface(update, context)
        return True
    
    elif text == "üì¢ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫–∞–Ω–∞–ª":
        context.user_data['awaiting_channel_suggestion'] = True
        await update.message.reply_text(
            "üì¢ <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>\n\n"
            "üí° <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ:</b>\n"
            "‚Ä¢ Username –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: @my_channel)\n"
            "‚Ä¢ –°—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: https://t.me/my_channel)\n"
            "‚Ä¢ ID –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: -1001234567890)\n\n"
            "üîß <b>–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.</b>",
            parse_mode=ParseMode.HTML
        )
        return True
    
    elif text == "üì¨ –ö–∞–Ω–∞–ª –≤–∞–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π":
        await show_important_channel_info(update, context)
        return True
    
    elif text == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        user = Storage.get_user(user_id)
        await show_statistics_interface(update, context, user)
        return True
    
    elif text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        if Storage.is_admin(user_id):
            await show_settings_interface(update, context, user)
        else:
            await update.message.reply_text("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return True
    
    elif text == "‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞":
        await show_help_interface(update, context)
        return True
    
    # Admin buttons
    elif text == "üì¢ –ö–∞–Ω–∞–ª –ø—É–±–ª–∏–∫–∞—Ü–∏–∏":
        if Storage.is_admin(user_id):
            await show_channel_config(update, context)
        else:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return True
    
    elif text == "üë• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã":
        if Storage.is_admin(user_id):
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏
            user.current_state = "admin_management"
            Storage.update_user(user)
            await show_admins_management(update, context)
        else:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return True
    


    
    # Back to main menu
    elif text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = Storage.get_user(user_id)
        user.current_state = None
        Storage.update_user(user)
        
        reply_markup = get_main_reply_keyboard(user_id)
        await update.message.reply_text(
            "üéõÔ∏è <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
        return True
    
    # If no button matched, return False
    return False

# ===========================================
# INTERFACE FUNCTIONS
# ===========================================

async def show_monitoring_interface(update: Update, context: CallbackContext, user: UserPreferences) -> None:
    """Show monitoring interface with inline buttons."""
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    all_sources = set()
    all_sources.update(user.monitored_chats)
    all_sources.update(user.monitored_channels)
    
    if USERBOT_ENABLED:
        userbot = get_userbot()
        if userbot.is_running:
            userbot_sources = userbot.get_monitored_sources()
            all_sources.update(userbot_sources)
    
    total_sources = len(all_sources)
    
    monitoring_text = (
        f"üìä <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤</b>\n\n"
        f"üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {total_sources}\n"
        f"‚Ä¢ –ü–æ—Ä–æ–≥ –≤–∞–∂–Ω–æ—Å—Ç–∏: {Storage.bot_config.importance_threshold}\n\n"
        f"üí° <b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:</b>\n"
        f"‚Ä¢ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
        f"‚Ä¢ –ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞–∂–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
        f"‚Ä¢ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö\n\n"
        f"‚ûï <b>–î–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –º–æ–∂–Ω–æ:</b>\n"
        f"‚Ä¢ –ü–µ—Ä–µ—Å–ª–∞–≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞/—á–∞—Ç–∞ –±–æ—Ç—É\n"
        f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏–≤ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –∏–ª–∏ @username\n"
        f"‚Ä¢ –î–æ–±–∞–≤–∏–≤ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç"
    )
    
    keyboard = [
        [
            InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫", callback_data="monitoring_add"),
            InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤", callback_data="monitoring_list")
        ],
        [
            InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫", callback_data="monitoring_remove"),
            InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ", callback_data="monitoring_clear")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        monitoring_text,
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )

async def show_submit_post_interface(update: Update, context: CallbackContext) -> None:
    """Show post submission interface."""
    submit_text = (
        f"üìù <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏</b>\n\n"
        f"üéØ <b>–ö–∞–∫ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ—Å—Ç:</b>\n\n"
        f"1Ô∏è‚É£ <b>–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç:</b>\n"
        f"‚Ä¢ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –ø–æ—Å—Ç–∞\n\n"
        f"2Ô∏è‚É£ <b>–ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>\n"
        f"‚Ä¢ –ü–µ—Ä–µ—à–ª–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É\n"
        f"‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é\n\n"
        f"3Ô∏è‚É£ <b>–ö–æ–º–∞–Ω–¥–∞:</b>\n"
        f"‚Ä¢ /submit_post —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞\n\n"
        f"üí° <b>–í–∞—à –ø–æ—Å—Ç –±—É–¥–µ—Ç:</b>\n"
        f"‚Ä¢ –û—Ü–µ–Ω–µ–Ω –ò–ò –Ω–∞ –≤–∞–∂–Ω–æ—Å—Ç—å\n"
        f"‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏\n"
        f"‚Ä¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏\n\n"
        f"‚úÖ <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!</b>"
    )
    
    keyboard = [
        [InlineKeyboardButton("üìÑ –ú–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", callback_data="my_submissions")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        submit_text,
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )

async def show_settings_interface(update: Update, context: CallbackContext, user: UserPreferences) -> None:
    """Show settings interface with inline buttons."""
    keywords = ", ".join(user.keywords) if user.keywords else "–ù–µ —É–∫–∞–∑–∞–Ω—ã"
    exclude_keywords = ", ".join(user.exclude_keywords) if user.exclude_keywords else "–ù–µ —É–∫–∞–∑–∞–Ω—ã"
    config = Storage.bot_config
    
    settings_text = (
        f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
        f"üìä <b>–í–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>\n"
        f"‚Ä¢ –ü–æ—Ä–æ–≥ –≤–∞–∂–Ω–æ—Å—Ç–∏: {Storage.bot_config.importance_threshold} (–≥–ª–æ–±–∞–ª—å–Ω—ã–π)\n"
        f"‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—Å—è —á–∞—Ç–æ–≤: {len(user.monitored_chats)}\n"
        f"‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—Å—è –∫–∞–Ω–∞–ª–æ–≤: {len(user.monitored_channels)}\n"
        f"‚Ä¢ –ú–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –ø–æ—Å—Ç—ã: {'–î–∞' if user.can_submit_posts else '–ù–µ—Ç'}\n\n"
        f"üîë <b>–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:</b>\n"
        f"‚Ä¢ –í–∞–∂–Ω—ã–µ: {keywords[:100]}{'...' if len(keywords) > 100 else ''}\n"
        f"‚Ä¢ –ò—Å–∫–ª—é—á–∞–µ–º—ã–µ: {exclude_keywords[:100]}{'...' if len(exclude_keywords) > 100 else ''}\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if Storage.is_admin(user.user_id):
        settings_text += (
            f"\n\nüåê <b>–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
            f"‚Ä¢ –ê–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏—è: {'–í–∫–ª—é—á–µ–Ω–∞' if config.auto_publish_enabled else '–û—Ç–∫–ª—é—á–µ–Ω–∞'}\n"
            f"‚Ä¢ –¢—Ä–µ–±—É–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è: {'–î–∞' if config.require_admin_approval else '–ù–µ—Ç'}\n"
            f"‚Ä¢ –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥: {config.importance_threshold}\n"
        )
    
    settings_text += "\n\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"
    
    keyboard = [
        [
            InlineKeyboardButton("üîë –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞", callback_data="settings_keywords")
        ]
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if Storage.is_admin(user.user_id):
        keyboard.append([
            InlineKeyboardButton(
                f"ü§ñ –ê–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏—è: {'‚úÖ' if config.auto_publish_enabled else '‚ùå'}", 
                callback_data="admin_toggle_autopublish"
            )
        ])
        keyboard.append([
            InlineKeyboardButton(
                f"‚úã –¢—Ä–µ–±—É–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è: {'‚úÖ' if config.require_admin_approval else '‚ùå'}", 
                callback_data="admin_toggle_approval"
            )
        ])
        keyboard.append([
            InlineKeyboardButton("üìä –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥", callback_data="admin_threshold")
        ])
    
    keyboard.append([
        InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="settings_clear"),
        InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫", callback_data="settings_reset")
    ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        settings_text,
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )

async def show_statistics_interface(update: Update, context: CallbackContext, user: UserPreferences) -> None:
    """Show user statistics."""
    stats_text = (
        f"üìà <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å:</b>\n"
        f"‚Ä¢ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.user_id}\n"
        f"‚Ä¢ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.created_at.strftime('%d.%m.%Y')}\n"
        f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {user.updated_at.strftime('%d.%m.%Y')}\n\n"
        f"üìä <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:</b>\n"
        f"‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —á–∞—Ç–æ–≤: {len(user.monitored_chats)}\n"
        f"‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {len(user.monitored_channels)}\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(user.monitored_chats) + len(user.monitored_channels)}\n\n"
        f"üîë <b>–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è:</b>\n"
        f"‚Ä¢ –ö–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {len(user.keywords)}\n"
        f"‚Ä¢ –ò—Å–∫–ª—é—á–∞–µ–º—ã—Ö —Å–ª–æ–≤: {len(user.exclude_keywords)}\n"
        f"‚Ä¢ –ü–æ—Ä–æ–≥ –≤–∞–∂–Ω–æ—Å—Ç–∏: {Storage.bot_config.importance_threshold} (–≥–ª–æ–±–∞–ª—å–Ω—ã–π)\n\n"
        f"üìù <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>\n"
        f"‚Ä¢ –ú–æ–∂–µ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –ø–æ—Å—Ç—ã: {'–î–∞' if user.can_submit_posts else '–ù–µ—Ç'}"
    )
    
    keyboard = [
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="stats_refresh")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # Check if this is a callback query or regular message
    if update.callback_query:
        # Called from a callback query (button press)
        await update.callback_query.edit_message_text(
            stats_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
    else:
        # Called from a regular message
        await update.message.reply_text(
            stats_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )

async def show_keywords_interface(update: Update, context: CallbackContext, user: UserPreferences) -> None:
    """Show keywords management interface."""
    keywords_text = (
        f"üîë <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏</b>\n\n"
        f"üìà <b>–í–∞–∂–Ω—ã–µ —Å–ª–æ–≤–∞</b> (–ø–æ–≤—ã—à–∞—é—Ç –≤–∞–∂–Ω–æ—Å—Ç—å):\n"
    )
    
    if user.keywords:
        keywords_text += "‚Ä¢ " + "\n‚Ä¢ ".join(user.keywords[:10])
        if len(user.keywords) > 10:
            keywords_text += f"\n‚Ä¢ ... –∏ –µ—â–µ {len(user.keywords) - 10}"
    else:
        keywords_text += "–ù–µ —É–∫–∞–∑–∞–Ω—ã"
    
    keywords_text += f"\n\nüìâ <b>–ò—Å–∫–ª—é—á–∞–µ–º—ã–µ —Å–ª–æ–≤–∞</b> (–ø–æ–Ω–∏–∂–∞—é—Ç –≤–∞–∂–Ω–æ—Å—Ç—å):\n"
    
    if user.exclude_keywords:
        keywords_text += "‚Ä¢ " + "\n‚Ä¢ ".join(user.exclude_keywords[:10])
        if len(user.exclude_keywords) > 10:
            keywords_text += f"\n‚Ä¢ ... –∏ –µ—â–µ {len(user.exclude_keywords) - 10}"
    else:
        keywords_text += "–ù–µ —É–∫–∞–∑–∞–Ω—ã"
    
    keywords_text += (
        f"\n\nüí° <b>–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å:</b>\n"
        f"–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º:\n"
        f"<code>+—Å–ª–æ–≤–æ</code> - –¥–æ–±–∞–≤–∏—Ç—å –≤–∞–∂–Ω–æ–µ —Å–ª–æ–≤–æ\n"
        f"<code>-—Å–ª–æ–≤–æ</code> - –¥–æ–±–∞–≤–∏—Ç—å –∏—Å–∫–ª—é—á–∞–µ–º–æ–µ —Å–ª–æ–≤–æ"
    )
    
    keyboard = [
        [
            InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∞–∂–Ω–æ–µ", callback_data="keywords_add_important"),
            InlineKeyboardButton("‚ûñ –î–æ–±–∞–≤–∏—Ç—å –∏—Å–∫–ª—é—á–∞–µ–º–æ–µ", callback_data="keywords_add_exclude")
        ],
        [
            InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤–∞–∂–Ω–æ–µ", callback_data="keywords_remove_important"),
            InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∏—Å–∫–ª—é—á–∞–µ–º–æ–µ", callback_data="keywords_remove_exclude")
        ],
        [
            InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ", callback_data="keywords_clear_all")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        keywords_text,
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )

async def show_important_channel_info(update: Update, context: CallbackContext) -> None:
    """Show information about important messages channel."""
    config = Storage.bot_config
    
    if config.publish_channel_username:
        channel_text = (
            f"üì¨ <b>–ö–∞–Ω–∞–ª –≤–∞–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π</b>\n\n"
            f"üîî –í —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ –ø—É–±–ª–∏–∫—É—é—Ç—Å—è —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è, "
            f"–æ—Ç–æ–±—Ä–∞–Ω–Ω—ã–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏.\n\n"
            f"üì¢ <b>–ö–∞–Ω–∞–ª:</b> @{config.publish_channel_username}\n"
            f"üîó <b>–°—Å—ã–ª–∫–∞:</b> https://t.me/{config.publish_channel_username}\n\n"
            f"üí° <b>–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏!</b>"
        )
        
        keyboard = [
            [InlineKeyboardButton("üì¢ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url=f"https://t.me/{config.publish_channel_username}")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            channel_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
    else:
        await update.message.reply_text(
            "üì¨ <b>–ö–∞–Ω–∞–ª –≤–∞–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π</b>\n\n"
            "‚ùå –ö–∞–Ω–∞–ª –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∞–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.\n"
            "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —Å–∫–æ—Ä–æ –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ—è—Ç!",
            parse_mode=ParseMode.HTML
        )

async def show_help_interface(update: Update, context: CallbackContext) -> None:
    """Show help interface."""
    user_id = update.effective_user.id
    is_admin = Storage.is_admin(user_id)
    
    if is_admin:
        help_text = (
            f"‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
            f"üìù <b>–ú–æ–¥–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤:</b>\n"
            f"‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã\n"
            f"‚Ä¢ –û–¥–æ–±—Ä—è–π—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω—è–π—Ç–µ –∏—Ö\n"
            f"‚Ä¢ –û–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –≤ –∫–∞–Ω–∞–ª–µ\n\n"
            f"üìä <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:</b>\n"
            f"‚Ä¢ –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞/–∫–∞–Ω–∞–ª–∞\n"
            f"‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n"
            f"‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞\n\n"
            f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
            f"‚Ä¢ –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –≤–∞–∂–Ω–æ—Å—Ç–∏: {Storage.bot_config.importance_threshold}\n"
            f"‚Ä¢ –ö–∞–Ω–∞–ª –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: @{Storage.bot_config.publish_channel_username or '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}\n\n"
            "üí° <b>–°–æ–≤–µ—Ç:</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"
        )
    else:
        help_text = (
            f"‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>\n\n"
            f"ü§ñ <b>–ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç:</b>\n"
            f"‚Ä¢ –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏\n"
            f"‚Ä¢ –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n\n"
            f"üìù <b>–ö–∞–∫ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ—Å—Ç:</b>\n"
            f"1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üìù –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ—Å—Ç'\n"
            f"2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ –ø–æ—Å—Ç–∞\n"
            f"3. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é\n\n"
            f"üì¢ <b>–ö–∞–∫ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫–∞–Ω–∞–ª:</b>\n"
            f"1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üì¢ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫–∞–Ω–∞–ª'\n"
            f"2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ username –∫–∞–Ω–∞–ª–∞\n\n"
            f"üí° <b>–í–∞–∂–Ω–æ:</b>\n"
            f"‚Ä¢ –í—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏\n"
            f"‚Ä¢ –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ—à–µ–Ω–∏–∏ –ø–æ –≤–∞—à–µ–º—É –ø–æ—Å—Ç—É"
        )
    
    # Inline –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if is_admin:
        keyboard = [
            [
                InlineKeyboardButton("üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç", callback_data="help_quickstart"),
                InlineKeyboardButton("üí° –°–æ–≤–µ—Ç—ã", callback_data="help_tips")
            ],
            [
                InlineKeyboardButton("‚ùì FAQ", callback_data="help_faq")
            ]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            help_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
    else:
        # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ inline –∫–Ω–æ–ø–æ–∫
        await update.message.reply_text(
            help_text,
            parse_mode=ParseMode.HTML
        )

# ===========================================
# MONITORING INTERFACES
# ===========================================



# ===========================================
# ADMIN INTERFACES
# ===========================================

async def show_admin_config(update: Update, context: CallbackContext) -> None:
    """Show admin configuration interface."""
    config = Storage.bot_config
    
    config_text = (
        f"‚öôÔ∏è <b>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞</b>\n\n"
        f"üìä <b>–ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –≤–∞–∂–Ω–æ—Å—Ç–∏:</b> {config.importance_threshold}\n"
        f"üì¢ <b>–ö–∞–Ω–∞–ª –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b> {config.publish_channel_username or '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}\n"
        f"üë• <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:</b> {len(config.admin_ids)}\n\n"
        f"üí° <b>–í—Å–µ –ø–æ—Å—Ç—ã –ø—Ä–æ—Ö–æ–¥—è—Ç –º–æ–¥–µ—Ä–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π</b>"
    )
    
    keyboard = [
        [
            InlineKeyboardButton("üìä –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä–æ–≥ –≤–∞–∂–Ω–æ—Å—Ç–∏", callback_data="admin_threshold"),
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        config_text,
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )

async def show_channel_config(update: Update, context: CallbackContext) -> None:
    """Show channel configuration interface."""
    config = Storage.bot_config
    channel_info = f"<code>{html.escape(str(config.publish_channel_id))}</code>" if config.publish_channel_id else "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    username_info = f"@{html.escape(config.publish_channel_username)}" if config.publish_channel_username else "–ù–µ —É–∫–∞–∑–∞–Ω"
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    user_id = update.effective_user.id
    user = Storage.get_user(user_id)
    user.current_state = "channel_setup"
    Storage.update_user(user)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤, –≥–¥–µ –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    admin_channels = await get_bot_admin_channels(context.bot)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π reply_text
    message_func = update.message.reply_text
    
    channel_text = (
        f"üì¢ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏</b>\n\n"
        f"üìã <b>–¢–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª:</b> {channel_info}\n"
        f"üè∑Ô∏è <b>Username:</b> {username_info}\n\n"
    )
    
    keyboard = []
    
    if admin_channels:
        channel_text += f"üìä <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã (–≥–¥–µ –±–æ—Ç –∞–¥–º–∏–Ω):</b>\n"
        for channel in admin_channels:
            channel_name = channel['title']
            if channel['username']:
                channel_name += f" (@{channel['username']})"
            channel_text += f"‚Ä¢ {html.escape(channel_name)}\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞
            button_text = f"üì¢ {channel['title'][:30]}"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=f"set_channel_{channel['id']}")])
        
        channel_text += "\nüí° <b>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–∞–Ω–∞–ª –≤—ã—à–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞</b>\n\n"
    else:
        channel_text += "‚ö†Ô∏è <b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤</b>\n"
        channel_text += "–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –∫–∞–Ω–∞–ª, –∑–∞—Ç–µ–º –æ–±–Ω–æ–≤–∏—Ç–µ —ç—Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—É\n\n"
    
    channel_text += (
        f"üí° <b>–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ä—É—á–Ω—É—é:</b>\n"
        f"‚Ä¢ ID –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: -1001234567890)\n"
        f"‚Ä¢ Username –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: @my_channel)\n"
        f"‚Ä¢ –°—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: https://t.me/my_channel)\n"
        f"‚Ä¢ –ö–æ—Ä–æ—Ç–∫—É—é —Å—Å—ã–ª–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: t.me/my_channel)\n\n"
        f"üîß <b>–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π –∏–∑ —ç—Ç–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º!</b>"
    )
    
    keyboard.append([InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="refresh_channels")])
    keyboard.append([InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_clear_channel")])
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_channel_setup")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await message_func(
        channel_text,
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )

async def show_admins_management(update: Update, context: CallbackContext) -> None:
    """Show admins management interface."""
    config = Storage.bot_config
    
    user_id = update.effective_user.id
    
    admins_text = (
        f"üë• <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –±–æ—Ç–∞</b>\n\n"
        f"üìä <b>–í—Å–µ–≥–æ:</b> {len(config.admin_ids)}\n\n"
        f"üìã <b>–°–ø–∏—Å–æ–∫:</b>\n"
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–µ
    for i, admin_id in enumerate(config.admin_ids, 1):
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            chat_member = await context.bot.get_chat(admin_id)
            username = chat_member.username
            first_name = chat_member.first_name
            last_name = chat_member.last_name
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è
            if username:
                display_name = f"@{username}"
            elif first_name:
                display_name = f"{first_name}"
                if last_name:
                    display_name += f" {last_name}"
            else:
                display_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            
            admins_text += f"{i}. {display_name} (ID: {admin_id})\n"
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ ID
            admins_text += f"{i}. ID: {admin_id} (–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é)\n"
    
    admins_text += (
        f"\nüí° <b>–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:</b>\n"
        f"‚Ä¢ <code>+123456789</code> - –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞ –ø–æ ID\n"
        f"‚Ä¢ <code>+@username</code> - –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞ –ø–æ —é–∑–µ—Ä–Ω–µ–π–º—É\n"
        f"‚Ä¢ <code>-123456789</code> - —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞ –ø–æ ID\n"
        f"‚Ä¢ <code>-@username</code> - —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞ –ø–æ —é–∑–µ—Ä–Ω–µ–π–º—É\n\n"
        f"üîß <b>–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        f"/admin_add user_id_–∏–ª–∏_@username\n"
        f"/admin_remove user_id_–∏–ª–∏_@username"
    )
    
    await update.message.reply_text(
        admins_text,
        parse_mode=ParseMode.HTML
    )

async def show_admin_statistics(update: Update, context: CallbackContext) -> None:
    """Show admin statistics."""
    config = Storage.bot_config
    all_users = Storage.get_all_users()
    pending_posts = Storage.get_pending_posts(PostStatus.PENDING)
    approved_posts = Storage.get_pending_posts(PostStatus.APPROVED)
    rejected_posts = Storage.get_pending_posts(PostStatus.REJECTED)
    published_posts = Storage.get_pending_posts(PostStatus.PUBLISHED)
    
    # Count monitored sources
    total_chats = sum(len(user.monitored_chats) for user in all_users.values())
    total_channels = sum(len(user.monitored_channels) for user in all_users.values())
    
    stats_text = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        f"üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(all_users)}\n"
        f"‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {len(config.admin_ids)}\n\n"
        f"üìä <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:</b>\n"
        f"‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —á–∞—Ç–æ–≤: {total_chats}\n"
        f"‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {total_channels}\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {total_chats + total_channels}\n\n"
        f"üìù <b>–ü–æ—Å—Ç—ã:</b>\n"
        f"‚Ä¢ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {len(pending_posts)}\n"
        f"‚Ä¢ –û–¥–æ–±—Ä–µ–Ω–æ: {len(approved_posts)}\n"
        f"‚Ä¢ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {len(rejected_posts)}\n"
        f"‚Ä¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {len(published_posts)}\n\n"
        f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
        f"‚Ä¢ –ê–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏—è: {'–í–∫–ª—é—á–µ–Ω–∞' if config.auto_publish_enabled else '–û—Ç–∫–ª—é—á–µ–Ω–∞'}\n"
        f"‚Ä¢ –¢—Ä–µ–±—É–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è: {'–î–∞' if config.require_admin_approval else '–ù–µ—Ç'}\n"
        f"‚Ä¢ –ü–æ—Ä–æ–≥ –≤–∞–∂–Ω–æ—Å—Ç–∏: {config.importance_threshold}\n"
        f"‚Ä¢ –ö–∞–Ω–∞–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {'–î–∞' if config.publish_channel_id else '–ù–µ—Ç'}"
    )
    
    keyboard = [
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_stats_refresh")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # Check if this is a callback query or regular message
    if update.callback_query:
        # Called from a callback query (button press)
        await update.callback_query.edit_message_text(
            stats_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
    else:
        # Called from a regular message
        await update.message.reply_text(
            stats_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )



# ===========================================
# TEXT MESSAGE HANDLERS
# ===========================================

async def handle_text_messages(update: Update, context: CallbackContext) -> None:
    """Handle text messages for various inputs."""
    user_id = update.effective_user.id
    text = update.message.text.strip()
    user = Storage.get_user(user_id)  # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞—á–∞–ª–µ —Ñ—É–Ω–∫—Ü–∏–∏
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –Ω–∞–∂–∞—Ç–∏–µ–º –∫–Ω–æ–ø–∫–∏
    if await handle_reply_buttons(update, context):
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
    if context.user_data.get('awaiting_channel_suggestion'):
        context.user_data.pop('awaiting_channel_suggestion', None)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        config = Storage.bot_config
        if config.admin_ids:
            notification_text = (
                f"üì¢ <b>–ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞</b>\n\n"
                f"üë§ <b>–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {user_id}\n"
                f"üìÖ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
                f"üìã <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:</b> {html.escape(text)}"
            )
            
            # –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            keyboard = []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            if text.startswith('@') or 't.me/' in text or text.startswith('http'):
                keyboard.append([
                    InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", callback_data=f"add_suggested_channel_{text}")
                ])
            
            keyboard.append([
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="reject_channel_suggestion")
            ])
            
            reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None
            
            for admin_id in config.admin_ids:
                try:
                    await context.bot.send_message(
                        chat_id=admin_id,
                        text=notification_text,
                        parse_mode=ParseMode.HTML,
                        reply_markup=reply_markup
                    )
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {admin_id}: {e}")
            
            await update.message.reply_text(
                "‚úÖ <b>–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!</b>\n\n"
                "–û–Ω–∏ —Ä–∞—Å—Å–º–æ—Ç—Ä—è—Ç –µ–≥–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
                parse_mode=ParseMode.HTML
            )
        else:
            await update.message.reply_text(
                "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.",
                parse_mode=ParseMode.HTML
            )
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    if user.current_state == "awaiting_source_link":
        user.current_state = None
        Storage.update_user(user)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –∏–ª–∏ username
        if text.startswith('@') or 't.me/' in text or text.startswith('http'):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —é–∑–µ—Ä–±–æ—Ç–∞ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            if USERBOT_ENABLED:
                userbot = get_userbot()
                if userbot.is_running:
                    try:
                        chat_info = await userbot.join_chat(text)
                        if chat_info:
                            await update.message.reply_text(
                                f"‚úÖ <b>–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥!</b>\n\n"
                                f"üìå <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {html.escape(chat_info['title'])}\n"
                                f"üÜî <b>ID:</b> {chat_info['id']}\n\n"
                                f"–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∏–∑ —ç—Ç–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞.",
                                parse_mode=ParseMode.HTML
                            )
                        else:
                            await update.message.reply_text(
                                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏.",
                                parse_mode=ParseMode.HTML
                            )
                    except Exception as e:
                        await update.message.reply_text(
                            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {str(e)}",
                            parse_mode=ParseMode.HTML
                        )
                else:
                    await update.message.reply_text(
                        "‚ùå –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                        parse_mode=ParseMode.HTML
                    )
            else:
                await update.message.reply_text(
                    "‚ùå –§—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
                    parse_mode=ParseMode.HTML
                )
        else:
            await update.message.reply_text(
                "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!</b>\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
                "‚Ä¢ @username –∫–∞–Ω–∞–ª–∞\n"
                "‚Ä¢ –°—Å—ã–ª–∫—É https://t.me/username\n"
                "‚Ä¢ –°—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ",
                parse_mode=ParseMode.HTML
            )
        return
    
    # Handle keyword additions
    if text.startswith('+') and len(text) > 1:
        if Storage.is_admin(user_id):
            keyword = text[1:].strip().lower()
            if keyword not in user.keywords:
                user.keywords.append(keyword)
                Storage.update_user(user)
                await update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤–∞–∂–Ω–æ–µ —Å–ª–æ–≤–æ: <b>{html.escape(keyword)}</b>", parse_mode=ParseMode.HTML)
            else:
                await update.message.reply_text(f"‚ö†Ô∏è –°–ª–æ–≤–æ '<b>{html.escape(keyword)}</b>' —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ –≤–∞–∂–Ω—ã—Ö.", parse_mode=ParseMode.HTML)
        else:
            await update.message.reply_text("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return
    
    # Handle keyword exclusions
    elif text.startswith('-') and len(text) > 1 and not text[1:].isdigit():
        if Storage.is_admin(user_id):
            keyword = text[1:].strip().lower()
            if keyword not in user.exclude_keywords:
                user.exclude_keywords.append(keyword)
                Storage.update_user(user)
                await update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –∏—Å–∫–ª—é—á–∞–µ–º–æ–µ —Å–ª–æ–≤–æ: <b>{html.escape(keyword)}</b>", parse_mode=ParseMode.HTML)
            else:
                await update.message.reply_text(f"‚ö†Ô∏è –°–ª–æ–≤–æ '<b>{html.escape(keyword)}</b>' —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ –∏—Å–∫–ª—é—á–∞–µ–º—ã—Ö.", parse_mode=ParseMode.HTML)
        else:
            await update.message.reply_text("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return
    
    # Handle admin addition (for admins only)
    elif text.startswith('+') and (text[1:].isdigit() or text[1:].startswith('@')):
        if Storage.is_admin(user_id):
            if text[1:].isdigit():
                admin_id = int(text[1:])
            else:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —é–∑–µ—Ä–Ω–µ–π–º–∞
                username = text[1:].lstrip('@')
                try:
                    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —é–∑–µ—Ä–Ω–µ–π–º—É
                    chat = await context.bot.get_chat(f"@{username}")
                    admin_id = chat.id
                except Exception as e:
                    await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}")
                    return
            
            if admin_id not in Storage.bot_config.admin_ids:
                Storage.add_admin(admin_id)
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                try:
                    chat_member = await context.bot.get_chat(admin_id)
                    username = chat_member.username
                    first_name = chat_member.first_name
                    last_name = chat_member.last_name
                    
                    if username:
                        display_name = f"@{username}"
                    elif first_name:
                        display_name = f"{first_name}"
                        if last_name:
                            display_name += f" {last_name}"
                    else:
                        display_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                    
                    await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {display_name} (ID: {admin_id}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.")
                except Exception:
                    await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.")
            else:
                await update.message.reply_text(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin_id} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        else:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return
    
    # Handle admin removal (for admins only)
    elif text.startswith('-') and (text[1:].isdigit() or text[1:].startswith('@')):
        if Storage.is_admin(user_id):
            if text[1:].isdigit():
                admin_id = int(text[1:])
            else:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —é–∑–µ—Ä–Ω–µ–π–º–∞
                username = text[1:].lstrip('@')
                try:
                    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —é–∑–µ—Ä–Ω–µ–π–º—É
                    chat = await context.bot.get_chat(f"@{username}")
                    admin_id = chat.id
                except Exception as e:
                    await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}")
                    return
            
            if admin_id in Storage.bot_config.admin_ids:
                Storage.remove_admin(admin_id)
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–¥–∞–ª–µ–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                try:
                    chat_member = await context.bot.get_chat(admin_id)
                    username = chat_member.username
                    first_name = chat_member.first_name
                    last_name = chat_member.last_name
                    
                    if username:
                        display_name = f"@{username}"
                    elif first_name:
                        display_name = f"{first_name}"
                        if last_name:
                            display_name += f" {last_name}"
                    else:
                        display_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                    
                    await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {display_name} (ID: {admin_id}) —É–¥–∞–ª–µ–Ω –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
                except Exception:
                    await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin_id} —É–¥–∞–ª–µ–Ω –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
            else:
                await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        else:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return
    
    # Handle admin management in admin interface
    elif Storage.is_admin(user_id) and user.current_state == "admin_management":
        if text.startswith('+') and text[1:].isdigit():
            admin_id = int(text[1:])
            if admin_id not in Storage.bot_config.admin_ids:
                Storage.add_admin(admin_id)
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                try:
                    chat_member = await context.bot.get_chat(admin_id)
                    username = chat_member.username
                    first_name = chat_member.first_name
                    last_name = chat_member.last_name
                    
                    if username:
                        display_name = f"@{username}"
                    elif first_name:
                        display_name = f"{first_name}"
                        if last_name:
                            display_name += f" {last_name}"
                    else:
                        display_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                    
                    await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {display_name} (ID: {admin_id}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.")
                except Exception:
                    await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.")
            else:
                await update.message.reply_text(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin_id} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        elif text.startswith('-') and text[1:].isdigit():
            admin_id = int(text[1:])
            if admin_id == user_id:
                await update.message.reply_text("‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–µ–±—è –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
            elif admin_id in Storage.bot_config.admin_ids:
                Storage.remove_admin(admin_id)
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–¥–∞–ª–µ–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                try:
                    chat_member = await context.bot.get_chat(admin_id)
                    username = chat_member.username
                    first_name = chat_member.first_name
                    last_name = chat_member.last_name
                    
                    if username:
                        display_name = f"@{username}"
                    elif first_name:
                        display_name = f"{first_name}"
                        if last_name:
                            display_name += f" {last_name}"
                    else:
                        display_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                    
                    await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {display_name} (ID: {admin_id}) —É–¥–∞–ª–µ–Ω –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
                except Exception:
                    await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin_id} —É–¥–∞–ª–µ–Ω –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
            else:
                await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                "‚Ä¢ <code>+123456789</code> - –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞\n"
                "‚Ä¢ <code>-123456789</code> - —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞",
                parse_mode=ParseMode.HTML
            )
        return
    
    # Handle channel configuration for admins (highest priority for admins)
    if Storage.is_admin(user_id) and user.current_state == "channel_setup" and (
        text.startswith('@') or 
        text.lstrip('-').isdigit() or 
        't.me/' in text or
        text.startswith('http')
    ):
        await handle_channel_config_text(update, context, text)
        return
    
    # Handle admin threshold setup
    if Storage.is_admin(user_id) and user.current_state == "admin_threshold_setup" and text.replace('.', '').isdigit() and 0 <= float(text) <= 1:
        threshold = float(text)
        config = Storage.bot_config
        config.importance_threshold = threshold
        Storage.update_config(config)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user.current_state = None
        Storage.update_user(user)
        
        await update.message.reply_text(
            f"‚úÖ <b>–ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –≤–∞–∂–Ω–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:</b> {threshold}\n\n"
            f"üí° –¢–µ–ø–µ—Ä—å –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±—É–¥—É—Ç –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –≤–∞–∂–Ω–æ—Å—Ç—å—é –≤—ã—à–µ {threshold}",
            parse_mode=ParseMode.HTML
        )
        return
    

    

    
    # Handle channel suggestions from regular users
    elif not Storage.is_admin(user_id) and (
        text.startswith('@') or 
        text.lstrip('-').isdigit() or 
        't.me/' in text or
        text.startswith('http')
    ):
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞
        admin_ids = Storage.bot_config.admin_ids
        if admin_ids:
            suggestion_text = (
                f"üì¢ <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>\n\n"
                f"üë§ <b>–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {user_id}\n"
                f"üìù <b>–ö–∞–Ω–∞–ª:</b> {html.escape(text)}\n"
                f"üìÖ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
                f"üí° <b>–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.</b>"
            )
            
            for admin_id in admin_ids:
                try:
                    await context.bot.send_message(
                        chat_id=admin_id,
                        text=suggestion_text,
                        parse_mode=ParseMode.HTML
                    )
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
            
            await update.message.reply_text(
                "‚úÖ <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!</b>\n\n"
                "üí° –ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏ –¥–æ–±–∞–≤–∏–º –∫–∞–Ω–∞–ª –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥, –µ—Å–ª–∏ –æ–Ω –ø–æ–¥—Ö–æ–¥–∏—Ç.",
                parse_mode=ParseMode.HTML
            )
        else:
            await update.message.reply_text(
                "‚ùå <b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤</b>\n\n"
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.",
                parse_mode=ParseMode.HTML
            )
        return
    
    # If nothing matched and it's not a button text, treat as post submission
    # Check if text is not a known button
    known_buttons = [
        "üìù –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ—Å—Ç", "üì¢ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫–∞–Ω–∞–ª", "‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞",
        "üìù –ú–æ–¥–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤", "üì¢ –ö–∞–Ω–∞–ª –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", "üë• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã",
        "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", "ü§ñ Userbot", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
        "üîë –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞", "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å", "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    ]
    
    if text not in known_buttons and len(text) > 10 and not text.startswith('/'):
        await handle_post_submission_text(update, context, text)
        return

async def handle_channel_config_text(update: Update, context: CallbackContext, text: str) -> None:
    """Handle channel configuration from text input."""
    config = Storage.bot_config
    user_id = update.effective_user.id
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = Storage.get_user(user_id)
    user.current_state = None
    Storage.update_user(user)
    
    # Helper function to extract username from link
    def extract_username_from_link(link: str) -> str:
        link = link.strip()
        
        # –ï—Å–ª–∏ —É–∂–µ username —Å @
        if link.startswith('@'):
            return link
            
        # –†–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å—Å—ã–ª–æ–∫ t.me
        if 't.me/' in link:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∞—Å—Ç—å –ø–æ—Å–ª–µ t.me/
            username = link.split('t.me/')[-1]
            # –£–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ—Å–ª–µ ?
            username = username.split('?')[0]
            # –£–±–∏—Ä–∞–µ–º —Å–ª–µ—à–∏ –≤ –∫–æ–Ω—Ü–µ
            username = username.rstrip('/')
            return f"@{username}"
        
        # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ username –±–µ–∑ @
        if not link.startswith('@') and not link.startswith('http') and not link.lstrip('-').isdigit():
            return f"@{link}"
            
        return link
    
    async def check_bot_permissions(chat_id):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ"""
        try:
            bot_info = await context.bot.get_me()
            member = await context.bot.get_chat_member(chat_id, bot_info.id)
            return member.status in ['administrator', 'creator']
        except Exception:
            return False
    
    # Process different formats
    if text.startswith('@') or 't.me/' in text or text.startswith('http'):
        # Username or link format
        if 't.me/' in text or text.startswith('http'):
            username = extract_username_from_link(text)
        else:
            username = text if text.startswith('@') else f"@{text}"
            
        try:
            # Try to get channel info to validate and get ID
            chat = await context.bot.get_chat(username)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞
            has_permissions = await check_bot_permissions(chat.id)
            
            if not has_permissions:
                await update.message.reply_text(
                    f"‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –∫–∞–Ω–∞–ª–µ.\n\n"
                    f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {html.escape(chat.title)}\n"
                    f"üìã <b>ID:</b> {chat.id}\n\n"
                    f"üîß <b>–î–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤ –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –ø—Ä–∞–≤–∞–º–∏:</b>\n"
                    f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π\n"
                    f"‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
                    f"‚ùì <b>–í—Å—ë —Ä–∞–≤–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª?</b>",
                    parse_mode=ParseMode.HTML,
                    reply_markup=InlineKeyboardMarkup([
                        [
                            InlineKeyboardButton("‚úÖ –î–∞, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data=f"force_set_channel_{chat.id}"),
                            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_channel_setup")
                        ]
                    ])
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            config.publish_channel_id = chat.id
            config.publish_channel_username = chat.username
            Storage.update_config(config)
            
            await update.message.reply_text(
                f"‚úÖ <b>–ö–∞–Ω–∞–ª –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
                f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {html.escape(chat.title)}\n"
                f"üìã <b>ID:</b> {chat.id}\n"
                f"üè∑Ô∏è <b>Username:</b> @{html.escape(chat.username or '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}\n"
                f"üë§ <b>–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b> {getattr(chat, 'member_count', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
                f"ü§ñ <b>–ë–æ—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b> ‚úÖ\n"
                f"üöÄ <b>–ì–æ—Ç–æ–≤ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤!</b>",
                parse_mode=ParseMode.HTML
            )
            
        except Exception as e:
            error_msg = str(e).lower()
            if "chat not found" in error_msg:
                await update.message.reply_text(
                    f"‚ùå <b>–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
                    f"üîó <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:</b> {html.escape(text)}\n\n"
                    f"üí° <b>–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</b>\n"
                    f"‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –∏–ª–∏ username\n"
                    f"‚Ä¢ –ö–∞–Ω–∞–ª –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∏ –±–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω\n"
                    f"‚Ä¢ –ö–∞–Ω–∞–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
                    parse_mode=ParseMode.HTML
                )
            elif "forbidden" in error_msg:
                await update.message.reply_text(
                    f"‚ùå <b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É</b>\n\n"
                    f"üîó <b>–ö–∞–Ω–∞–ª:</b> {html.escape(text)}\n\n"
                    f"üîß <b>–†–µ—à–µ–Ω–∏–µ:</b>\n"
                    f"1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
                    f"2. –î–∞–π—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π\n"
                    f"3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞",
                    parse_mode=ParseMode.HTML
                )
            else:
                await update.message.reply_text(
                    f"‚ùå <b>–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞</b>\n\n"
                    f"üîó <b>–í–≤–æ–¥:</b> {html.escape(text)}\n"
                    f"üìã <b>–û—à–∏–±–∫–∞:</b> {html.escape(str(e))}\n\n"
                    f"üí° <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:</b>\n"
                    f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏\n"
                    f"‚Ä¢ –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª\n"
                    f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ID –∫–∞–Ω–∞–ª–∞ –≤–º–µ—Å—Ç–æ —Å—Å—ã–ª–∫–∏",
                    parse_mode=ParseMode.HTML
                )
    
    elif text.lstrip('-').isdigit():
        # ID format
        channel_id = int(text)
        
        try:
            # Try to get channel info
            chat = await context.bot.get_chat(channel_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞
            has_permissions = await check_bot_permissions(channel_id)
            
            config.publish_channel_id = channel_id
            if chat.username:
                config.publish_channel_username = chat.username
            Storage.update_config(config)
            
            permission_status = "‚úÖ –ë–æ—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞" if has_permissions else "‚ö†Ô∏è –ë–æ—Ç –ù–ï —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
            
            await update.message.reply_text(
                f"‚úÖ <b>–ö–∞–Ω–∞–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
                f"ÔøΩÔøΩ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {html.escape(chat.title)}\n"
                f"üìã <b>ID:</b> {channel_id}\n"
                f"üè∑Ô∏è <b>Username:</b> @{html.escape(chat.username or '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}\n\n"
                f"ü§ñ <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:</b> {permission_status}\n\n"
                f"{'üöÄ –ì–æ—Ç–æ–≤ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!' if has_permissions else 'üîß –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏'}",
                parse_mode=ParseMode.HTML
            )
            
        except Exception as e:
            # Save ID even if we can't get info
            config.publish_channel_id = channel_id
            Storage.update_config(config)
            await update.message.reply_text(
                f"‚ö†Ô∏è <b>–ö–∞–Ω–∞–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω</b>, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n\n"
                f"üìã <b>ID –∫–∞–Ω–∞–ª–∞:</b> {channel_id}\n"
                f"üìã <b>–û—à–∏–±–∫–∞:</b> {html.escape(str(e))}\n\n"
                f"üí° <b>–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:</b>\n"
                f"‚Ä¢ –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n"
                f"‚Ä¢ ID –∫–∞–Ω–∞–ª–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π\n"
                f"‚Ä¢ –£ –±–æ—Ç–∞ –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π",
                parse_mode=ParseMode.HTML
            )
    else:
        await update.message.reply_text(
            f"‚ùå <b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>\n\n"
            f"üìù <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</b>\n"
            f"‚Ä¢ ID –∫–∞–Ω–∞–ª–∞: <code>-1001234567890</code>\n"
            f"‚Ä¢ Username: <code>@my_channel</code>\n"
            f"‚Ä¢ –ü–æ–ª–Ω–∞—è —Å—Å—ã–ª–∫–∞: <code>https://t.me/my_channel</code>\n"
            f"‚Ä¢ –ö–æ—Ä–æ—Ç–∫–∞—è —Å—Å—ã–ª–∫–∞: <code>t.me/my_channel</code>\n\n"
            f"üîó <b>–í–∞—à –≤–≤–æ–¥:</b> {html.escape(text)}",
            parse_mode=ParseMode.HTML
        )



async def handle_post_submission_text(update: Update, context: CallbackContext, text: str) -> None:
    """Handle post submission from regular text."""
    user_id = update.effective_user.id
    
    # Show confirmation
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é", callback_data=f"confirm_submit_text"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_submit")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # Store the text for later use
    context.user_data['pending_post_text'] = text
    
    await update.message.reply_text(
        f"üìù <b>–û—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –∫–∞–∫ –ø–æ—Å—Ç?</b>\n\n"
        f"üìÑ <b>–¢–µ–∫—Å—Ç:</b>\n{text[:300]}{'...' if len(text) > 300 else ''}\n\n"
        f"üí° –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏.",
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )

# –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–∞–π–ª–µ...# –§–∏–Ω–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å bot_simplified.py

# ===========================================
# CALLBACK HANDLERS
# ===========================================

async def callback_handler(update: Update, context: CallbackContext) -> None:
    """Handle inline button callbacks."""
    query = update.callback_query
    if not query:
        return
        
    await query.answer()
    
    data = query.data
    if not data:
        return
        
    user_id = update.effective_user.id
    user = Storage.get_user(user_id)
    
    # Monitoring callbacks
    if data == "monitoring_add":
        await query.edit_message_text(
            "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>\n\n"
            "üìå <b>–°–ø–æ—Å–æ–±—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:</b>\n\n"
            "1Ô∏è‚É£ <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª:</b>\n"
            "‚Ä¢ <code>@channel_username</code>\n"
            "‚Ä¢ <code>https://t.me/channel_username</code>\n\n"
            "2Ô∏è‚É£ <b>–ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>\n"
            "‚Ä¢ –ò–∑ –ª—é–±–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ —á–∞—Ç–∞\n"
            "‚Ä¢ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –¥–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫\n\n"
            "3Ô∏è‚É£ <b>–î–ª—è –∑–∞–∫—Ä—ã—Ç—ã—Ö –∫–∞–Ω–∞–ª–æ–≤/—á–∞—Ç–æ–≤:</b>\n"
            "‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª/—á–∞—Ç –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
            "‚Ä¢ –ò–ª–∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é\n\n"
            "üì® <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ username –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!</b>",
            parse_mode=ParseMode.HTML
        )
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏
        user.current_state = "awaiting_source_link"
        Storage.update_user(user)
    
    elif data == "monitoring_list":
        await show_monitoring_list(query, context, user)
    
    elif data == "monitoring_remove":
        await show_monitoring_remove(query, context, user)
    
    elif data == "monitoring_clear":
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å", callback_data="confirm_clear_monitoring"),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_clear")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "‚ö†Ô∏è <b>–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞?</b>\n\n"
            "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
    
    # Settings callbacks
    elif data == "settings_keywords":
        await show_keywords_interface(update, context, user)
    
    elif data == "settings_clear":
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å", callback_data="confirm_clear_data"),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_clear")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "‚ö†Ô∏è <b>–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ?</b>\n\n"
            "–ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã:\n"
            "‚Ä¢ –í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n"
            "‚Ä¢ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞\n"
            "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
            "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
    
    # Keywords callbacks
    elif data == "keywords_add_important":
        await query.edit_message_text(
            "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∞–∂–Ω–æ–≥–æ —Å–ª–æ–≤–∞</b>\n\n"
            "üí° <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É</b>\n"
            "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: <code>+—Å–ª–æ–≤–æ</code>\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ —Å—Ä–æ—á–Ω–æ\n"
            "‚Ä¢ –≤–∞–∂–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞\n"
            "‚Ä¢ –¥–µ–¥–ª–∞–π–Ω",
            parse_mode=ParseMode.HTML
        )
    
    elif data == "keywords_add_exclude":
        await query.edit_message_text(
            "‚ûñ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Å–∫–ª—é—á–∞–µ–º–æ–≥–æ —Å–ª–æ–≤–∞</b>\n\n"
            "üí° <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É</b>\n"
            "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: <code>-—Å–ª–æ–≤–æ</code>\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ —Ä–µ–∫–ª–∞–º–∞\n"
            "‚Ä¢ —Å–ø–∞–º\n"
            "‚Ä¢ —Ç–µ—Å—Ç",
            parse_mode=ParseMode.HTML
        )
    
    elif data.startswith("keywords_remove_"):
        keyword_type = data.replace("keywords_remove_", "")
        await show_keywords_remove(query, context, user, keyword_type)
    
    elif data == "keywords_clear_all":
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å", callback_data="confirm_clear_keywords"),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_clear")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "‚ö†Ô∏è <b>–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞?</b>\n\n"
            "–ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –≤—Å–µ –≤–∞–∂–Ω—ã–µ –∏ –∏—Å–∫–ª—é—á–∞–µ–º—ã–µ —Å–ª–æ–≤–∞.",
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
    
    # Admin callbacks
    elif data == "admin_threshold":
        if Storage.is_admin(user_id):
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            user = Storage.get_user(user_id)
            user.current_state = "admin_threshold_setup"
            Storage.update_user(user)
            
            await query.edit_message_text(
                "üìä <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏</b>\n\n"
                f"–¢–µ–∫—É—â–∏–π –ø–æ—Ä–æ–≥: <b>{Storage.bot_config.importance_threshold}</b>\n\n"
                "üí° <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 0.0 –¥–æ 1.0</b>\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 0.7\n\n"
                "üîç <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
                "‚Ä¢ 0.3-0.5 - –¢–æ–ª—å–∫–æ –æ—á–µ–Ω—å –≤–∞–∂–Ω—ã–µ\n"
                "‚Ä¢ 0.5-0.7 - –í–∞–∂–Ω—ã–µ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)\n"
                "‚Ä¢ 0.7-0.9 - –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π",
                parse_mode=ParseMode.HTML
            )
        else:
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    
    elif data == "admin_toggle_autopublish":
        if Storage.is_admin(user_id):
            config = Storage.bot_config
            config.auto_publish_enabled = not config.auto_publish_enabled
            Storage.update_config(config)
            
            await query.edit_message_text(
                f"‚úÖ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞</b>\n\n"
                f"ü§ñ –ê–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏—è: {'–í–∫–ª—é—á–µ–Ω–∞' if config.auto_publish_enabled else '–û—Ç–∫–ª—é—á–µ–Ω–∞'}\n\n"
                f"üí° {'–í–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏' if config.auto_publish_enabled else '–í—Å–µ –ø–æ—Å—Ç—ã —Ç—Ä–µ–±—É—é—Ç —Ä—É—á–Ω–æ–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏'}",
                parse_mode=ParseMode.HTML
            )
    
    elif data == "admin_toggle_approval":
        if Storage.is_admin(user_id):
            config = Storage.bot_config
            config.require_admin_approval = not config.require_admin_approval
            Storage.update_config(config)
            
            await query.edit_message_text(
                f"‚úÖ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞</b>\n\n"
                f"‚úã –¢—Ä–µ–±—É–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞: {'–î–∞' if config.require_admin_approval else '–ù–µ—Ç'}\n\n"
                f"üí° {'–í—Å–µ –ø–æ—Å—Ç—ã –ø—Ä–æ—Ö–æ–¥—è—Ç –º–æ–¥–µ—Ä–∞—Ü–∏—é' if config.require_admin_approval else '–ü–æ—Å—Ç—ã —Å –≤—ã—Å–æ–∫–æ–π –æ—Ü–µ–Ω–∫–æ–π –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏'}",
                parse_mode=ParseMode.HTML
            )
    
    elif data.startswith("admin_approve_"):
        if Storage.is_admin(user_id):
            post_id = data.replace("admin_approve_", "")
            success = await AdminService.approve_post(context.bot, post_id, user_id)
            
            if success:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –ø–æ—Å—Ç—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
                pending_posts = AdminService.get_posts_for_review()
                
                if pending_posts:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç
                    await query.edit_message_text(
                        f"‚úÖ –ü–æ—Å—Ç {post_id} –æ–¥–æ–±—Ä–µ–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!\n\n"
                        f"üìù –û—Å—Ç–∞–ª–æ—Å—å –ø–æ—Å—Ç–æ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {len(pending_posts)}",
                        parse_mode=ParseMode.HTML
                    )
                    
                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
                    await asyncio.sleep(2)
                    
                    # –≠–º—É–ª–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–°–ª–µ–¥—É—é—â–∏–π"
                    query.data = "admin_next_post"
                    await callback_handler(update, context)
                else:
                    await query.edit_message_text(
                        f"‚úÖ –ü–æ—Å—Ç {post_id} –æ–¥–æ–±—Ä–µ–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!\n\n"
                        f"‚úÖ –í—Å–µ –ø–æ—Å—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!",
                        parse_mode=ParseMode.HTML
                    )
            else:
                await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞ {post_id}.")
    
    elif data.startswith("admin_reject_"):
        if Storage.is_admin(user_id):
            post_id = data.replace("admin_reject_", "")
            success = await AdminService.reject_post(context.bot, post_id, user_id, "–û—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
            
            if success:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –ø–æ—Å—Ç—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
                pending_posts = AdminService.get_posts_for_review()
                
                if pending_posts:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç
                    await query.edit_message_text(
                        f"‚ùå –ü–æ—Å—Ç {post_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω.\n\n"
                        f"üìù –û—Å—Ç–∞–ª–æ—Å—å –ø–æ—Å—Ç–æ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {len(pending_posts)}",
                        parse_mode=ParseMode.HTML
                    )
                    
                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
                    await asyncio.sleep(2)
                    
                    # –≠–º—É–ª–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–°–ª–µ–¥—É—é—â–∏–π"
                    query.data = "admin_next_post"
                    await callback_handler(update, context)
                else:
                    await query.edit_message_text(
                        f"‚ùå –ü–æ—Å—Ç {post_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω.\n\n"
                        f"‚úÖ –í—Å–µ –ø–æ—Å—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!",
                        parse_mode=ParseMode.HTML
                    )
            else:
                await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞ {post_id}.")
    
    elif data.startswith("admin_full_"):
        if Storage.is_admin(user_id):
            post_id = data.replace("admin_full_", "")
            post = Storage.get_pending_post(post_id)
            
            if post:
                full_text = (
                    f"üìÑ <b>–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞</b> (ID: {post.post_id})\n\n"
                    f"üë§ <b>–û—Ç:</b> {post.user_id}\n"
                    f"üìÖ <b>–í—Ä–µ–º—è:</b> {post.submitted_at.strftime('%d.%m.%Y %H:%M')}\n\n"
                    f"üìù <b>–¢–µ–∫—Å—Ç:</b>\n{post.message_text}"
                )
                
                keyboard = [
                    [
                        InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"admin_approve_{post.post_id}"),
                        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"admin_reject_{post.post_id}")
                    ]
                ]
                
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(full_text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)
            else:
                await query.edit_message_text("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    
    elif data == "admin_next_post":
        if Storage.is_admin(user_id):
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
            pending_posts = AdminService.get_posts_for_review()
            
            if len(pending_posts) <= 1:
                await query.edit_message_text(
                    "‚úÖ <b>–ë–æ–ª—å—à–µ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏</b>\n\n"
                    "–í—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.",
                    parse_mode=ParseMode.HTML
                )
                return
            
            # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π, —Ç–∞–∫ –∫–∞–∫ –æ–Ω —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω)
            next_post = pending_posts[1] if len(pending_posts) > 1 else pending_posts[0]
            
            post_text = (
                f"üìù <b>–ü–æ—Å—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏</b> (2 –∏–∑ {len(pending_posts)})\n\n"
                f"üìã <b>ID –ø–æ—Å—Ç–∞:</b> {next_post.post_id}\n"
                f"üë§ <b>–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {next_post.user_id}\n"
                f"üìÖ <b>–í—Ä–µ–º—è:</b> {next_post.submitted_at.strftime('%d.%m.%Y %H:%M')}\n"
            )
            
            if next_post.source_info:
                post_text += f"üìã <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> {next_post.source_info}\n"
            
            if next_post.importance_score:
                post_text += f"‚≠ê <b>–û—Ü–µ–Ω–∫–∞ –ò–ò:</b> {next_post.importance_score:.2f}\n"
            
            post_text += f"\nüìÑ <b>–¢–µ–∫—Å—Ç:</b>\n{next_post.message_text[:400]}"
            
            if len(next_post.message_text) > 400:
                post_text += "..."
            
            keyboard = [
                [
                    InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"admin_approve_{next_post.post_id}"),
                    InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"admin_reject_{next_post.post_id}")
                ],
                [
                    InlineKeyboardButton("üìÑ –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç", callback_data=f"admin_full_{next_post.post_id}"),
                    InlineKeyboardButton("‚è≠Ô∏è –°–ª–µ–¥—É—é—â–∏–π", callback_data="admin_next_post")
                ]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                post_text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.HTML
            )
    
    elif data == "admin_clear_channel":
        if Storage.is_admin(user_id):
            config = Storage.bot_config
            config.publish_channel_id = None
            config.publish_channel_username = None
            Storage.update_config(config)
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = Storage.get_user(user_id)
            user.current_state = None
            Storage.update_user(user)
            
            await query.edit_message_text("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—á–∏—â–µ–Ω—ã.")
    
    elif data == "refresh_channels":
        if Storage.is_admin(user_id):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º)
            user = Storage.get_user(user_id)
            user.current_state = "channel_setup"
            Storage.update_user(user)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –Ω–æ–≤—ã–º —Å–ø–∏—Å–∫–æ–º –∫–∞–Ω–∞–ª–æ–≤
            await query.message.delete()
            await show_channel_config(query, context)
    
    elif data.startswith("set_channel_"):
        if Storage.is_admin(user_id):
            channel_id = int(data.replace("set_channel_", ""))
            config = Storage.bot_config
            config.publish_channel_id = channel_id
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = Storage.get_user(user_id)
            user.current_state = None
            Storage.update_user(user)
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
                chat = await context.bot.get_chat(channel_id)
                if chat.username:
                    config.publish_channel_username = chat.username
                Storage.update_config(config)
                
                await query.edit_message_text(
                    f"‚úÖ <b>–ö–∞–Ω–∞–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
                    f"üìã <b>ID –∫–∞–Ω–∞–ª–∞:</b> {channel_id}\n"
                    f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {html.escape(chat.title)}\n"
                    f"üè∑Ô∏è <b>Username:</b> @{html.escape(chat.username) if chat.username else '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}",
                    parse_mode=ParseMode.HTML
                )
            except Exception as e:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                Storage.update_config(config)
                await query.edit_message_text(
                    f"‚ö†Ô∏è –ö–∞–Ω–∞–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: {html.escape(str(e))}\n\n"
                    f"üìã <b>ID –∫–∞–Ω–∞–ª–∞:</b> {channel_id}",
                    parse_mode=ParseMode.HTML
                )
    
    elif data.startswith("force_set_channel_"):
        if Storage.is_admin(user_id):
            channel_id = int(data.replace("force_set_channel_", ""))
            config = Storage.bot_config
            config.publish_channel_id = channel_id
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = Storage.get_user(user_id)
            user.current_state = None
            Storage.update_user(user)
            
            try:
                chat = await context.bot.get_chat(channel_id)
                if chat.username:
                    config.publish_channel_username = chat.username
                Storage.update_config(config)
                
                await query.edit_message_text(
                    f"‚úÖ <b>–ö–∞–Ω–∞–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ</b>\n\n"
                    f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {html.escape(chat.title)}\n"
                    f"üìã <b>ID:</b> {channel_id}\n\n"
                    f"‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –î–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤ –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                    parse_mode=ParseMode.HTML
                )
            except Exception as e:
                Storage.update_config(config)
                await query.edit_message_text(
                    f"‚úÖ <b>–ö–∞–Ω–∞–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω</b>\n\n"
                    f"üìã <b>ID:</b> {channel_id}\n"
                    f"‚ö†Ô∏è <b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:</b> {html.escape(str(e))}",
                    parse_mode=ParseMode.HTML
                )
    
    elif data == "cancel_channel_setup":
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = Storage.get_user(user_id)
        user.current_state = None
        Storage.update_user(user)
        
        await query.edit_message_text(
            "‚ùå <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n"
            "üí° –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –∫–∞–Ω–∞–ª –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            parse_mode=ParseMode.HTML
        )
    
    # Post submission callbacks
    elif data == "confirm_submit_text":
        pending_text = context.user_data.get('pending_post_text')
        if pending_text:
            try:
                post_id = await AdminService.submit_post_for_review(user_id, pending_text)
                
                # Notify admins
                post = Storage.get_pending_post(post_id)
                if post:
                    await AdminService.notify_admins_about_new_post(context.bot, post)
                
                await query.edit_message_text(
                    f"‚úÖ <b>–ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!</b>\n\n"
                    f"üìã <b>ID –ø–æ—Å—Ç–∞:</b> {post_id}\n"
                    f"‚è≥ <b>–°—Ç–∞—Ç—É—Å:</b> –û–∂–∏–¥–∞–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è",
                    parse_mode=ParseMode.HTML
                )
                
                # Clear stored text
                context.user_data.pop('pending_post_text', None)
                
            except Exception as e:
                await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–∞: {e}")
        else:
            await query.edit_message_text("‚ùå –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    
    elif data == "my_submissions":
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        all_posts = Storage.get_pending_posts()
        user_posts = [post for post in all_posts if post.user_id == user_id]
        
        if not user_posts:
            await query.edit_message_text(
                "üìÑ <b>–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤</b>\n\n"
                "–ù–∞–∂–º–∏—Ç–µ 'üìù –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ—Å—Ç' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.",
                parse_mode=ParseMode.HTML
            )
            return
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
        user_posts.sort(key=lambda x: x.submitted_at, reverse=True)
        
        text = "üìÑ <b>–í–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã:</b>\n\n"
        
        for post in user_posts[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
            status_emoji = {
                PostStatus.PENDING: "‚è≥",
                PostStatus.APPROVED: "‚úÖ",
                PostStatus.REJECTED: "‚ùå",
                PostStatus.PUBLISHED: "üì¢"
            }.get(post.status, "‚ùì")
            
            status_text = {
                PostStatus.PENDING: "–û–∂–∏–¥–∞–µ—Ç",
                PostStatus.APPROVED: "–û–¥–æ–±—Ä–µ–Ω",
                PostStatus.REJECTED: "–û—Ç–∫–ª–æ–Ω–µ–Ω",
                PostStatus.PUBLISHED: "–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω"
            }.get(post.status, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            
            text += f"{status_emoji} <b>{status_text}</b> - {post.submitted_at.strftime('%d.%m %H:%M')}\n"
            text += f"   {html.escape(post.message_text[:50])}{'...' if len(post.message_text) > 50 else ''}\n\n"
        
        if len(user_posts) > 10:
            text += f"<i>... –∏ –µ—â–µ {len(user_posts) - 10} –ø–æ—Å—Ç–æ–≤</i>"
        
        await query.edit_message_text(text, parse_mode=ParseMode.HTML)
    
    elif data == "cancel_submit":
        context.user_data.pop('pending_post_text', None)
        await query.edit_message_text("‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    
    # Confirmation callbacks
    elif data == "confirm_clear_monitoring":
        user.monitored_chats.clear()
        user.monitored_channels.clear()
        Storage.update_user(user)
        await query.edit_message_text("‚úÖ –í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—á–∏—â–µ–Ω—ã.")
    
    elif data == "confirm_clear_data":
        user.monitored_chats.clear()
        user.monitored_channels.clear()
        user.keywords.clear()
        user.exclude_keywords.clear()
        Storage.update_user(user)
        await query.edit_message_text("‚úÖ –í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã.")
    
    elif data == "confirm_clear_keywords":
        user.keywords.clear()
        user.exclude_keywords.clear()
        Storage.update_user(user)
        await query.edit_message_text("‚úÖ –í—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –æ—á–∏—â–µ–Ω—ã.")
    
    elif data == "cancel_clear":
        await query.edit_message_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    
    # Refresh callbacks
    elif data == "stats_refresh":
        await show_statistics_interface(update, context, user)
    
    elif data == "admin_stats_refresh":
        if Storage.is_admin(user_id):
            await show_admin_statistics(update, context)
    
    # Help callbacks
    elif data == "help_quickstart":
        await show_quickstart_help(query)
    
    elif data == "help_tips":
        await show_tips_help(query)
    
    elif data == "help_faq":
        await show_faq_help(query)
    
    # Monitoring callbacks for forwarded messages
    elif data.startswith("add_passive_monitoring_"):
        parts = data.replace("add_passive_monitoring_", "").split("_")
        chat_id = int(parts[0])
        source_type = parts[1]
        
        user = Storage.get_user(user_id)
        if source_type == "channel":
            user.monitored_channels.add(chat_id)
        else:
            user.monitored_chats.add(chat_id)
        
        Storage.update_user(user)
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å —Å–∏—Å—Ç–µ–º–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        if USERBOT_ENABLED:
            try:
                userbot = get_userbot()
                if userbot.is_running:
                    userbot.add_monitoring_source(chat_id)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å —Å–∏—Å—Ç–µ–º–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
        
        await query.edit_message_text(
            f"‚úÖ <b>–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥!</b>\n\n"
            f"üìä {'–ö–∞–Ω–∞–ª' if source_type == 'channel' else '–ß–∞—Ç'} (ID: {chat_id}) —Ç–µ–ø–µ—Ä—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è.\n\n"
            f"üí° –ü–µ—Ä–µ—Å—ã–ª–∞–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —ç—Ç–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.",
            parse_mode=ParseMode.HTML
        )
    
    elif data.startswith("analyze_once_"):
        parts = data.replace("analyze_once_", "").split("_")
        chat_id = int(parts[0])
        source_type = parts[1]
        
        # Get the forwarded message from context
        forwarded_msg = None
        if (update.effective_message and 
            hasattr(update.effective_message, 'reply_to_message') and 
            update.effective_message.reply_to_message):
            forwarded_msg = update.effective_message.reply_to_message
        
        if forwarded_msg:
            # Create message object for analysis
            message = Message(
                message_id=forwarded_msg.message_id,
                chat_id=chat_id,
                chat_title=f"{'–ö–∞–Ω–∞–ª' if source_type == 'channel' else '–ß–∞—Ç'} {chat_id}",
                text=forwarded_msg.text or forwarded_msg.caption or "",
                date=datetime.now(),
                is_channel=source_type == "channel"
            )
            
            # Analyze importance
            user = Storage.get_user(user_id)
            importance_score = evaluate_message_importance(message, user)
            
            result_text = (
                f"üîç <b>–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω</b>\n\n"
                f"üìä <b>–û—Ü–µ–Ω–∫–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏:</b> {importance_score:.2f}\n"
                f"üéØ <b>–ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥:</b> {Storage.bot_config.importance_threshold}\n\n"
                f"{'‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –≤–∞–∂–Ω–æ–µ!' if importance_score >= Storage.bot_config.importance_threshold else '‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç–∏–≥–∞–µ—Ç –ø–æ—Ä–æ–≥–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏.'}\n\n"
                f"üí° –ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥."
            )
            
            await query.edit_message_text(result_text, parse_mode=ParseMode.HTML)
        else:
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
    
    elif data == "skip_monitoring":
        await query.edit_message_text("‚ùå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–ø—É—â–µ–Ω.")
    
    elif data.startswith("submit_forwarded_"):
        message_id = data.replace("submit_forwarded_", "")
        
        # Get the original forwarded message
        try:
            # This is a simplified approach - in a real implementation,
            # you might want to store the message content temporarily
            await query.edit_message_text(
                "üìù <b>–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</b>\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ—Å—Ç' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é "
                "–∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /submit_post –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.",
                parse_mode=ParseMode.HTML
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ submit_forwarded: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–∞.")
    
    # Source removal callbacks
    elif data.startswith("remove_chat_"):
        chat_id = int(data.replace("remove_chat_", ""))
        user.monitored_chats.discard(chat_id)
        Storage.update_user(user)
        await query.edit_message_text(f"‚úÖ –ß–∞—Ç {chat_id} —É–¥–∞–ª–µ–Ω –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.")
    
    elif data.startswith("remove_channel_"):
        channel_id = int(data.replace("remove_channel_", ""))
        user.monitored_channels.discard(channel_id)
        Storage.update_user(user)
        await query.edit_message_text(f"‚úÖ –ö–∞–Ω–∞–ª {channel_id} —É–¥–∞–ª–µ–Ω –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.")
    
    # Keyword removal callbacks
    elif data.startswith("delete_keyword_"):
        parts = data.replace("delete_keyword_", "").split("_", 2)
        keyword_type = parts[0]
        keyword = "_".join(parts[1:])  # Rejoin in case keyword contains underscores
        
        if keyword_type == "important":
            if keyword in user.keywords:
                user.keywords.remove(keyword)
                Storage.update_user(user)
                await query.edit_message_text(f"‚úÖ –í–∞–∂–Ω–æ–µ —Å–ª–æ–≤–æ '{keyword}' —É–¥–∞–ª–µ–Ω–æ.")
            else:
                await query.edit_message_text(f"‚ùå –°–ª–æ–≤–æ '{keyword}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        else:
            if keyword in user.exclude_keywords:
                user.exclude_keywords.remove(keyword)
                Storage.update_user(user)
                await query.edit_message_text(f"‚úÖ –ò—Å–∫–ª—é—á–∞–µ–º–æ–µ —Å–ª–æ–≤–æ '{keyword}' —É–¥–∞–ª–µ–Ω–æ.")
            else:
                await query.edit_message_text(f"‚ùå –°–ª–æ–≤–æ '{keyword}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    
    # Channel suggestion callbacks
    elif data.startswith("add_suggested_channel_"):
        if Storage.is_admin(user_id):
            channel_text = data.replace("add_suggested_channel_", "")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
                chat = await context.bot.get_chat(channel_text)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                admin_user = Storage.get_user(user_id)
                if chat.type == 'channel':
                    admin_user.monitored_channels.add(chat.id)
                else:
                    admin_user.monitored_chats.add(chat.id)
                Storage.update_user(admin_user)
                
                await query.edit_message_text(
                    f"‚úÖ <b>–ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥!</b>\n\n"
                    f"üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {html.escape(chat.title)}\n"
                    f"üìã <b>ID:</b> {chat.id}\n"
                    f"üè∑Ô∏è <b>Username:</b> @{html.escape(chat.username) if chat.username else '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}",
                    parse_mode=ParseMode.HTML
                )
            except Exception as e:
                await query.edit_message_text(
                    f"‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª</b>\n\n"
                    f"üìã <b>–û—à–∏–±–∫–∞:</b> {html.escape(str(e))}\n\n"
                    f"üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞.",
                    parse_mode=ParseMode.HTML
                )
    
    elif data == "reject_channel_suggestion":
        if Storage.is_admin(user_id):
            await query.edit_message_text(
                "‚ùå <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ</b>\n\n"
                "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è.",
                parse_mode=ParseMode.HTML
            )

# ===========================================
# HELPER FUNCTIONS FOR CALLBACKS
# ===========================================

async def show_monitoring_list(query, context: CallbackContext, user: UserPreferences) -> None:
    """Show list of monitored sources."""
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≤ –æ–¥–∏–Ω –Ω–∞–±–æ—Ä
    all_sources = set()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    all_sources.update(user.monitored_chats)
    all_sources.update(user.monitored_channels)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –µ—Å–ª–∏ –æ–Ω–∞ –≤–∫–ª—é—á–µ–Ω–∞
    if USERBOT_ENABLED:
        userbot = get_userbot()
        if userbot.is_running:
            userbot_sources = userbot.get_monitored_sources()
            all_sources.update(userbot_sources)
    
    if not all_sources:
        await query.edit_message_text("‚ùå –ù–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ.")
        return
    
    list_text = "üìã <b>–°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:</b>\n\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≤ –µ–¥–∏–Ω–æ–º —Å–ø–∏—Å–∫–µ
    for source_id in sorted(all_sources):
        try:
            chat = await context.bot.get_chat(source_id)
            chat_title = html.escape(chat.title or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            chat_link = f"https://t.me/{chat.username}" if chat.username else ""
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            if chat.type == 'channel':
                icon = "üì¢"
            elif chat.type in ['group', 'supergroup']:
                icon = "üí¨"
            else:
                icon = "üë§"
            
            if chat_link:
                list_text += f"{icon} <a href='{chat_link}'>{chat_title}</a> ({source_id})\n"
            else:
                list_text += f"{icon} {chat_title} ({source_id})\n"
        except Exception:
            list_text += f"‚ùì –ò—Å—Ç–æ—á–Ω–∏–∫ ID: {source_id}\n"
    
    list_text += f"\nüìä <b>–í—Å–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:</b> {len(all_sources)}"
    
    await query.edit_message_text(list_text, parse_mode=ParseMode.HTML)

async def show_monitoring_remove(query, context: CallbackContext, user: UserPreferences) -> None:
    """Show interface to remove monitored sources."""
    if not user.monitored_chats and not user.monitored_channels:
        await query.edit_message_text("‚ùå –ù–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return
    
    keyboard = []
    
    # Add chat buttons
    for chat_id in user.monitored_chats:
        try:
            chat = await context.bot.get_chat(chat_id)
            chat_title = chat.title or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
            button_text = f"üí¨ {chat_title[:30]}{'...' if len(chat_title) > 30 else ''}"
        except Exception:
            button_text = f"üí¨ –ß–∞—Ç: {chat_id}"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"remove_chat_{chat_id}")])
    
    # Add channel buttons
    for channel_id in user.monitored_channels:
        try:
            channel = await context.bot.get_chat(channel_id)
            channel_title = channel.title or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
            button_text = f"üì¢ {channel_title[:30]}{'...' if len(channel_title) > 30 else ''}"
        except Exception:
            button_text = f"üì¢ –ö–∞–Ω–∞–ª: {channel_id}"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"remove_channel_{channel_id}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üóëÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:</b>",
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )

async def show_keywords_remove(query, context: CallbackContext, user: UserPreferences, keyword_type: str) -> None:
    """Show interface to remove keywords."""
    keywords_list = user.keywords if keyword_type == "important" else user.exclude_keywords
    type_name = "–≤–∞–∂–Ω—ã–µ" if keyword_type == "important" else "–∏—Å–∫–ª—é—á–∞–µ–º—ã–µ"
    
    if not keywords_list:
        await query.edit_message_text(f"‚ùå –ù–µ—Ç {type_name} —Å–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return
    
    keyboard = []
    for keyword in keywords_list[:20]:  # Limit to 20 to avoid keyboard size issues
        callback_data = f"delete_keyword_{keyword_type}_{keyword}"
        keyboard.append([InlineKeyboardButton(f"üóëÔ∏è {keyword}", callback_data=callback_data)])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"üóëÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ {type_name} —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:</b>",
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML
    )

# Help functions
async def show_quickstart_help(query) -> None:
    """Show quickstart help."""
    help_text = (
        "üöÄ <b>–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç</b>\n\n"
        "1Ô∏è‚É£ <b>–ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n"
        "–ü–µ—Ä–µ—à–ª–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –ª—é–±–æ–≥–æ —á–∞—Ç–∞ –∏–ª–∏ –∫–∞–Ω–∞–ª–∞ –±–æ—Ç—É\n\n"
        "2Ô∏è‚É£ <b>–î–æ–±–∞–≤—å—Ç–µ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥</b>\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ '–î–æ–±–∞–≤–∏—Ç—å –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥' –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–º –º–µ–Ω—é\n\n"
        "3Ô∏è‚É£ <b>–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã</b>\n"
        "‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: +–≤–∞–∂–Ω–æ\n"
        "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ—Ä–æ–≥ –≤–∞–∂–Ω–æ—Å—Ç–∏: 0.7\n\n"
        "4Ô∏è‚É£ <b>–ì–æ—Ç–æ–≤–æ!</b>\n"
        "–ü–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"
    )
    
    await query.edit_message_text(help_text, parse_mode=ParseMode.HTML)



async def show_tips_help(query) -> None:
    """Show tips help."""
    help_text = (
        "üí° <b>–ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã</b>\n\n"
        "üîë <b>–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:</b>\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã\n"
        "‚Ä¢ –î–æ–±–∞–≤–ª—è–π—Ç–µ —Å–∏–Ω–æ–Ω–∏–º—ã\n"
        "‚Ä¢ –ò—Å–∫–ª—é—á–∞–π—Ç–µ —à—É–º (+–≤–∞–∂–Ω–æ, -—Ä–µ–∫–ª–∞–º–∞)\n\n"
        "üìä <b>–ü–æ—Ä–æ–≥ –≤–∞–∂–Ω–æ—Å—Ç–∏:</b>\n"
        "‚Ä¢ 0.3-0.5: –¢–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ\n"
        "‚Ä¢ 0.5-0.7: –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º\n"
        "‚Ä¢ 0.7-0.9: –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
        "üìä <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:</b>\n"
        "‚Ä¢ –õ—É—á—à–∏–π —Å–ø–æ—Å–æ–± –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n"
        "‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç 24/7 –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n"
        "‚Ä¢ –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑\n\n"
        "üìù <b>–ü–æ—Å—Ç—ã:</b>\n"
        "‚Ä¢ –ü—Ä–µ–¥–ª–∞–≥–∞–π—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
        "‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –æ —Å—Ç–∞—Ç—É—Å–µ"
    )
    
    await query.edit_message_text(help_text, parse_mode=ParseMode.HTML)

async def show_faq_help(query) -> None:
    """Show FAQ help."""
    help_text = (
        "‚ùì <b>–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã</b>\n\n"
        "<b>Q: –ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª?</b>\n"
        "A: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ - –æ–Ω–∞ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ª—é–±—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏\n\n"
        "<b>Q: –ü–æ—á–µ–º—É –Ω–µ –ø—Ä–∏—Ö–æ–¥—è—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è?</b>\n"
        "A: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—Ä–æ–≥ –≤–∞–∂–Ω–æ—Å—Ç–∏ –∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞\n\n"
        "<b>Q: –ú–æ–∂–Ω–æ –ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –±–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞?</b>\n"
        "A: –î–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "<b>Q: –ö–∞–∫ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ—Å—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏?</b>\n"
        "A: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ—Å—Ç' –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /submit_post\n\n"
        "<b>Q: –ë–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—ã</b>\n"
        "A: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–º–µ—Å—Ç–æ –∫–æ–º–∞–Ω–¥ - —ç—Ç–æ —É–¥–æ–±–Ω–µ–µ\n\n"
        "<b>Q: –ö–∞–∫ —Å—Ç–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º?</b>\n"
        "A: –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ç–µ–∫—É—â–µ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
    )
    
    await query.edit_message_text(help_text, parse_mode=ParseMode.HTML)

# ===========================================
# MESSAGE HANDLING FOR FORWARDED MESSAGES
# ===========================================

async def handle_message_forwarded(update: Update, context: CallbackContext) -> None:
    """Handle incoming forwarded messages and monitoring."""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {update.message.text[:50] if update.message.text else '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞'}")
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ: {hasattr(update.message, 'forward_origin')}")
    logger.info(f"–¢–∏–ø —á–∞—Ç–∞: {update.message.chat.type if update.message.chat else '–ù–µ—Ç —á–∞—Ç–∞'}")
    logger.info(f"ID —á–∞—Ç–∞: {update.message.chat.id if update.message.chat else '–ù–µ—Ç ID'}")
    
    # Handle forwarded messages (PASSIVE MONITORING - no admin rights needed)
    if update.message and hasattr(update.message, 'forward_origin') and update.message.forward_origin:
        user_id = update.effective_user.id
        user = Storage.get_user(user_id)
        
        # Handle different types of forward origins
        chat_id = None
        chat_title = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫"
        is_channel = False
        
        # Check if forwarded from a chat/channel
        if hasattr(update.message.forward_origin, 'chat') and update.message.forward_origin.chat:
            chat = update.message.forward_origin.chat
            chat_id = chat.id
            chat_title = chat.title or f"–ß–∞—Ç {chat_id}"
            is_channel = chat.type == "channel"
        # Check if forwarded from a user (private chat)
        elif hasattr(update.message.forward_origin, 'sender_user') and update.message.forward_origin.sender_user:
            sender = update.message.forward_origin.sender_user
            chat_id = sender.id
            chat_title = f"–õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {sender.full_name}"
            is_channel = False
        # Check if forwarded from hidden user
        elif hasattr(update.message.forward_origin, 'sender_user_name'):
            chat_title = f"–ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ –æ—Ç {update.message.forward_origin.sender_user_name}"
            chat_id = hash(update.message.forward_origin.sender_user_name)  # Create pseudo-ID
            is_channel = False
        
        if chat_id:
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ {chat_title} (ID: {chat_id}, —Ç–∏–ø: {'–∫–∞–Ω–∞–ª' if is_channel else '—á–∞—Ç'})")
            
            # Check if this source is already being monitored (passive or active)
            is_already_monitored = False
            monitoring_type = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            if is_channel:
                is_already_monitored = chat_id in user.monitored_channels
                monitoring_type = "–∫–∞–Ω–∞–ª"
            else:
                is_already_monitored = chat_id in user.monitored_chats
                monitoring_type = "—á–∞—Ç"
            
            # Always analyze forwarded messages from monitored sources
            if is_already_monitored:
                # Process the message to analyze its importance
                message = Message(
                    message_id=update.message.message_id,
                    chat_id=chat_id,
                    chat_title=chat_title,
                    text=update.message.text or update.message.caption or "",
                    date=datetime.now(),
                    is_channel=is_channel
                )
                
                # Extract sender info if available
                if hasattr(update.message.forward_origin, 'sender_user') and update.message.forward_origin.sender_user:
                    message.sender_id = update.message.forward_origin.sender_user.id
                    message.sender_name = update.message.forward_origin.sender_user.full_name
                elif hasattr(update.message.forward_origin, 'sender_user_name'):
                    message.sender_name = update.message.forward_origin.sender_user_name
                
                logger.info(f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text[:50]}...")
                
                # Analyze message importance
                importance_score = evaluate_message_importance(message, user)
                message.importance_score = importance_score
                
                logger.info(f"–û—Ü–µ–Ω–∫–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏: {importance_score:.2f}, –ø–æ—Ä–æ–≥: {Storage.bot_config.importance_threshold}")
                
                # Check if the message is important enough to notify the user
                if importance_score >= Storage.bot_config.importance_threshold:
                    # Create keyboard with option to submit for publication
                    keyboard = [
                        [InlineKeyboardButton("üìù –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", callback_data=f"submit_forwarded_{update.message.message_id}")]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    
                    await update.message.reply_text(
                        f"üîî <b>–í–ê–ñ–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï –û–ë–ù–ê–†–£–ñ–ï–ù–û</b>\n\n"
                        f"{message.to_user_notification()}\n\n"
                        f"üìã <i>–ò—Å—Ç–æ—á–Ω–∏–∫: –ü–∞—Å—Å–∏–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (–ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)</i>\n\n"
                        f"üí° <b>–•–æ—Ç–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª–µ?</b>",
                        parse_mode=ParseMode.HTML,
                        reply_markup=reply_markup
                    )
                    
                    # Process important message for potential publication
                    try:
                        published = await AdminService.process_important_message(context.bot, message, importance_score)
                        if published:
                            logger.info(f"–í–∞–∂–Ω–æ–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ (–æ—Ü–µ–Ω–∫–∞: {importance_score:.2f})")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞–∂–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
                else:
                    # Also offer to submit less important messages
                    keyboard = [
                        [InlineKeyboardButton("üìù –í—Å—ë —Ä–∞–≤–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", callback_data=f"submit_forwarded_{update.message.message_id}")]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    
                    await update.message.reply_text(
                        f"üìä <b>–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω</b>\n\n"
                        f"–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ {chat_title} –∏–º–µ–µ—Ç –æ—Ü–µ–Ω–∫—É –≤–∞–∂–Ω–æ—Å—Ç–∏ <b>{importance_score:.2f}</b>, "
                                            f"—á—Ç–æ –Ω–∏–∂–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞ <b>{Storage.bot_config.importance_threshold}</b>.\n\n"
                    f"üí° –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏–∑–º–µ–Ω–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –≤–∞–∂–Ω–æ—Å—Ç–∏.",
                        parse_mode=ParseMode.HTML,
                        reply_markup=reply_markup
                    )
                return
            
            # Offer to add to passive monitoring
            keyboard = [
                [InlineKeyboardButton("‚úÖ –î–æ–±–∞–≤–∏—Ç—å –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", callback_data=f"add_passive_monitoring_{chat_id}_{'channel' if is_channel else 'chat'}")],
                [InlineKeyboardButton("üîç –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"analyze_once_{chat_id}_{'channel' if is_channel else 'chat'}")],
                [InlineKeyboardButton("‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_monitoring")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"üîç <b>–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫:</b> {chat_title}\n\n"
                f"üìä <b>–í–∞—Ä–∏–∞–Ω—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π:</b>\n\n"
                f"üü¢ <b>–î–æ–±–∞–≤–∏—Ç—å –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥</b>\n"
                f"‚Ä¢ –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n"
                f"‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö\n"
                f"‚Ä¢ –ù–µ —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
                f"üîç <b>–†–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑</b>\n"
                f"‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ç–æ–ª—å–∫–æ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
                f"‚Ä¢ –ë–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n\n"
                f"üí° <b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ:</b> –†–∞–±–æ—Ç–∞–µ—Ç —Å –ª—é–±—ã–º–∏ —á–∞—Ç–∞–º–∏ –∏ –∫–∞–Ω–∞–ª–∞–º–∏, "
                f"–¥–∞–∂–µ –∑–∞–∫—Ä—ã—Ç—ã–º–∏, –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞!",
                parse_mode=ParseMode.HTML,
                reply_markup=reply_markup
            )
            return
    
    # Handle direct messages from channels/groups (ACTIVE MONITORING - when bot is added)
    elif update.message and update.message.chat and update.message.chat.type in ["channel", "group", "supergroup"]:
        chat_id = update.message.chat.id
        chat_title = update.message.chat.title or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Ç"
        is_channel = update.message.chat.type == "channel"
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –ø—Ä—è–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ {'–∫–∞–Ω–∞–ª–∞' if is_channel else '—á–∞—Ç–∞'}: {chat_title} (ID: {chat_id})")
        
        # Check if this chat/channel is being monitored by any user
        if is_channel:
            monitored_users = Storage.get_users_monitoring_channel(chat_id)
        else:
            monitored_users = Storage.get_users_monitoring_chat(chat_id)
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –º–æ–Ω–∏—Ç–æ—Ä—è—â–∏–µ {'–∫–∞–Ω–∞–ª' if is_channel else '—á–∞—Ç'} {chat_id}: {len(monitored_users)}")
        
        if not monitored_users:
            logger.info(f"–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –º–æ–Ω–∏—Ç–æ—Ä—è—â–∏—Ö {'–∫–∞–Ω–∞–ª' if is_channel else '—á–∞—Ç'} {chat_id}")
            return
        
        # Create message object
        message = Message(
            message_id=update.message.message_id,
            chat_id=chat_id,
            chat_title=chat_title,
            text=update.message.text or update.message.caption or "",
            date=datetime.now(),
            is_channel=is_channel
        )
        
        if update.message.from_user:
            message.sender_id = update.message.from_user.id
            message.sender_name = update.message.from_user.full_name
        
        logger.info(f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {len(monitored_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {message.text[:50]}...")
        
        # Analyze message for each monitoring user and find highest importance score
        max_importance_score = 0
        notified_users = []
        
        for user in monitored_users:
            try:
                importance_score = evaluate_message_importance(message, user)
                message.importance_score = importance_score
                max_importance_score = max(max_importance_score, importance_score)
                
                logger.info(f"–û—Ü–µ–Ω–∫–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.user_id}: {importance_score:.2f}, –ø–æ—Ä–æ–≥: {Storage.bot_config.importance_threshold}")
                
                # If message is important enough, send notification to user
                if importance_score >= Storage.bot_config.importance_threshold:
                    notification_text = (
                        f"üîî <b>–í–ê–ñ–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï</b>\n\n"
                        f"{message.to_user_notification()}\n\n"
                        f"üìã <i>–ò—Å—Ç–æ—á–Ω–∏–∫: –ê–∫—Ç–∏–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (–±–æ—Ç –≤ —á–∞—Ç–µ/–∫–∞–Ω–∞–ª–µ)</i>"
                    )
                    
                    # Send notification to the user
                    await context.bot.send_message(
                        chat_id=user.user_id,
                        text=notification_text,
                        parse_mode=ParseMode.HTML
                    )
                    
                    notified_users.append(user.user_id)
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.user_id} "
                              f"–∏–∑ {chat_title} (–æ—Ü–µ–Ω–∫–∞: {importance_score:.2f})")
                else:
                    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–∞–∂–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.user_id} "
                              f"(–æ—Ü–µ–Ω–∫–∞: {importance_score:.2f}, –ø–æ—Ä–æ–≥: {Storage.bot_config.importance_threshold})")
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.user_id}: {e}")
        
        # If message was important for at least one user, consider it for channel publication
        if notified_users and max_importance_score > 0:
            message.importance_score = max_importance_score
            try:
                published = await AdminService.process_important_message(context.bot, message, max_importance_score)
                if published:
                    logger.info(f"–í–∞–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ {chat_title} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ (–æ—Ü–µ–Ω–∫–∞: {max_importance_score:.2f})")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞–∂–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")

# ===========================================
# MAIN FUNCTION
# ===========================================

def main() -> None:
    """Start the simplified bot."""
    import signal
    import sys
    
    # Load storage data
    Storage.load_from_file()
    logger.info("üìÇ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–æ–≤")
    
    # Create the Application and pass it your bot's token
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # Add minimal essential command handlers
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("menu", menu_command))
    application.add_handler(CommandHandler("admin", admin_command))
    application.add_handler(CommandHandler("submit_post", submit_post_command))
    
    # Add callback query handler
    application.add_handler(CallbackQueryHandler(callback_handler))
    
    # Add text message handler (handles reply buttons and text input)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_messages))
    
    # Add message handler for forwarded messages and monitoring
    application.add_handler(MessageHandler(filters.ALL & ~filters.TEXT, handle_message_forwarded))
    
    # Make application globally available for userbot
    globals()['application'] = application
    
    # Store userbot task for proper cleanup
    userbot_task = None
    
    # Signal handler for graceful shutdown
    def signal_handler(signum, frame):
        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        
        # Stop userbot if running
        if USERBOT_ENABLED and userbot_task:
            try:
                from userbot import stop_userbot
                asyncio.create_task(stop_userbot())
                logger.info("ü§ñ Userbot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ userbot: {e}")
        
        # Save data before exit
        try:
            Storage.save_to_file()
            logger.info("üìÇ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        
        sys.exit(0)
    
    # Register signal handlers
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    logger.info("üöÄ –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º userbot –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    if USERBOT_ENABLED:
        try:
            import asyncio
            from userbot import start_userbot
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ userbot
            async def start_userbot_task():
                try:
                    # –ü–µ—Ä–µ–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
                    await start_userbot(application.bot)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ userbot: {e}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º userbot –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
            loop = asyncio.get_event_loop()
            userbot_task = loop.create_task(start_userbot_task())
            logger.info("ü§ñ Userbot –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ...")
            
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å userbot: {e}")
    
    try:
        # Start the Bot
        application.run_polling()
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ –±–æ—Ç–∞: {e}")
    finally:
        # Cleanup
        if USERBOT_ENABLED and userbot_task:
            try:
                from userbot import stop_userbot
                asyncio.create_task(stop_userbot())
                logger.info("ü§ñ Userbot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ userbot: {e}")
        
        # Save data
        try:
            Storage.save_to_file()
            logger.info("üìÇ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        
        logger.info("–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")

if __name__ == '__main__':
    main()