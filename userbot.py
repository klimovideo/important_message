import os
import logging
import asyncio
from datetime import datetime
from pyrogram import Client, filters
from pyrogram.types import Message as PyrogramMessage
from pyrogram.errors import FloodWait, AuthKeyUnregistered, UserDeactivated

from models import Message, Storage, UserPreferences
from ai_service import evaluate_message_importance
from config import DEFAULT_IMPORTANCE_THRESHOLD

# Setup logging
logger = logging.getLogger(__name__)

class UserBot:
    """
    Userbot –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–æ–≤ –∏ —á–∞—Ç–æ–≤ –±–µ–∑ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ñ–µ–π–∫–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç Telegram –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã –∏ —á–∞—Ç—ã
    """
    
    def __init__(self):
        self.app = None
        self.is_running = False
        self.monitored_sources = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ ID –∫–∞–Ω–∞–ª–æ–≤/—á–∞—Ç–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        
        # –ü–æ–ª—É—á–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self.api_id = os.getenv("TELEGRAM_API_ID")
        self.api_hash = os.getenv("TELEGRAM_API_HASH")
        self.phone_number = os.getenv("TELEGRAM_PHONE")
        
        if not all([self.api_id, self.api_hash]):
            logger.warning("TELEGRAM_API_ID –∏–ª–∏ TELEGRAM_API_HASH –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. Userbot —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
            return
            
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Pyrogram
        self.app = Client(
            "userbot_session",
            api_id=int(self.api_id),
            api_hash=self.api_hash,
            phone_number=self.phone_number,
            workdir="."
        )
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not self.app:
            return
            
        @self.app.on_message(filters.all & ~filters.me)
        async def handle_userbot_message(client: Client, message: PyrogramMessage):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ userbot"""
            try:
                await self.process_message(message)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ userbot: {e}")
    
    async def process_message(self, message: PyrogramMessage):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç userbot"""
        if not message.chat:
            return
            
        chat_id = message.chat.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—Å—è –ª–∏ —ç—Ç–æ—Ç —á–∞—Ç/–∫–∞–Ω–∞–ª
        if chat_id not in self.monitored_sources:
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–Ω–∏—Ç–æ—Ä—è—Ç —ç—Ç–æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫
        if message.chat.type.name in ["CHANNEL", "SUPERGROUP"]:
            is_channel = message.chat.type.name == "CHANNEL"
            if is_channel:
                monitoring_users = Storage.get_users_monitoring_channel(chat_id)
            else:
                monitoring_users = Storage.get_users_monitoring_chat(chat_id)
        else:
            # –û–±—ã—á–Ω–∞—è –≥—Ä—É–ø–ø–∞
            monitoring_users = Storage.get_users_monitoring_chat(chat_id)
            is_channel = False
        
        if not monitoring_users:
            logger.info(f"–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –º–æ–Ω–∏—Ç–æ—Ä—è—â–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫ {chat_id}")
            return
            
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        chat_title = message.chat.title or message.chat.first_name or f"–ß–∞—Ç {chat_id}"
        
        msg = Message(
            message_id=message.id,
            chat_id=chat_id,
            chat_title=chat_title,
            text=message.text or message.caption or "",
            date=datetime.fromtimestamp(message.date),
            is_channel=is_channel
        )
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
        if message.from_user:
            msg.sender_id = message.from_user.id
            msg.sender_name = f"{message.from_user.first_name or ''} {message.from_user.last_name or ''}".strip()
        
        logger.info(f"Userbot –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ {chat_title}: {msg.text[:50]}...")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for user in monitoring_users:
            try:
                importance_score = await evaluate_message_importance(msg, user)
                msg.importance_score = importance_score
                
                logger.info(f"Userbot: –æ—Ü–µ–Ω–∫–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.user_id}: {importance_score:.2f}")
                
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–∞–∂–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
                if importance_score >= user.importance_threshold:
                    await self.send_notification_to_user(user.user_id, msg)
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è userbot –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.user_id}: {e}")
    
    async def send_notification_to_user(self, user_id: int, message: Message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞"""
        notification_text = (
            f"ü§ñ <b>USERBOT –£–í–ï–î–û–ú–õ–ï–ù–ò–ï</b>\n\n"
            f"üîî <b>–í–∞–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!</b>\n\n"
            f"{message.to_user_notification()}\n\n"
            f"üìã <i>–ò—Å—Ç–æ—á–Ω–∏–∫: –°–∫—Ä—ã—Ç—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (userbot)</i>\n"
            f"üîí <i>–ü–æ–ª–Ω–∞—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å –∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å</i>"
        )
        
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
            import bot
            if hasattr(bot, 'application') and bot.application:
                await bot.application.bot.send_message(
                    chat_id=user_id,
                    text=notification_text,
                    parse_mode='HTML'
                )
                logger.info(f"Userbot –æ—Ç–ø—Ä–∞–≤–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            else:
                logger.error("Application –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ bot –º–æ–¥—É–ª–µ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è userbot –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ userbot"""
        if not self.app:
            logger.warning("Userbot –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            return False
            
        try:
            await self.app.start()
            self.is_running = True
            logger.info("ü§ñ Userbot —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            me = await self.app.get_me()
            logger.info(f"Userbot —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫: {me.first_name} (@{me.username or '–±–µ–∑_username'})")
            
            return True
            
        except AuthKeyUnregistered:
            logger.error("‚ùå Userbot: —Å–µ—Å—Å–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.")
            return False
        except UserDeactivated:
            logger.error("‚ùå Userbot: –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
            return False
        except Exception as e:
            error_msg = str(e)
            if "KeyError: 0" in error_msg or error_msg == "0":
                logger.error("‚ùå Userbot: –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –í–æ–∑–º–æ–∂–Ω–æ, —Å–µ—Å—Å–∏—è –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞ –∏–ª–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–≤–µ—Ä–Ω—ã.")
                logger.info("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª userbot_session.session –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            elif "ConnectionResetError" in error_msg:
                logger.error("‚ùå Userbot: –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç–µ–≤—ã–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.")
            elif "FloodWait" in error_msg:
                logger.error("‚ùå Userbot: –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Telegram API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ userbot: {e}")
            return False
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ userbot"""
        if self.app and self.is_running:
            await self.app.stop()
            self.is_running = False
            logger.info("üõë Userbot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def reset_session(self):
        """–°–±—Ä–æ—Å —Å–µ—Å—Å–∏–∏ userbot (—É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏)"""
        try:
            session_file = "userbot_session.session"
            if os.path.exists(session_file):
                os.remove(session_file)
                logger.info("üîÑ –§–∞–π–ª —Å–µ—Å—Å–∏–∏ userbot —É–¥–∞–ª–µ–Ω. –ü—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.")
                return True
            else:
                logger.warning("‚ö†Ô∏è –§–∞–π–ª —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏: {e}")
            return False
    
    def _extract_username_from_link(self, link: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç username –∏–∑ —Å—Å—ã–ª–∫–∏ Telegram"""
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
        link = link.strip()
        
        # –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ username (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @)
        if link.startswith('@'):
            return link
        
        # –ï—Å–ª–∏ —ç—Ç–æ —Å—Å—ã–ª–∫–∞ t.me
        if 't.me/' in link:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∞—Å—Ç—å –ø–æ—Å–ª–µ t.me/
            username = link.split('t.me/')[-1]
            # –£–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ—Å–ª–µ ?
            username = username.split('?')[0]
            # –£–±–∏—Ä–∞–µ–º —Å–ª–µ—à–∏ –≤ –∫–æ–Ω—Ü–µ
            username = username.rstrip('/')
            return f"@{username}"
        
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–ª–Ω–∞—è —Å—Å—ã–ª–∫–∞ https://t.me/
        if link.startswith('https://t.me/'):
            username = link.replace('https://t.me/', '')
            username = username.split('?')[0]
            username = username.rstrip('/')
            return f"@{username}"
        
        # –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ username –±–µ–∑ @
        if not link.startswith('@') and not link.startswith('http'):
            return f"@{link}"
        
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        return link

    async def join_chat(self, chat_username_or_link: str) -> bool:
        """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —á–∞—Ç—É –∏–ª–∏ –∫–∞–Ω–∞–ª—É"""
        if not self.app or not self.is_running:
            return False
            
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º username –∏–∑ —Å—Å—ã–ª–∫–∏
            username = self._extract_username_from_link(chat_username_or_link)
            logger.info(f"Userbot –ø—ã—Ç–∞–µ—Ç—Å—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ {username}")
            
            # –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —á–∞—Ç—É/–∫–∞–Ω–∞–ª—É
            chat = await self.app.join_chat(username)
            chat_id = chat.id
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            self.monitored_sources.add(chat_id)
            
            logger.info(f"Userbot –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ {chat.title} (ID: {chat_id})")
            return True
            
        except FloodWait as e:
            logger.warning(f"Userbot: —Ñ–ª—É–¥-–ª–∏–º–∏—Ç –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ —á–∞—Ç—É. –û–∂–∏–¥–∞–Ω–∏–µ {e.x} —Å–µ–∫—É–Ω–¥.")
            await asyncio.sleep(e.x)
            return False
        except Exception as e:
            logger.error(f"Userbot: –æ—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —á–∞—Ç—É {chat_username_or_link}: {e}")
            return False
    
    async def leave_chat(self, chat_id: int) -> bool:
        """–ü–æ–∫–∏–¥–∞–Ω–∏–µ —á–∞—Ç–∞ –∏–ª–∏ –∫–∞–Ω–∞–ª–∞"""
        if not self.app or not self.is_running:
            return False
            
        try:
            await self.app.leave_chat(chat_id)
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            self.monitored_sources.discard(chat_id)
            
            logger.info(f"Userbot –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç {chat_id}")
            return True
            
        except Exception as e:
            logger.error(f"Userbot: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∏–¥–∞–Ω–∏–∏ —á–∞—Ç–∞ {chat_id}: {e}")
            return False
    
    def add_monitoring_source(self, chat_id: int):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        self.monitored_sources.add(chat_id)
        logger.info(f"Userbot –¥–æ–±–∞–≤–∏–ª –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏—Å—Ç–æ—á–Ω–∏–∫ {chat_id}")
    
    def remove_monitoring_source(self, chat_id: int):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.monitored_sources.discard(chat_id)
        logger.info(f"Userbot —É–¥–∞–ª–∏–ª –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏—Å—Ç–æ—á–Ω–∏–∫ {chat_id}")
    
    async def get_chat_info(self, chat_username_or_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ/–∫–∞–Ω–∞–ª–µ"""
        if not self.app or not self.is_running:
            return None
            
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º username –∏–∑ —Å—Å—ã–ª–∫–∏ –µ—Å–ª–∏ —ç—Ç–æ —Å—Å—ã–ª–∫–∞
            if isinstance(chat_username_or_id, str) and ('t.me/' in chat_username_or_id or chat_username_or_id.startswith('http')):
                chat_username_or_id = self._extract_username_from_link(chat_username_or_id)
            
            chat = await self.app.get_chat(chat_username_or_id)
            return {
                'id': chat.id,
                'title': chat.title,
                'username': chat.username,
                'type': chat.type.name,
                'members_count': getattr(chat, 'members_count', 0)
            }
        except Exception as e:
            logger.error(f"Userbot: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ {chat_username_or_id}: {e}")
            return None
    
    def get_monitored_sources(self) -> set:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–º—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        return self.monitored_sources.copy()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä userbot
userbot = UserBot()

async def start_userbot():
    """–ó–∞–ø—É—Å–∫ userbot"""
    return await userbot.start()

async def stop_userbot():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ userbot"""
    await userbot.stop()

def get_userbot() -> UserBot:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ userbot"""
    return userbot