#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —Å—Ö–µ–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –≤ PNG —Ñ–æ—Ä–º–∞—Ç–µ
"""

import os
import subprocess
import sys

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–æ–¥—É–ª–µ–π
try:
    from PIL import Image, ImageDraw, ImageFont
except ImportError:
    print("Installing Pillow...")
    subprocess.check_call([sys.executable, "-m", "pip", "install", "--user", "Pillow"])
    from PIL import Image, ImageDraw, ImageFont

def create_main_architecture_diagram():
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é —Å—Ö–µ–º—É –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –±–æ—Ç–∞"""
    # –†–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    width = 1600
    height = 2000
    
    # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    img = Image.new('RGB', (width, height), 'white')
    draw = ImageDraw.Draw(img)
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç
    try:
        title_font = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf", 36)
        header_font = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf", 24)
        normal_font = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf", 18)
        small_font = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf", 14)
    except:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à—Ä–∏—Ñ—Ç –µ—Å–ª–∏ —Å–∏—Å—Ç–µ–º–Ω—ã–π –Ω–µ –Ω–∞–π–¥–µ–Ω
        title_font = ImageFont.load_default()
        header_font = ImageFont.load_default()
        normal_font = ImageFont.load_default()
        small_font = ImageFont.load_default()
    
    # –¶–≤–µ—Ç–∞
    colors = {
        'primary': '#2196F3',
        'secondary': '#4CAF50',
        'warning': '#FF9800',
        'danger': '#F44336',
        'info': '#00BCD4',
        'dark': '#212121',
        'light': '#F5F5F5',
        'border': '#BDBDBD'
    }
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    draw.text((width//2, 40), "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –±–æ—Ç–∞ '–í–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è'", 
              fill=colors['dark'], font=title_font, anchor="mt")
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    y_offset = 120
    
    # 1. –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
    draw_component(draw, 100, y_offset, 300, 100, "main.py", 
                  ["–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞", "–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"],
                  colors['primary'], normal_font, small_font)
    
    # 2. –ì–ª–∞–≤–Ω—ã–π –±–æ—Ç
    draw_component(draw, 450, y_offset, 300, 100, "bot.py",
                  ["–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞", "–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é"],
                  colors['primary'], normal_font, small_font)
    
    # 3. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    draw_component(draw, 800, y_offset, 300, 100, "config.py",
                  ["–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"],
                  colors['info'], normal_font, small_font)
    
    # 4. –£—Ç–∏–ª–∏—Ç—ã
    draw_component(draw, 1150, y_offset, 300, 100, "utils.py",
                  ["–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ", "–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏"],
                  colors['info'], normal_font, small_font)
    
    # –°–µ—Ä–≤–∏—Å–Ω—ã–µ –º–æ–¥—É–ª–∏
    y_offset += 200
    
    # AI —Å–µ—Ä–≤–∏—Å
    draw_component(draw, 100, y_offset, 350, 120, "ai_service.py",
                  ["GigaChat –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è", "–û—Ü–µ–Ω–∫–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏ (0-1)", "–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞", "Fallback –ª–æ–≥–∏–∫–∞"],
                  colors['secondary'], normal_font, small_font)
    
    # Admin —Å–µ—Ä–≤–∏—Å
    draw_component(draw, 500, y_offset, 350, 120, "admin_service.py",
                  ["–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º–∏", "–ú–æ–¥–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤", "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–æ–≤", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏"],
                  colors['secondary'], normal_font, small_font)
    
    # Userbot
    draw_component(draw, 900, y_offset, 350, 120, "userbot.py",
                  ["Pyrogram –∫–ª–∏–µ–Ω—Ç", "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–∫—Ä—ã—Ç—ã—Ö –∫–∞–Ω–∞–ª–æ–≤", "–ü–µ—Ä–µ–¥–∞—á–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç—É"],
                  colors['secondary'], normal_font, small_font)
    
    # –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
    y_offset += 200
    
    draw_component(draw, 300, y_offset, 400, 150, "models.py",
                  ["UserPreferences", "BotConfig", "PendingPost", "Message", "Storage –∫–ª–∞—Å—Å"],
                  colors['warning'], normal_font, small_font)
    
    # JSON —Ñ–∞–π–ª—ã
    draw_component(draw, 800, y_offset, 400, 150, "JSON —Ö—Ä–∞–Ω–∏–ª–∏—â–µ",
                  ["bot_config.json", "user_preferences.json", "pending_posts.json", "userbot_session.session"],
                  colors['warning'], normal_font, small_font)
    
    # –°—Ç—Ä–µ–ª–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    # main.py -> bot.py
    draw_arrow(draw, 250, y_offset-380, 450, y_offset-380, colors['dark'])
    # bot.py -> services
    draw_arrow(draw, 600, y_offset-280, 275, y_offset-200, colors['dark'])
    draw_arrow(draw, 600, y_offset-280, 675, y_offset-200, colors['dark'])
    draw_arrow(draw, 600, y_offset-280, 1075, y_offset-200, colors['dark'])
    # services -> models
    draw_arrow(draw, 275, y_offset-80, 400, y_offset, colors['dark'])
    draw_arrow(draw, 675, y_offset-80, 500, y_offset, colors['dark'])
    # models -> json
    draw_arrow(draw, 700, y_offset+75, 800, y_offset+75, colors['dark'])
    
    # –í–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã
    y_offset += 250
    draw.text((width//2, y_offset), "–í–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã", 
              fill=colors['dark'], font=header_font, anchor="mt")
    
    y_offset += 50
    draw_component(draw, 300, y_offset, 300, 80, "Telegram API",
                  ["Bot API", "Webhook/Polling"],
                  colors['info'], normal_font, small_font)
    
    draw_component(draw, 700, y_offset, 300, 80, "GigaChat API",
                  ["AI –∞–Ω–∞–ª–∏–∑", "–û—Ü–µ–Ω–∫–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏"],
                  colors['info'], normal_font, small_font)
    
    # –¢–∏–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    y_offset += 150
    draw.text((width//2, y_offset), "–¢–∏–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", 
              fill=colors['dark'], font=header_font, anchor="mt")
    
    y_offset += 50
    draw_component(draw, 300, y_offset, 400, 120, "–û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                  ["üìù –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ—Å—Ç", "üì¢ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫–∞–Ω–∞–ª", "üì¨ –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞–Ω–∞–ª–∞ –≤–∞–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π", "‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞"],
                  colors['light'], normal_font, small_font, border_color=colors['border'])
    
    draw_component(draw, 800, y_offset, 400, 120, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
                  ["–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è +", "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–Ω–∞–ª–æ–≤", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞", "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏", "ü§ñ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ userbot"],
                  colors['light'], normal_font, small_font, border_color=colors['border'])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    img.save('bot_architecture.png', 'PNG', quality=95)
    print("‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: bot_architecture.png")

def create_message_flow_diagram():
    """–°–æ–∑–¥–∞–µ—Ç —Å—Ö–µ–º—É –ø–æ—Ç–æ–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    width = 1400
    height = 1800
    
    img = Image.new('RGB', (width, height), 'white')
    draw = ImageDraw.Draw(img)
    
    try:
        title_font = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf", 32)
        header_font = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf", 20)
        normal_font = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf", 16)
    except:
        title_font = ImageFont.load_default()
        header_font = ImageFont.load_default()
        normal_font = ImageFont.load_default()
    
    colors = {
        'start': '#4CAF50',
        'process': '#2196F3',
        'decision': '#FF9800',
        'end': '#F44336',
        'dark': '#212121'
    }
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    draw.text((width//2, 40), "–ê–ª–≥–æ—Ä–∏—Ç–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π", 
              fill=colors['dark'], font=title_font, anchor="mt")
    
    y = 120
    x_center = width // 2
    
    # –°—Ç–∞—Ä—Ç
    draw_ellipse(draw, x_center, y, 200, 60, "–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", colors['start'], normal_font)
    y += 100
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞
    draw_diamond(draw, x_center, y, 250, 100, "–¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è?", colors['decision'], normal_font)
    
    # –í–µ—Ç–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
    # –ö–æ–º–∞–Ω–¥–∞
    draw.text((x_center - 300, y), "–ö–æ–º–∞–Ω–¥–∞", fill=colors['dark'], font=normal_font, anchor="mm")
    draw_arrow(draw, x_center - 125, y, x_center - 300, y + 80, colors['dark'])
    draw_rectangle(draw, x_center - 300, y + 80, 200, 60, "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã", colors['process'], normal_font)
    
    # –¢–µ–∫—Å—Ç
    draw.text((x_center, y - 70), "–¢–µ–∫—Å—Ç", fill=colors['dark'], font=normal_font, anchor="mm")
    draw_arrow(draw, x_center, y - 50, x_center, y + 80, colors['dark'])
    draw_rectangle(draw, x_center, y + 80, 200, 60, "–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞", colors['process'], normal_font)
    
    # –ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ
    draw.text((x_center + 300, y), "–ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ", fill=colors['dark'], font=normal_font, anchor="mm")
    draw_arrow(draw, x_center + 125, y, x_center + 300, y + 80, colors['dark'])
    draw_rectangle(draw, x_center + 300, y + 80, 200, 60, "–ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞", colors['process'], normal_font)
    
    y += 200
    
    # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–µ—Ç–æ–∫
    draw_arrow(draw, x_center - 300, y - 60, x_center, y, colors['dark'])
    draw_arrow(draw, x_center, y - 60, x_center, y, colors['dark'])
    draw_arrow(draw, x_center + 300, y - 60, x_center, y, colors['dark'])
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    draw_diamond(draw, x_center, y, 250, 100, "–ò—Å—Ç–æ—á–Ω–∏–∫\n–º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—Å—è?", colors['decision'], normal_font)
    
    y += 150
    
    # –î–∞ - –∞–Ω–∞–ª–∏–∑ –≤–∞–∂–Ω–æ—Å—Ç–∏
    draw.text((x_center - 150, y - 50), "–î–∞", fill=colors['dark'], font=normal_font)
    draw_arrow(draw, x_center - 50, y - 50, x_center - 200, y + 50, colors['dark'])
    
    draw_rectangle(draw, x_center - 200, y + 50, 250, 80, "–ê–Ω–∞–ª–∏–∑ –≤–∞–∂–Ω–æ—Å—Ç–∏\n(GigaChat/Simple)", colors['process'], normal_font)
    
    y += 180
    
    # –û—Ü–µ–Ω–∫–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏
    draw_diamond(draw, x_center - 200, y, 200, 80, "–û—Ü–µ–Ω–∫–∞ > 0.7?", colors['decision'], normal_font)
    
    y += 120
    
    # –í–∞–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    draw.text((x_center - 350, y - 40), "–î–∞", fill=colors['dark'], font=normal_font)
    draw_arrow(draw, x_center - 300, y - 40, x_center - 400, y + 20, colors['dark'])
    
    draw_rectangle(draw, x_center - 400, y + 20, 200, 60, "–£–≤–µ–¥–æ–º–∏—Ç—å\n–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", colors['process'], normal_font)
    
    y += 120
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    draw_diamond(draw, x_center - 400, y, 200, 80, "–ê–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏—è\n–≤–∫–ª—é—á–µ–Ω–∞?", colors['decision'], normal_font)
    
    y += 120
    
    # –ü—É–±–ª–∏–∫–∞—Ü–∏—è
    draw.text((x_center - 550, y - 40), "–î–∞", fill=colors['dark'], font=normal_font)
    draw_rectangle(draw, x_center - 600, y + 20, 180, 60, "–ü—É–±–ª–∏–∫–∞—Ü–∏—è\n–≤ –∫–∞–Ω–∞–ª", colors['process'], normal_font)
    
    # –ú–æ–¥–µ—Ä–∞—Ü–∏—è
    draw.text((x_center - 250, y - 40), "–¢—Ä–µ–±—É–µ—Ç—Å—è\n–æ–¥–æ–±—Ä–µ–Ω–∏–µ", fill=colors['dark'], font=normal_font)
    draw_rectangle(draw, x_center - 200, y + 20, 180, 60, "–í –æ—á–µ—Ä–µ–¥—å\n–º–æ–¥–µ—Ä–∞—Ü–∏–∏", colors['process'], normal_font)
    
    # –ù–µ—Ç - –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥–æ–±–∞–≤–∏—Ç—å
    draw.text((x_center + 150, y - 450), "–ù–µ—Ç", fill=colors['dark'], font=normal_font)
    draw_arrow(draw, x_center + 50, y - 450, x_center + 200, y - 350, colors['dark'])
    draw_rectangle(draw, x_center + 200, y - 350, 200, 60, "–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å\n–¥–æ–±–∞–≤–∏—Ç—å", colors['process'], normal_font)
    
    # –ö–æ–Ω–µ—Ü
    y += 150
    draw_ellipse(draw, x_center, y, 150, 50, "–ö–æ–Ω–µ—Ü", colors['end'], normal_font)
    
    img.save('bot_message_flow.png', 'PNG', quality=95)
    print("‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: bot_message_flow.png")

def create_importance_algorithm_diagram():
    """–°–æ–∑–¥–∞–µ—Ç —Å—Ö–µ–º—É –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –æ—Ü–µ–Ω–∫–∏ –≤–∞–∂–Ω–æ—Å—Ç–∏"""
    width = 1200
    height = 1600
    
    img = Image.new('RGB', (width, height), 'white')
    draw = ImageDraw.Draw(img)
    
    try:
        title_font = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf", 30)
        normal_font = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf", 16)
        small_font = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf", 14)
    except:
        title_font = ImageFont.load_default()
        normal_font = ImageFont.load_default()
        small_font = ImageFont.load_default()
    
    colors = {
        'ai': '#4CAF50',
        'simple': '#FF9800',
        'process': '#2196F3',
        'modifier': '#9C27B0',
        'dark': '#212121'
    }
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    draw.text((width//2, 40), "–ê–ª–≥–æ—Ä–∏—Ç–º –æ—Ü–µ–Ω–∫–∏ –≤–∞–∂–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–π", 
              fill=colors['dark'], font=title_font, anchor="mt")
    
    y = 120
    x_center = width // 2
    
    # –í—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    draw_rectangle(draw, x_center, y, 300, 80, "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n+ –ö–æ–Ω—Ç–µ–∫—Å—Ç\n+ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è", colors['process'], normal_font)
    
    y += 120
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ GigaChat
    draw_diamond(draw, x_center, y, 200, 80, "GigaChat\n–¥–æ—Å—Ç—É–ø–µ–Ω?", colors['process'], normal_font)
    
    # AI –≤–µ—Ç–∫–∞
    y += 120
    draw.text((x_center - 200, y - 40), "–î–∞", fill=colors['dark'], font=normal_font)
    draw_arrow(draw, x_center - 100, y - 40, x_center - 250, y, colors['dark'])
    
    draw_rectangle(draw, x_center - 250, y, 200, 150, 
                   "GigaChat AI\n\n‚Ä¢ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞\n‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞\n‚Ä¢ –û—Ü–µ–Ω–∫–∞ 0.0-1.0\n‚Ä¢ –û–±—ä—è—Å–Ω–µ–Ω–∏–µ", 
                   colors['ai'], small_font)
    
    # Simple –≤–µ—Ç–∫–∞
    draw.text((x_center + 200, y - 40), "–ù–µ—Ç", fill=colors['dark'], font=normal_font)
    draw_arrow(draw, x_center + 100, y - 40, x_center + 250, y, colors['dark'])
    
    draw_rectangle(draw, x_center + 250, y, 200, 150,
                   "–ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑\n\n‚Ä¢ –ü–æ–∏—Å–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã\n‚Ä¢ –ë–∞–∑–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞\n‚Ä¢ –û—Ü–µ–Ω–∫–∞ 0.0-1.0",
                   colors['simple'], small_font)
    
    # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ
    y += 200
    draw_arrow(draw, x_center - 250, y - 50, x_center, y, colors['dark'])
    draw_arrow(draw, x_center + 250, y - 50, x_center, y, colors['dark'])
    
    draw_rectangle(draw, x_center, y, 200, 60, "–ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞", colors['process'], normal_font)
    
    # –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
    y += 100
    draw.text((x_center, y), "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤:", fill=colors['dark'], font=normal_font, anchor="mt")
    
    y += 40
    
    # Boost keywords
    draw_rectangle(draw, x_center - 300, y, 180, 80,
                   "Boost keywords\n\n'–≤–∞–∂–Ω–æ', '—Å—Ä–æ—á–Ω–æ'\n+0.2", 
                   colors['modifier'], small_font)
    
    # Reduce keywords
    draw_rectangle(draw, x_center - 90, y, 180, 80,
                   "Reduce keywords\n\n'—Ä–µ–∫–ª–∞–º–∞', '—Å–ø–∞–º'\n-0.2",
                   colors['modifier'], small_font)
    
    # Important sources
    draw_rectangle(draw, x_center + 120, y, 180, 80,
                   "–í–∞–∂–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏\n\n–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∫–∞–Ω–∞–ª—ã\n+0.1",
                   colors['modifier'], small_font)
    
    # –°—Ç—Ä–µ–ª–∫–∏ –æ—Ç –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤
    y += 120
    draw_arrow(draw, x_center - 210, y - 40, x_center, y, colors['dark'])
    draw_arrow(draw, x_center, y - 40, x_center, y, colors['dark'])
    draw_arrow(draw, x_center + 210, y - 40, x_center, y, colors['dark'])
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
    draw_rectangle(draw, x_center, y, 250, 80,
                   "–§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞\n\n–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è 0.0-1.0",
                   colors['process'], normal_font)
    
    y += 120
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç
    draw_ellipse(draw, x_center, y, 300, 80,
                 "–û—Ü–µ–Ω–∫–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏\n0.0 (–Ω–µ –≤–∞–∂–Ω–æ) - 1.0 (–∫—Ä–∏—Ç–∏—á–Ω–æ)",
                 colors['ai'], normal_font)
    
    # –õ–µ–≥–µ–Ω–¥–∞
    y += 150
    draw.text((100, y), "–®–∫–∞–ª–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏:", fill=colors['dark'], font=normal_font)
    y += 30
    
    importance_levels = [
        ("0.0-0.2", "–ù–µ–≤–∞–∂–Ω—ã–µ (—Å–ø–∞–º, —Ñ–ª—É–¥)", "#F44336"),
        ("0.3-0.4", "–ú–∞–ª–æ–≤–∞–∂–Ω—ã–µ (–æ–±—â–∏–µ —Ç–µ–º—ã)", "#FF9800"),
        ("0.5-0.6", "–£–º–µ—Ä–µ–Ω–Ω–æ –≤–∞–∂–Ω—ã–µ (–∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)", "#FFC107"),
        ("0.7-0.8", "–í–∞–∂–Ω—ã–µ (—Ä–∞–±–æ—á–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –ø–ª–∞–Ω—ã)", "#4CAF50"),
        ("0.9-1.0", "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ (—Å—Ä–æ—á–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)", "#2196F3")
    ]
    
    for level, desc, color in importance_levels:
        draw.rectangle([80, y, 120, y + 20], fill=color)
        draw.text((130, y + 10), f"{level}: {desc}", fill=colors['dark'], font=small_font, anchor="lm")
        y += 25
    
    img.save('bot_importance_algorithm.png', 'PNG', quality=95)
    print("‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: bot_importance_algorithm.png")

def create_user_journey_diagram():
    """–°–æ–∑–¥–∞–µ—Ç —Å—Ö–µ–º—É –ø—É—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    width = 1400
    height = 1200
    
    img = Image.new('RGB', (width, height), 'white')
    draw = ImageDraw.Draw(img)
    
    try:
        title_font = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf", 30)
        header_font = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf", 20)
        normal_font = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf", 16)
    except:
        title_font = ImageFont.load_default()
        header_font = ImageFont.load_default()
        normal_font = ImageFont.load_default()
    
    colors = {
        'user': '#4CAF50',
        'admin': '#2196F3',
        'action': '#FF9800',
        'dark': '#212121'
    }
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    draw.text((width//2, 40), "–ü—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–æ—Ç–µ", 
              fill=colors['dark'], font=title_font, anchor="mt")
    
    # –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    y = 120
    draw.text((300, y), "–û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", fill=colors['dark'], font=header_font, anchor="mt")
    
    y += 50
    steps = [
        "1. –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (/start)",
        "2. –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é",
        "3. –í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è:",
        "   ‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ—Å—Ç",
        "   ‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∫–∞–Ω–∞–ª",
        "   ‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞–Ω–∞–ª–∞ –≤–∞–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π",
        "4. –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
        "5. –ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"
    ]
    
    for i, step in enumerate(steps):
        draw_rectangle(draw, 300, y + i * 80, 400, 60, step, colors['user'], normal_font)
        if i < len(steps) - 1:
            draw_arrow(draw, 300, y + i * 80 + 30, 300, y + (i + 1) * 80 - 30, colors['dark'])
    
    # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    y = 120
    draw.text((900, y), "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", fill=colors['dark'], font=header_font, anchor="mt")
    
    y += 50
    admin_steps = [
        "1. –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è +",
        "2. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º:",
        "   ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤",
        "   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ userbot",
        "3. –ú–æ–¥–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤:",
        "   ‚Ä¢ –û–¥–æ–±—Ä–µ–Ω–∏–µ/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ",
        "   ‚Ä¢ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –∫–∞–Ω–∞–ª",
        "4. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:",
        "   ‚Ä¢ –ü–æ—Ä–æ–≥ –≤–∞–∂–Ω–æ—Å—Ç–∏",
        "   ‚Ä¢ –ö—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∫–∏",
        "5. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏"
    ]
    
    for i, step in enumerate(admin_steps):
        draw_rectangle(draw, 900, y + i * 80, 400, 60, step, colors['admin'], normal_font)
        if i < len(admin_steps) - 1:
            draw_arrow(draw, 900, y + i * 80 + 30, 900, y + (i + 1) * 80 - 30, colors['dark'])
    
    img.save('bot_user_journey.png', 'PNG', quality=95)
    print("‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: bot_user_journey.png")

def create_monitoring_types_diagram():
    """–°–æ–∑–¥–∞–µ—Ç —Å—Ö–µ–º—É —Ç–∏–ø–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    width = 1500
    height = 1000
    
    img = Image.new('RGB', (width, height), 'white')
    draw = ImageDraw.Draw(img)
    
    try:
        title_font = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf", 32)
        header_font = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf", 22)
        normal_font = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf", 16)
        small_font = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf", 14)
    except:
        title_font = ImageFont.load_default()
        header_font = ImageFont.load_default()
        normal_font = ImageFont.load_default()
        small_font = ImageFont.load_default()
    
    colors = {
        'active': '#4CAF50',
        'passive': '#FF9800',
        'userbot': '#2196F3',
        'dark': '#212121',
        'light': '#F5F5F5'
    }
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    draw.text((width//2, 40), "–¢–∏–ø—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π", 
              fill=colors['dark'], font=title_font, anchor="mt")
    
    y = 120
    
    # –ê–∫—Ç–∏–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    x = 150
    draw.text((x + 150, y), "–ê–∫—Ç–∏–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", fill=colors['dark'], font=header_font, anchor="mt")
    y += 40
    
    draw_rounded_rectangle(draw, x, y, 300, 300, colors['active'], 20)
    draw.text((x + 150, y + 20), "–ë–æ—Ç-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", fill='white', font=normal_font, anchor="mt")
    
    features = [
        "‚úì –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π 24/7",
        "‚úì –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞",
        "‚úì –ù–µ —Ç—Ä–µ–±—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π",
        "",
        "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:",
        "‚Ä¢ –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–æ–º",
        "‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ø—É–±–ª–∏—á–Ω—ã—Ö",
        "",
        "–ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è:",
        "‚Ä¢ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤",
        "‚Ä¢ –ù–æ–≤–æ—Å—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"
    ]
    
    y_text = y + 60
    for feature in features:
        draw.text((x + 20, y_text), feature, fill='white', font=small_font)
        y_text += 20
    
    # –ü–∞—Å—Å–∏–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    x = 550
    draw.text((x + 150, y - 40), "–ü–∞—Å—Å–∏–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", fill=colors['dark'], font=header_font, anchor="mt")
    
    draw_rounded_rectangle(draw, x, y, 300, 300, colors['passive'], 20)
    draw.text((x + 150, y + 20), "–ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π", fill='white', font=normal_font, anchor="mt")
    
    features = [
        "‚úì –†–∞–±–æ—Ç–∞–µ—Ç –≤–µ–∑–¥–µ",
        "‚úì –ù–µ —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–∞–≤",
        "‚úì –ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å",
        "",
        "–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:",
        "‚Ä¢ –†—É—á–Ω–∞—è –ø–µ—Ä–µ—Å—ã–ª–∫–∞",
        "‚Ä¢ –ê–Ω–∞–ª–∏–∑ –ø–æ –∑–∞–ø—Ä–æ—Å—É",
        "",
        "–ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è:",
        "‚Ä¢ –ó–∞–∫—Ä—ã—Ç—ã—Ö –∫–∞–Ω–∞–ª–æ–≤",
        "‚Ä¢ –†–∞–∑–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"
    ]
    
    y_text = y + 60
    for feature in features:
        draw.text((x + 20, y_text), feature, fill='white', font=small_font)
        y_text += 20
    
    # Userbot –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    x = 950
    draw.text((x + 150, y - 40), "Userbot –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", fill=colors['dark'], font=header_font, anchor="mt")
    
    draw_rounded_rectangle(draw, x, y, 300, 300, colors['userbot'], 20)
    draw.text((x + 150, y + 20), "–§–µ–π–∫–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç", fill='white', font=normal_font, anchor="mt")
    
    features = [
        "‚úì –î–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç—ã–º",
        "‚úì –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π",
        "‚úì –ö–∞–∫ –æ–±—ã—á–Ω—ã–π —é–∑–µ—Ä",
        "",
        "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:",
        "‚Ä¢ API ID –∏ Hash",
        "‚Ä¢ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
        "",
        "–ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è:",
        "‚Ä¢ –ü—Ä–∏–≤–∞—Ç–Ω—ã—Ö –≥—Ä—É–ø–ø",
        "‚Ä¢ –ó–∞–∫—Ä—ã—Ç—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"
    ]
    
    y_text = y + 60
    for feature in features:
        draw.text((x + 20, y_text), feature, fill='white', font=small_font)
        y_text += 20
    
    # –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
    y += 350
    draw.text((width//2, y), "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤", fill=colors['dark'], font=header_font, anchor="mt")
    
    y += 40
    table_x = 200
    table_width = 1100
    row_height = 40
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    headers = ["–ü–∞—Ä–∞–º–µ—Ç—Ä", "–ê–∫—Ç–∏–≤–Ω—ã–π", "–ü–∞—Å—Å–∏–≤–Ω—ã–π", "Userbot"]
    col_widths = [300, 267, 267, 266]
    
    x_pos = table_x
    for i, (header, col_width) in enumerate(zip(headers, col_widths)):
        draw.rectangle([x_pos, y, x_pos + col_width, y + row_height], fill=colors['dark'])
        draw.text((x_pos + col_width//2, y + row_height//2), header, fill='white', font=normal_font, anchor="mm")
        x_pos += col_width
    
    # –°—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    rows = [
        ["–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è", "–ü–æ–ª–Ω–∞—è", "–†—É—á–Ω–∞—è", "–ü–æ–ª–Ω–∞—è"],
        ["–¢—Ä–µ–±—É–µ—Ç –ø—Ä–∞–≤", "–î–∞ (–∞–¥–º–∏–Ω)", "–ù–µ—Ç", "–ù–µ—Ç"],
        ["–ó–∞–∫—Ä—ã—Ç—ã–µ –∫–∞–Ω–∞–ª—ã", "–ù–µ—Ç", "–î–∞", "–î–∞"],
        ["–ù–∞—Å—Ç—Ä–æ–π–∫–∞", "–ü—Ä–æ—Å—Ç–∞—è", "–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è", "–°–ª–æ–∂–Ω–∞—è"],
        ["–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å", "–í—ã—Å–æ–∫–∞—è", "–í—ã—Å–æ–∫–∞—è", "–°—Ä–µ–¥–Ω—è—è"]
    ]
    
    y += row_height
    for row_data in rows:
        x_pos = table_x
        for i, (cell, col_width) in enumerate(zip(row_data, col_widths)):
            color = colors['light'] if i == 0 else 'white'
            draw.rectangle([x_pos, y, x_pos + col_width, y + row_height], fill=color, outline=colors['dark'])
            draw.text((x_pos + col_width//2, y + row_height//2), cell, fill=colors['dark'], font=small_font, anchor="mm")
            x_pos += col_width
        y += row_height
    
    img.save('bot_monitoring_types.png', 'PNG', quality=95)
    print("‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: bot_monitoring_types.png")

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è
def draw_rectangle(draw, x, y, width, height, text, color, font):
    """–†–∏—Å—É–µ—Ç –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ —Å —Ç–µ–∫—Å—Ç–æ–º"""
    x1, y1 = x - width//2, y - height//2
    x2, y2 = x + width//2, y + height//2
    draw.rectangle([x1, y1, x2, y2], fill=color, outline='black', width=2)
    
    # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏
    lines = text.split('\n')
    line_height = 20
    total_height = len(lines) * line_height
    start_y = y - total_height // 2
    
    for i, line in enumerate(lines):
        draw.text((x, start_y + i * line_height), line, fill='white', font=font, anchor="mt")

def draw_rounded_rectangle(draw, x, y, width, height, color, radius):
    """–†–∏—Å—É–µ—Ç —Å–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫"""
    draw.rounded_rectangle([x, y, x + width, y + height], radius=radius, fill=color, outline='black', width=2)

def draw_component(draw, x, y, width, height, title, items, color, title_font, item_font, border_color='black'):
    """–†–∏—Å—É–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏ —Å–ø–∏—Å–∫–æ–º"""
    # –§–æ–Ω
    draw.rectangle([x, y, x + width, y + height], fill=color, outline=border_color, width=2)
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    draw.text((x + width//2, y + 20), title, fill='white', font=title_font, anchor="mt")
    
    # –≠–ª–µ–º–µ–Ω—Ç—ã
    item_y = y + 45
    for item in items:
        draw.text((x + 10, item_y), f"‚Ä¢ {item}", fill='white', font=item_font)
        item_y += 18

def draw_ellipse(draw, x, y, width, height, text, color, font):
    """–†–∏—Å—É–µ—Ç —ç–ª–ª–∏–ø—Å —Å —Ç–µ–∫—Å—Ç–æ–º"""
    x1, y1 = x - width//2, y - height//2
    x2, y2 = x + width//2, y + height//2
    draw.ellipse([x1, y1, x2, y2], fill=color, outline='black', width=2)
    
    # –¢–µ–∫—Å—Ç
    lines = text.split('\n')
    if len(lines) == 1:
        draw.text((x, y), text, fill='white', font=font, anchor="mm")
    else:
        line_height = 20
        total_height = len(lines) * line_height
        start_y = y - total_height // 2
        for i, line in enumerate(lines):
            draw.text((x, start_y + i * line_height + line_height//2), line, fill='white', font=font, anchor="mm")

def draw_diamond(draw, x, y, width, height, text, color, font):
    """–†–∏—Å—É–µ—Ç —Ä–æ–º–± —Å —Ç–µ–∫—Å—Ç–æ–º"""
    points = [
        (x, y - height//2),  # –≤–µ—Ä—Ö
        (x + width//2, y),   # –ø—Ä–∞–≤–æ
        (x, y + height//2),  # –Ω–∏–∑
        (x - width//2, y)    # –ª–µ–≤–æ
    ]
    draw.polygon(points, fill=color, outline='black', width=2)
    
    # –¢–µ–∫—Å—Ç
    lines = text.split('\n')
    if len(lines) == 1:
        draw.text((x, y), text, fill='white', font=font, anchor="mm")
    else:
        line_height = 20
        total_height = len(lines) * line_height
        start_y = y - total_height // 2
        for i, line in enumerate(lines):
            draw.text((x, start_y + i * line_height + line_height//2), line, fill='white', font=font, anchor="mm")

def draw_arrow(draw, x1, y1, x2, y2, color):
    """–†–∏—Å—É–µ—Ç —Å—Ç—Ä–µ–ª–∫—É"""
    draw.line([(x1, y1), (x2, y2)], fill=color, width=2)
    
    # –ù–∞–∫–æ–Ω–µ—á–Ω–∏–∫ —Å—Ç—Ä–µ–ª–∫–∏
    import math
    angle = math.atan2(y2 - y1, x2 - x1)
    arrow_length = 15
    arrow_angle = math.pi / 6
    
    x3 = x2 - arrow_length * math.cos(angle - arrow_angle)
    y3 = y2 - arrow_length * math.sin(angle - arrow_angle)
    x4 = x2 - arrow_length * math.cos(angle + arrow_angle)
    y4 = y2 - arrow_length * math.sin(angle + arrow_angle)
    
    draw.polygon([(x2, y2), (x3, y3), (x4, y4)], fill=color)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üé® –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")
    
    # –°–æ–∑–¥–∞–µ–º –≤—Å–µ –¥–∏–∞–≥—Ä–∞–º–º—ã
    create_main_architecture_diagram()
    create_message_flow_diagram()
    create_importance_algorithm_diagram()
    create_user_journey_diagram()
    create_monitoring_types_diagram()
    
    print("\n‚úÖ –í—Å–µ –¥–∏–∞–≥—Ä–∞–º–º—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")
    print("\nüìÅ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
    print("   ‚Ä¢ bot_architecture.png - –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–∏—Å—Ç–µ–º—ã")
    print("   ‚Ä¢ bot_message_flow.png - –ü–æ—Ç–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π")
    print("   ‚Ä¢ bot_importance_algorithm.png - –ê–ª–≥–æ—Ä–∏—Ç–º –æ—Ü–µ–Ω–∫–∏ –≤–∞–∂–Ω–æ—Å—Ç–∏")
    print("   ‚Ä¢ bot_user_journey.png - –ü—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    print("   ‚Ä¢ bot_monitoring_types.png - –¢–∏–ø—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")

if __name__ == "__main__":
    main()