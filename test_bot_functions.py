#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞
"""

import asyncio
import sys
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, '.')

from models import Storage, Message, UserPreferences, PostStatus
from ai_service import evaluate_message_importance
from admin_service import AdminService
from config import TELEGRAM_TOKEN, DEFAULT_IMPORTANCE_THRESHOLD

def print_test_header(test_name):
    """–ü–µ—á–∞—Ç–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–µ—Å—Ç–∞"""
    print(f"\n{'=' * 60}")
    print(f"–¢–ï–°–¢: {test_name}")
    print(f"{'=' * 60}")

def print_result(test_name, success, details=""):
    """–ü–µ—á–∞—Ç–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞"""
    status = "‚úÖ –£–°–ü–ï–®–ù–û" if success else "‚ùå –û–®–ò–ë–ö–ê"
    print(f"{test_name}: {status}")
    if details:
        print(f"  –î–µ—Ç–∞–ª–∏: {details}")

async def test_storage():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π —Ö—Ä–∞–Ω–µ–Ω–∏—è"""
    print_test_header("–§—É–Ω–∫—Ü–∏–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    Storage.load_from_file()
    print_result("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö", True)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config = Storage.bot_config
    print_result("–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", config is not None, 
                f"–ü–æ—Ä–æ–≥: {config.importance_threshold}, –ê–¥–º–∏–Ω–æ–≤: {len(config.admin_ids)}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = Storage.get_all_users()
    print_result("–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", True, f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
    
    return True

async def test_ai_evaluation():
    """–¢–µ—Å—Ç –æ—Ü–µ–Ω–∫–∏ –≤–∞–∂–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    print_test_header("–û—Ü–µ–Ω–∫–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ò–ò")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    test_message = Message(
        message_id=1,
        chat_id=-1001234567890,
        chat_title="–¢–µ—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª",
        text="–°—Ä–æ—á–Ω–æ! –í–∞–∂–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞ —Å–µ–≥–æ–¥–Ω—è –≤ 15:00. –ù–µ –æ–ø–∞–∑–¥—ã–≤–∞–π—Ç–µ!",
        date=datetime.now(),
        is_channel=True
    )
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    test_user = UserPreferences(user_id=123456789)
    test_user.keywords = ["–≤—Å—Ç—Ä–µ—á–∞", "–≤–∞–∂–Ω–æ"]
    
    try:
        # –û—Ü–µ–Ω–∏–≤–∞–µ–º –≤–∞–∂–Ω–æ—Å—Ç—å
        score = evaluate_message_importance(test_message, test_user)
        print_result("–û—Ü–µ–Ω–∫–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏", True, f"–û—Ü–µ–Ω–∫–∞: {score:.2f}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥
        threshold = Storage.bot_config.importance_threshold
        is_important = score >= threshold
        print_result("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä–æ–≥–∞", True, 
                    f"–í–∞–∂–Ω–æ: {'–î–∞' if is_important else '–ù–µ—Ç'} (–ø–æ—Ä–æ–≥: {threshold})")
        
        return True
    except Exception as e:
        print_result("–û—Ü–µ–Ω–∫–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏", False, str(e))
        return False

def test_admin_functions():
    """–¢–µ—Å—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    print_test_header("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏")
    
    config = Storage.bot_config
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if config.admin_ids:
        admin_id = list(config.admin_ids)[0]
        is_admin = Storage.is_admin(admin_id)
        print_result("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", is_admin, f"ID: {admin_id}")
    else:
        print_result("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", False, "–ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    has_channel = config.publish_channel_id is not None
    print_result("–ö–∞–Ω–∞–ª –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", has_channel, 
                f"ID: {config.publish_channel_id}, Username: {config.publish_channel_username}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    print_result("–ê–≤—Ç–æ–ø—É–±–ª–∏–∫–∞—Ü–∏—è", True,
                f"–í–∫–ª—é—á–µ–Ω–∞: {'–î–∞' if config.auto_publish_enabled else '–ù–µ—Ç'}")
    
    print_result("–¢—Ä–µ–±—É–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è", True,
                f"{'–î–∞' if config.require_admin_approval else '–ù–µ—Ç'}")
    
    return True

def test_post_moderation():
    """–¢–µ—Å—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤"""
    print_test_header("–ú–æ–¥–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    pending_posts = AdminService.get_posts_for_review()
    print_result("–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏", True, 
                f"–í—Å–µ–≥–æ: {len(pending_posts)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –ø–æ—Å—Ç–æ–≤
    all_posts = Storage.get_pending_posts()
    status_counts = {}
    for post in all_posts:
        status = post.status.value
        status_counts[status] = status_counts.get(status, 0) + 1
    
    print_result("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å—Ç–æ–≤", True, 
                f"–í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {len(all_posts)}")
    
    for status, count in status_counts.items():
        print(f"  - {status}: {count}")
    
    return True

def test_monitoring():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    print_test_header("–§—É–Ω–∫—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
    
    all_users = Storage.get_all_users()
    total_chats = sum(len(user.monitored_chats) for user in all_users.values())
    total_channels = sum(len(user.monitored_channels) for user in all_users.values())
    
    print_result("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤", True,
                f"–ß–∞—Ç–æ–≤: {total_chats}, –ö–∞–Ω–∞–ª–æ–≤: {total_channels}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    total_keywords = sum(len(user.keywords) for user in all_users.values())
    total_exclude = sum(len(user.exclude_keywords) for user in all_users.values())
    
    print_result("–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞", True,
                f"–í–∞–∂–Ω—ã—Ö: {total_keywords}, –ò—Å–∫–ª—é—á–∞–µ–º—ã—Ö: {total_exclude}")
    
    return True

def test_bot_config():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞"""
    print_test_header("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
    has_token = bool(TELEGRAM_TOKEN)
    print_result("Telegram —Ç–æ–∫–µ–Ω", has_token, 
                "–¢–æ–∫–µ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω" if has_token else "–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä–æ–≥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    print_result("–ü–æ—Ä–æ–≥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", True, 
                f"–ó–Ω–∞—á–µ–Ω–∏–µ: {DEFAULT_IMPORTANCE_THRESHOLD}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    import os
    config_exists = os.path.exists("bot_config.json")
    print_result("–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", config_exists,
                "bot_config.json" if config_exists else "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    db_exists = os.path.exists("bot_database.json")
    print_result("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", db_exists,
                "bot_database.json" if db_exists else "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    return has_token

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("\n" + "="*60)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–£–ù–ö–¶–ò–ô –ë–û–¢–ê")
    print("="*60)
    
    all_tests_passed = True
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    tests = [
        ("–•—Ä–∞–Ω–∏–ª–∏—â–µ", test_storage),
        ("–ò–ò –æ—Ü–µ–Ω–∫–∞", test_ai_evaluation),
        ("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ", test_admin_functions),
        ("–ú–æ–¥–µ—Ä–∞—Ü–∏—è", test_post_moderation),
        ("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", test_monitoring),
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", test_bot_config)
    ]
    
    for test_name, test_func in tests:
        try:
            if asyncio.iscoroutinefunction(test_func):
                result = await test_func()
            else:
                result = test_func()
            
            if not result:
                all_tests_passed = False
        except Exception as e:
            print_result(test_name, False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            all_tests_passed = False
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "="*60)
    if all_tests_passed:
        print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
    else:
        print("‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´")
    print("="*60)
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\nüìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    
    config = Storage.bot_config
    if not config.admin_ids:
        print("‚ö†Ô∏è  –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    
    if not config.publish_channel_id:
        print("‚ö†Ô∏è  –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
    
    if config.importance_threshold == DEFAULT_IMPORTANCE_THRESHOLD:
        print("üí° –ü–æ—Ä–æ–≥ –≤–∞–∂–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    
    all_users = Storage.get_all_users()
    if not all_users:
        print("üí° –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞")

if __name__ == "__main__":
    asyncio.run(main())